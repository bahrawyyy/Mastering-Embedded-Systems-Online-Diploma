
Drivers2_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a18  08000a18  00010a20  2**0
                  CONTENTS
  4 .ARM          00000000  08000a18  08000a18  00010a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a18  08000a20  00010a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a1c  08000a1c  00010a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000a20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000a20  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002707  00000000  00000000  00010a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005fe  00000000  00000000  00013150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006cc  00000000  00000000  0001374e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000130  00000000  00000000  00013e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00013f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000071c  00000000  00000000  00014048  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000147f  00000000  00000000  00014764  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009190  00000000  00000000  00015be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001ed73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a4  00000000  00000000  0001edf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009f4 	.word	0x080009f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009f4 	.word	0x080009f4

08000170 <EXTI9_CallBack>:
#include "Lcd.h"
#include "KPD_interface.h"

uint16_t IRQ_Flag = 0;

void EXTI9_CallBack(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI9_CallBack+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
//	Lcd_ES_tsendString("IRQ EXTI9 occurred");
//	LCD_ES_tGoTo(1, 4);
//	Lcd_ES_tsendString("-|_");
//	wait_ms(2000);
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000001c 	.word	0x2000001c

08000188 <main>:

int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0
	// Enable clock
	// RCC_GPIOA_CLK_EN();   // Connected to LCD
	RCC_GPIOB_CLK_EN();
 800018e:	4b13      	ldr	r3, [pc, #76]	; (80001dc <main+0x54>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a12      	ldr	r2, [pc, #72]	; (80001dc <main+0x54>)
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800019a:	4b10      	ldr	r3, [pc, #64]	; (80001dc <main+0x54>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <main+0x54>)
 80001a0:	f043 0301 	orr.w	r3, r3, #1
 80001a4:	6193      	str	r3, [r2, #24]
//	Lcd_ES_tInit();
//	lcd_ES_tclear();


	EXTI_PinConfig_t EXTI_Cfg;
	EXTI_Cfg.EXTI_PIN = EXTI9PB9;
 80001a6:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <main+0x58>)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80001ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Cfg.TriggerCase = EXTI_Trigger_RISING;
 80001b0:	2300      	movs	r3, #0
 80001b2:	743b      	strb	r3, [r7, #16]
	EXTI_Cfg.P_IRQ_CallBack = EXTI9_CallBack;
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <main+0x5c>)
 80001b6:	617b      	str	r3, [r7, #20]
	EXTI_Cfg.IRQ_Enable = EXTI_IRQ_Enable;
 80001b8:	2301      	movs	r3, #1
 80001ba:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_Cfg);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 f9f6 	bl	80005b0 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <main+0x60>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	801a      	strh	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <main+0x60>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0fb      	beq.n	80001ca <main+0x42>
		{
			// lcd_ES_tclear();
			IRQ_Flag = 0;
 80001d2:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <main+0x60>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	801a      	strh	r2, [r3, #0]
		if(IRQ_Flag)
 80001d8:	e7f7      	b.n	80001ca <main+0x42>
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	08000a0c 	.word	0x08000a0c
 80001e4:	08000171 	.word	0x08000171
 80001e8:	2000001c 	.word	0x2000001c

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	; (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 fbc7 	bl	80009ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ffb3 	bl	8000188 <main>

08000222 <LoopForever>:

LoopForever:
    b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	08000a20 	.word	0x08000a20
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000005c 	.word	0x2000005c

0800023c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_2_IRQHandler>
	...

08000240 <Enable_NVIC>:
 *  Generic Functions
 *  ****************  */


void Enable_NVIC(uint16_t IRQ)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800024a:	88fb      	ldrh	r3, [r7, #6]
 800024c:	2b0f      	cmp	r3, #15
 800024e:	d854      	bhi.n	80002fa <Enable_NVIC+0xba>
 8000250:	a201      	add	r2, pc, #4	; (adr r2, 8000258 <Enable_NVIC+0x18>)
 8000252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000256:	bf00      	nop
 8000258:	08000299 	.word	0x08000299
 800025c:	080002a7 	.word	0x080002a7
 8000260:	080002b5 	.word	0x080002b5
 8000264:	080002c3 	.word	0x080002c3
 8000268:	080002d1 	.word	0x080002d1
 800026c:	080002df 	.word	0x080002df
 8000270:	080002df 	.word	0x080002df
 8000274:	080002df 	.word	0x080002df
 8000278:	080002df 	.word	0x080002df
 800027c:	080002df 	.word	0x080002df
 8000280:	080002ed 	.word	0x080002ed
 8000284:	080002ed 	.word	0x080002ed
 8000288:	080002ed 	.word	0x080002ed
 800028c:	080002ed 	.word	0x080002ed
 8000290:	080002ed 	.word	0x080002ed
 8000294:	080002ed 	.word	0x080002ed
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000298:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <Enable_NVIC+0xc4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a19      	ldr	r2, [pc, #100]	; (8000304 <Enable_NVIC+0xc4>)
 800029e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a2:	6013      	str	r3, [r2, #0]
		break;
 80002a4:	e029      	b.n	80002fa <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <Enable_NVIC+0xc4>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a16      	ldr	r2, [pc, #88]	; (8000304 <Enable_NVIC+0xc4>)
 80002ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b0:	6013      	str	r3, [r2, #0]
		break;
 80002b2:	e022      	b.n	80002fa <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <Enable_NVIC+0xc4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <Enable_NVIC+0xc4>)
 80002ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002be:	6013      	str	r3, [r2, #0]
		break;
 80002c0:	e01b      	b.n	80002fa <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <Enable_NVIC+0xc4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a0f      	ldr	r2, [pc, #60]	; (8000304 <Enable_NVIC+0xc4>)
 80002c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002cc:	6013      	str	r3, [r2, #0]
		break;
 80002ce:	e014      	b.n	80002fa <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <Enable_NVIC+0xc4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <Enable_NVIC+0xc4>)
 80002d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002da:	6013      	str	r3, [r2, #0]
		break;
 80002dc:	e00d      	b.n	80002fa <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <Enable_NVIC+0xc4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <Enable_NVIC+0xc4>)
 80002e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e8:	6013      	str	r3, [r2, #0]
		break;
 80002ea:	e006      	b.n	80002fa <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <Enable_NVIC+0xc8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <Enable_NVIC+0xc8>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f6:	6013      	str	r3, [r2, #0]
		break;
 80002f8:	bf00      	nop
	}
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000e104 	.word	0xe000e104

0800030c <Disable_NVIC>:


void Disable_NVIC(uint16_t IRQ)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	2b0f      	cmp	r3, #15
 800031a:	d854      	bhi.n	80003c6 <Disable_NVIC+0xba>
 800031c:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <Disable_NVIC+0x18>)
 800031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000322:	bf00      	nop
 8000324:	08000365 	.word	0x08000365
 8000328:	08000373 	.word	0x08000373
 800032c:	08000381 	.word	0x08000381
 8000330:	0800038f 	.word	0x0800038f
 8000334:	0800039d 	.word	0x0800039d
 8000338:	080003ab 	.word	0x080003ab
 800033c:	080003ab 	.word	0x080003ab
 8000340:	080003ab 	.word	0x080003ab
 8000344:	080003ab 	.word	0x080003ab
 8000348:	080003ab 	.word	0x080003ab
 800034c:	080003b9 	.word	0x080003b9
 8000350:	080003b9 	.word	0x080003b9
 8000354:	080003b9 	.word	0x080003b9
 8000358:	080003b9 	.word	0x080003b9
 800035c:	080003b9 	.word	0x080003b9
 8000360:	080003b9 	.word	0x080003b9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <Disable_NVIC+0xc4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <Disable_NVIC+0xc4>)
 800036a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800036e:	6013      	str	r3, [r2, #0]
		break;
 8000370:	e029      	b.n	80003c6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <Disable_NVIC+0xc4>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <Disable_NVIC+0xc4>)
 8000378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037c:	6013      	str	r3, [r2, #0]
		break;
 800037e:	e022      	b.n	80003c6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <Disable_NVIC+0xc4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <Disable_NVIC+0xc4>)
 8000386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038a:	6013      	str	r3, [r2, #0]
		break;
 800038c:	e01b      	b.n	80003c6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <Disable_NVIC+0xc4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <Disable_NVIC+0xc4>)
 8000394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000398:	6013      	str	r3, [r2, #0]
		break;
 800039a:	e014      	b.n	80003c6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <Disable_NVIC+0xc4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <Disable_NVIC+0xc4>)
 80003a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003a6:	6013      	str	r3, [r2, #0]
		break;
 80003a8:	e00d      	b.n	80003c6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <Disable_NVIC+0xc4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <Disable_NVIC+0xc4>)
 80003b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003b4:	6013      	str	r3, [r2, #0]
		break;
 80003b6:	e006      	b.n	80003c6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <Disable_NVIC+0xc8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <Disable_NVIC+0xc8>)
 80003be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c2:	6013      	str	r3, [r2, #0]
		break;
 80003c4:	bf00      	nop
	}
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	e000e180 	.word	0xe000e180
 80003d4:	e000e184 	.word	0xe000e184

080003d8 <Update_EXTI>:



void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	// 1- Configure GPIO to be AF input --> Floating input from data sheet

	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	891b      	ldrh	r3, [r3, #8]
 80003e4:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80003e6:	2308      	movs	r3, #8
 80003e8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fa5a 	bl	80008ae <MCAL_GPIO_Init>

	// ----------------------------------------------------------

	// 2- Update AFIO to route between EXTI line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_lineNumber / 4;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	089b      	lsrs	r3, r3, #2
 8000400:	b29b      	uxth	r3, r3
 8000402:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_ShiftPosition =  (EXTI_Config->EXTI_PIN.EXTI_lineNumber % 4) * 4;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f003 0303 	and.w	r3, r3, #3
 800040e:	b2db      	uxtb	r3, r3
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	73bb      	strb	r3, [r7, #14]


	// Clear the four bit to write on
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_ShiftPosition);
 8000414:	4a5f      	ldr	r2, [pc, #380]	; (8000594 <Update_EXTI+0x1bc>)
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	3302      	adds	r3, #2
 800041a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	210f      	movs	r1, #15
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	43db      	mvns	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	495a      	ldr	r1, [pc, #360]	; (8000594 <Update_EXTI+0x1bc>)
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	4002      	ands	r2, r0
 8000430:	3302      	adds	r3, #2
 8000432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0XF) << AFIO_EXTICR_ShiftPosition);
 8000436:	4a57      	ldr	r2, [pc, #348]	; (8000594 <Update_EXTI+0x1bc>)
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	3302      	adds	r3, #2
 800043c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4954      	ldr	r1, [pc, #336]	; (8000598 <Update_EXTI+0x1c0>)
 8000446:	428b      	cmp	r3, r1
 8000448:	d016      	beq.n	8000478 <Update_EXTI+0xa0>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	4953      	ldr	r1, [pc, #332]	; (800059c <Update_EXTI+0x1c4>)
 8000450:	428b      	cmp	r3, r1
 8000452:	d00f      	beq.n	8000474 <Update_EXTI+0x9c>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4951      	ldr	r1, [pc, #324]	; (80005a0 <Update_EXTI+0x1c8>)
 800045a:	428b      	cmp	r3, r1
 800045c:	d008      	beq.n	8000470 <Update_EXTI+0x98>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4950      	ldr	r1, [pc, #320]	; (80005a4 <Update_EXTI+0x1cc>)
 8000464:	428b      	cmp	r3, r1
 8000466:	d101      	bne.n	800046c <Update_EXTI+0x94>
 8000468:	2303      	movs	r3, #3
 800046a:	e006      	b.n	800047a <Update_EXTI+0xa2>
 800046c:	2300      	movs	r3, #0
 800046e:	e004      	b.n	800047a <Update_EXTI+0xa2>
 8000470:	2302      	movs	r3, #2
 8000472:	e002      	b.n	800047a <Update_EXTI+0xa2>
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <Update_EXTI+0xa2>
 8000478:	2300      	movs	r3, #0
 800047a:	7bb9      	ldrb	r1, [r7, #14]
 800047c:	408b      	lsls	r3, r1
 800047e:	4618      	mov	r0, r3
 8000480:	4944      	ldr	r1, [pc, #272]	; (8000594 <Update_EXTI+0x1bc>)
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	4302      	orrs	r2, r0
 8000486:	3302      	adds	r3, #2
 8000488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	// 3- Update Rising or falling edge

	// First clear them then writing
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 800048c:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <Update_EXTI+0x1d0>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	43d2      	mvns	r2, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a42      	ldr	r2, [pc, #264]	; (80005a8 <Update_EXTI+0x1d0>)
 80004a0:	400b      	ands	r3, r1
 80004a2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 80004a4:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <Update_EXTI+0x1d0>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a3c      	ldr	r2, [pc, #240]	; (80005a8 <Update_EXTI+0x1d0>)
 80004b8:	400b      	ands	r3, r1
 80004ba:	60d3      	str	r3, [r2, #12]

	// Update them
	if(EXTI_Config->TriggerCase == EXTI_Trigger_RISING)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7b1b      	ldrb	r3, [r3, #12]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d10b      	bne.n	80004dc <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 80004c4:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <Update_EXTI+0x1d0>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	8812      	ldrh	r2, [r2, #0]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a34      	ldr	r2, [pc, #208]	; (80005a8 <Update_EXTI+0x1d0>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6093      	str	r3, [r2, #8]
 80004da:	e029      	b.n	8000530 <Update_EXTI+0x158>
	}else if(EXTI_Config->TriggerCase == EXTI_Trigger_FALLING)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7b1b      	ldrb	r3, [r3, #12]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10b      	bne.n	80004fc <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 80004e4:	4b30      	ldr	r3, [pc, #192]	; (80005a8 <Update_EXTI+0x1d0>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	8812      	ldrh	r2, [r2, #0]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	4a2c      	ldr	r2, [pc, #176]	; (80005a8 <Update_EXTI+0x1d0>)
 80004f6:	430b      	orrs	r3, r1
 80004f8:	60d3      	str	r3, [r2, #12]
 80004fa:	e019      	b.n	8000530 <Update_EXTI+0x158>
	}else if(EXTI_Config->TriggerCase == EXTI_Trigger_RISINGANDFALLING)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	7b1b      	ldrb	r3, [r3, #12]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d115      	bne.n	8000530 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <Update_EXTI+0x1d0>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	4611      	mov	r1, r2
 800050e:	2201      	movs	r2, #1
 8000510:	408a      	lsls	r2, r1
 8000512:	4611      	mov	r1, r2
 8000514:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <Update_EXTI+0x1d0>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <Update_EXTI+0x1d0>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	8812      	ldrh	r2, [r2, #0]
 8000522:	4611      	mov	r1, r2
 8000524:	2201      	movs	r2, #1
 8000526:	408a      	lsls	r2, r1
 8000528:	4611      	mov	r1, r2
 800052a:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <Update_EXTI+0x1d0>)
 800052c:	430b      	orrs	r3, r1
 800052e:	60d3      	str	r3, [r2, #12]


	// 4- Update IRQ handling CallBack


	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_lineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <Update_EXTI+0x1d4>)
 800053c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	// 5- Enable or disable IRQ EXTI & NVIC


	if(EXTI_Config->IRQ_Enable == EXTI_IRQ_Enable)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	7b5b      	ldrb	r3, [r3, #13]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d110      	bne.n	800056a <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <Update_EXTI+0x1d0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	8812      	ldrh	r2, [r2, #0]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <Update_EXTI+0x1d0>)
 800055a:	430b      	orrs	r3, r1
 800055c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe6c 	bl	8000240 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_lineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_lineNumber);
	}


}
 8000568:	e010      	b.n	800058c <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <Update_EXTI+0x1d0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	8812      	ldrh	r2, [r2, #0]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	43d2      	mvns	r2, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <Update_EXTI+0x1d0>)
 800057e:	400b      	ands	r3, r1
 8000580:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fec0 	bl	800030c <Disable_NVIC>
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40010000 	.word	0x40010000
 8000598:	40010800 	.word	0x40010800
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	40011000 	.word	0x40011000
 80005a4:	40011400 	.word	0x40011400
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000020 	.word	0x20000020

080005b0 <MCAL_EXTI_GPIO_Init>:
 */



void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ff0d 	bl	80003d8 <Update_EXTI>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <EXTI0_IRQHandler+0x1c>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <EXTI0_IRQHandler+0x1c>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <EXTI0_IRQHandler+0x20>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4798      	blx	r3

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010400 	.word	0x40010400
 80005e8:	20000020 	.word	0x20000020

080005ec <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <EXTI1_IRQHandler+0x1c>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <EXTI1_IRQHandler+0x1c>)
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <EXTI1_IRQHandler+0x20>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4798      	blx	r3
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40010400 	.word	0x40010400
 800060c:	20000020 	.word	0x20000020

08000610 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI2_IRQHandler+0x1c>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI2_IRQHandler+0x1c>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <EXTI2_IRQHandler+0x20>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	20000020 	.word	0x20000020

08000634 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI3_IRQHandler+0x1c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI3_IRQHandler+0x1c>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI3_IRQHandler+0x20>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	20000020 	.word	0x20000020

08000658 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI4_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI4_IRQHandler+0x1c>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI4_IRQHandler+0x20>)
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	20000020 	.word	0x20000020

0800067c <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <EXTI9_5_IRQHandler+0x22>
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 8000692:	f043 0320 	orr.w	r3, r3, #32
 8000696:	6153      	str	r3, [r2, #20]
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <EXTI9_5_IRQHandler+0xa4>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d008      	beq.n	80006bc <EXTI9_5_IRQHandler+0x40>
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <EXTI9_5_IRQHandler+0xa4>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d008      	beq.n	80006da <EXTI9_5_IRQHandler+0x5e>
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d2:	6153      	str	r3, [r2, #20]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <EXTI9_5_IRQHandler+0xa4>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d008      	beq.n	80006f8 <EXTI9_5_IRQHandler+0x7c>
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <EXTI9_5_IRQHandler+0xa4>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000700:	2b00      	cmp	r3, #0
 8000702:	d008      	beq.n	8000716 <EXTI9_5_IRQHandler+0x9a>
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <EXTI9_5_IRQHandler+0xa0>)
 800070a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070e:	6153      	str	r3, [r2, #20]
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <EXTI9_5_IRQHandler+0xa4>)
 8000712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000714:	4798      	blx	r3
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40010400 	.word	0x40010400
 8000720:	20000020 	.word	0x20000020

08000724 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000730:	2b00      	cmp	r3, #0
 8000732:	d008      	beq.n	8000746 <EXTI15_10_IRQHandler+0x22>
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 800073a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800073e:	6153      	str	r3, [r2, #20]
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <EXTI15_10_IRQHandler+0xc0>)
 8000742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000744:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800074e:	2b00      	cmp	r3, #0
 8000750:	d008      	beq.n	8000764 <EXTI15_10_IRQHandler+0x40>
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <EXTI15_10_IRQHandler+0xc0>)
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <EXTI15_10_IRQHandler+0x5e>
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800077a:	6153      	str	r3, [r2, #20]
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <EXTI15_10_IRQHandler+0xc0>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <EXTI15_10_IRQHandler+0x7c>
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 8000794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <EXTI15_10_IRQHandler+0xc0>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d008      	beq.n	80007be <EXTI15_10_IRQHandler+0x9a>
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6153      	str	r3, [r2, #20]
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <EXTI15_10_IRQHandler+0xc0>)
 80007ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007bc:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d008      	beq.n	80007dc <EXTI15_10_IRQHandler+0xb8>
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <EXTI15_10_IRQHandler+0xbc>)
 80007d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <EXTI15_10_IRQHandler+0xc0>)
 80007d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007da:	4798      	blx	r3
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40010400 	.word	0x40010400
 80007e4:	20000020 	.word	0x20000020

080007e8 <Get_CRLH_Position>:
#include "Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	2b80      	cmp	r3, #128	; 0x80
 80007f6:	d042      	beq.n	800087e <Get_CRLH_Position+0x96>
 80007f8:	2b80      	cmp	r3, #128	; 0x80
 80007fa:	dc11      	bgt.n	8000820 <Get_CRLH_Position+0x38>
 80007fc:	2b08      	cmp	r3, #8
 80007fe:	d036      	beq.n	800086e <Get_CRLH_Position+0x86>
 8000800:	2b08      	cmp	r3, #8
 8000802:	dc06      	bgt.n	8000812 <Get_CRLH_Position+0x2a>
 8000804:	2b02      	cmp	r3, #2
 8000806:	d02e      	beq.n	8000866 <Get_CRLH_Position+0x7e>
 8000808:	2b04      	cmp	r3, #4
 800080a:	d02e      	beq.n	800086a <Get_CRLH_Position+0x82>
 800080c:	2b01      	cmp	r3, #1
 800080e:	d028      	beq.n	8000862 <Get_CRLH_Position+0x7a>
 8000810:	e047      	b.n	80008a2 <Get_CRLH_Position+0xba>
 8000812:	2b20      	cmp	r3, #32
 8000814:	d02f      	beq.n	8000876 <Get_CRLH_Position+0x8e>
 8000816:	2b40      	cmp	r3, #64	; 0x40
 8000818:	d02f      	beq.n	800087a <Get_CRLH_Position+0x92>
 800081a:	2b10      	cmp	r3, #16
 800081c:	d029      	beq.n	8000872 <Get_CRLH_Position+0x8a>
 800081e:	e040      	b.n	80008a2 <Get_CRLH_Position+0xba>
 8000820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000824:	d033      	beq.n	800088e <Get_CRLH_Position+0xa6>
 8000826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800082a:	dc09      	bgt.n	8000840 <Get_CRLH_Position+0x58>
 800082c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000830:	d029      	beq.n	8000886 <Get_CRLH_Position+0x9e>
 8000832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000836:	d028      	beq.n	800088a <Get_CRLH_Position+0xa2>
 8000838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800083c:	d021      	beq.n	8000882 <Get_CRLH_Position+0x9a>
 800083e:	e030      	b.n	80008a2 <Get_CRLH_Position+0xba>
 8000840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000844:	d027      	beq.n	8000896 <Get_CRLH_Position+0xae>
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	dc03      	bgt.n	8000854 <Get_CRLH_Position+0x6c>
 800084c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000850:	d01f      	beq.n	8000892 <Get_CRLH_Position+0xaa>
 8000852:	e026      	b.n	80008a2 <Get_CRLH_Position+0xba>
 8000854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000858:	d01f      	beq.n	800089a <Get_CRLH_Position+0xb2>
 800085a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800085e:	d01e      	beq.n	800089e <Get_CRLH_Position+0xb6>
 8000860:	e01f      	b.n	80008a2 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000862:	2300      	movs	r3, #0
 8000864:	e01e      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000866:	2304      	movs	r3, #4
 8000868:	e01c      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800086a:	2308      	movs	r3, #8
 800086c:	e01a      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800086e:	230c      	movs	r3, #12
 8000870:	e018      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000872:	2310      	movs	r3, #16
 8000874:	e016      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000876:	2314      	movs	r3, #20
 8000878:	e014      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800087a:	2318      	movs	r3, #24
 800087c:	e012      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800087e:	231c      	movs	r3, #28
 8000880:	e010      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000882:	2300      	movs	r3, #0
 8000884:	e00e      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000886:	2304      	movs	r3, #4
 8000888:	e00c      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800088a:	2308      	movs	r3, #8
 800088c:	e00a      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800088e:	230c      	movs	r3, #12
 8000890:	e008      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000892:	2310      	movs	r3, #16
 8000894:	e006      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000896:	2314      	movs	r3, #20
 8000898:	e004      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800089a:	2318      	movs	r3, #24
 800089c:	e002      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800089e:	231c      	movs	r3, #28
 80008a0:	e000      	b.n	80008a4 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80008ae:	b590      	push	{r4, r7, lr}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	2bff      	cmp	r3, #255	; 0xff
 80008c6:	d801      	bhi.n	80008cc <MCAL_GPIO_Init+0x1e>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	e001      	b.n	80008d0 <MCAL_GPIO_Init+0x22>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3304      	adds	r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff86 	bl	80007e8 <Get_CRLH_Position>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	4093      	lsls	r3, r2
 80008e4:	43da      	mvns	r2, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	401a      	ands	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d00b      	beq.n	8000910 <MCAL_GPIO_Init+0x62>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	2b06      	cmp	r3, #6
 80008fe:	d007      	beq.n	8000910 <MCAL_GPIO_Init+0x62>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d003      	beq.n	8000910 <MCAL_GPIO_Init+0x62>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	2b04      	cmp	r3, #4
 800090e:	d10e      	bne.n	800092e <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	3b04      	subs	r3, #4
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	b25a      	sxtb	r2, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	78db      	ldrb	r3, [r3, #3]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e02c      	b.n	8000988 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d003      	beq.n	800093e <MCAL_GPIO_Init+0x90>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	789b      	ldrb	r3, [r3, #2]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d107      	bne.n	800094e <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e01c      	b.n	8000988 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d102      	bne.n	800095c <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8000956:	2304      	movs	r3, #4
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e015      	b.n	8000988 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 800095c:	2308      	movs	r3, #8
 800095e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d107      	bne.n	8000978 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	431a      	orrs	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	e007      	b.n	8000988 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	8812      	ldrh	r2, [r2, #0]
 8000980:	43d2      	mvns	r2, r2
 8000982:	401a      	ands	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000988:	7bfc      	ldrb	r4, [r7, #15]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff2a 	bl	80007e8 <Get_CRLH_Position>
 8000994:	4603      	mov	r3, r0
 8000996:	fa04 f203 	lsl.w	r2, r4, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	431a      	orrs	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	601a      	str	r2, [r3, #0]


}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <__libc_init_array>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	2500      	movs	r5, #0
 80009b0:	4e0c      	ldr	r6, [pc, #48]	; (80009e4 <__libc_init_array+0x38>)
 80009b2:	4c0d      	ldr	r4, [pc, #52]	; (80009e8 <__libc_init_array+0x3c>)
 80009b4:	1ba4      	subs	r4, r4, r6
 80009b6:	10a4      	asrs	r4, r4, #2
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	d109      	bne.n	80009d0 <__libc_init_array+0x24>
 80009bc:	f000 f81a 	bl	80009f4 <_init>
 80009c0:	2500      	movs	r5, #0
 80009c2:	4e0a      	ldr	r6, [pc, #40]	; (80009ec <__libc_init_array+0x40>)
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <__libc_init_array+0x44>)
 80009c6:	1ba4      	subs	r4, r4, r6
 80009c8:	10a4      	asrs	r4, r4, #2
 80009ca:	42a5      	cmp	r5, r4
 80009cc:	d105      	bne.n	80009da <__libc_init_array+0x2e>
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d4:	4798      	blx	r3
 80009d6:	3501      	adds	r5, #1
 80009d8:	e7ee      	b.n	80009b8 <__libc_init_array+0xc>
 80009da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009de:	4798      	blx	r3
 80009e0:	3501      	adds	r5, #1
 80009e2:	e7f2      	b.n	80009ca <__libc_init_array+0x1e>
 80009e4:	08000a18 	.word	0x08000a18
 80009e8:	08000a18 	.word	0x08000a18
 80009ec:	08000a18 	.word	0x08000a18
 80009f0:	08000a1c 	.word	0x08000a1c

080009f4 <_init>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	bf00      	nop
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr

08000a00 <_fini>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	bf00      	nop
 8000a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a06:	bc08      	pop	{r3}
 8000a08:	469e      	mov	lr, r3
 8000a0a:	4770      	bx	lr
