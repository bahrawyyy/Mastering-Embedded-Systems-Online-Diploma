
Drivers2_EXTI.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000458  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000588  08000590  00010590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000588  08000588  00010590  2**0
                  CONTENTS
  4 .ARM          00000000  08000588  08000588  00010590  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000588  08000590  00010590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800058c  0800058c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000590  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000590  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c07  00000000  00000000  000105b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000046d  00000000  00000000  000121c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000570  00000000  00000000  0001262d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000108  00000000  00000000  00012ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  00012ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001a34  00000000  00000000  00012d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000f3f  00000000  00000000  000147bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ebc8  00000000  00000000  000156fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000242c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000314  00000000  00000000  00024340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000570 	.word	0x08000570

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000570 	.word	0x08000570

08000170 <OS_SVC_Services>:

}


void OS_SVC_Services(int* StackFramePointer)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	unsigned char SVC_Number;
	unsigned int Val1, Val2;


	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6]) - 2));
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3318      	adds	r3, #24
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3b02      	subs	r3, #2
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	75fb      	strb	r3, [r7, #23]
	Val1 = StackFramePointer[0];
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	613b      	str	r3, [r7, #16]
	Val2 = StackFramePointer[1];
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3304      	adds	r3, #4
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	60fb      	str	r3, [r7, #12]


	switch(SVC_Number)
 8000192:	7dfb      	ldrb	r3, [r7, #23]
 8000194:	3b01      	subs	r3, #1
 8000196:	2b03      	cmp	r3, #3
 8000198:	d827      	bhi.n	80001ea <OS_SVC_Services+0x7a>
 800019a:	a201      	add	r2, pc, #4	; (adr r2, 80001a0 <OS_SVC_Services+0x30>)
 800019c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a0:	080001b1 	.word	0x080001b1
 80001a4:	080001bf 	.word	0x080001bf
 80001a8:	080001cd 	.word	0x080001cd
 80001ac:	080001dd 	.word	0x080001dd
	{
	case 1:
		StackFramePointer[0] = Val1 + Val2;
 80001b0:	693a      	ldr	r2, [r7, #16]
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	4413      	add	r3, r2
 80001b6:	461a      	mov	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	601a      	str	r2, [r3, #0]
		break;
 80001bc:	e015      	b.n	80001ea <OS_SVC_Services+0x7a>

	case 2:
		StackFramePointer[0] = Val1 - Val2;
 80001be:	693a      	ldr	r2, [r7, #16]
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	1ad3      	subs	r3, r2, r3
 80001c4:	461a      	mov	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	601a      	str	r2, [r3, #0]
		break;
 80001ca:	e00e      	b.n	80001ea <OS_SVC_Services+0x7a>

	case 3:
		StackFramePointer[0] = Val1 * Val2;
 80001cc:	693b      	ldr	r3, [r7, #16]
 80001ce:	68fa      	ldr	r2, [r7, #12]
 80001d0:	fb02 f303 	mul.w	r3, r2, r3
 80001d4:	461a      	mov	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	601a      	str	r2, [r3, #0]
		break;
 80001da:	e006      	b.n	80001ea <OS_SVC_Services+0x7a>

	case 4:
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <OS_SVC_Services+0x84>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <OS_SVC_Services+0x84>)
 80001e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001e6:	6053      	str	r3, [r2, #4]
	}

}
 80001e8:	e7ff      	b.n	80001ea <OS_SVC_Services+0x7a>
 80001ea:	bf00      	nop
 80001ec:	371c      	adds	r7, #28
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <PendSV_Handler>:


void PendSV_Handler()
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <SVC_Handler>:
// Consider it as C function, but don't push anything in stack, it is assembly, force the compiler to not add anything

__attribute ((naked))  void SVC_Handler()
{
	// Check EXC_Return to see if you were MSP or PSP
	__asm("tst lr,#4 \n\t"
 8000204:	f01e 0f04 	tst.w	lr, #4
 8000208:	bf0c      	ite	eq
 800020a:	f3ef 8008 	mrseq	r0, MSP
 800020e:	f3ef 8009 	mrsne	r0, PSP
 8000212:	f7ff bfad 	b.w	8000170 <OS_SVC_Services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_Services");

}
 8000216:	bf00      	nop

08000218 <OS_SVC_Set>:


int OS_SVC_Set(int a, int b, int SVC_ID)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	int result;
	switch(SVC_ID){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	2b03      	cmp	r3, #3
 800022a:	d813      	bhi.n	8000254 <OS_SVC_Set+0x3c>
 800022c:	a201      	add	r2, pc, #4	; (adr r2, 8000234 <OS_SVC_Set+0x1c>)
 800022e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000232:	bf00      	nop
 8000234:	08000245 	.word	0x08000245
 8000238:	08000249 	.word	0x08000249
 800023c:	0800024d 	.word	0x0800024d
 8000240:	08000251 	.word	0x08000251
	case 1:  // Addition
		__asm("svc #0x01");
 8000244:	df01      	svc	1
		break;
 8000246:	e005      	b.n	8000254 <OS_SVC_Set+0x3c>

	case 2:  // Subtraction
		__asm("svc #0x02");
 8000248:	df02      	svc	2
		break;
 800024a:	e003      	b.n	8000254 <OS_SVC_Set+0x3c>

	case 3:  // Multiplication
		__asm("svc #0x03");
 800024c:	df03      	svc	3
		break;
 800024e:	e001      	b.n	8000254 <OS_SVC_Set+0x3c>

	case 4:  // PendSV
		__asm("svc #0x04");
 8000250:	df04      	svc	4
		break;
 8000252:	bf00      	nop

	}
	__asm("mov %0,r0" : "=r"(result));
 8000254:	4603      	mov	r3, r0
 8000256:	617b      	str	r3, [r7, #20]
	return result;
 8000258:	697b      	ldr	r3, [r7, #20]
}
 800025a:	4618      	mov	r0, r3
 800025c:	371c      	adds	r7, #28
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <main>:



int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
//
//	// Main OS
//	Main_OS();


	IRQ_Flag = OS_SVC_Set(3, 3, 1);  // Addition
 8000268:	2201      	movs	r2, #1
 800026a:	2103      	movs	r1, #3
 800026c:	2003      	movs	r0, #3
 800026e:	f7ff ffd3 	bl	8000218 <OS_SVC_Set>
 8000272:	4603      	mov	r3, r0
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <main+0x4c>)
 8000278:	801a      	strh	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3, 3, 2);	 // Subtraction
 800027a:	2202      	movs	r2, #2
 800027c:	2103      	movs	r1, #3
 800027e:	2003      	movs	r0, #3
 8000280:	f7ff ffca 	bl	8000218 <OS_SVC_Set>
 8000284:	4603      	mov	r3, r0
 8000286:	b29a      	uxth	r2, r3
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <main+0x4c>)
 800028a:	801a      	strh	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3, 3, 3);  // Multiplication
 800028c:	2203      	movs	r2, #3
 800028e:	2103      	movs	r1, #3
 8000290:	2003      	movs	r0, #3
 8000292:	f7ff ffc1 	bl	8000218 <OS_SVC_Set>
 8000296:	4603      	mov	r3, r0
 8000298:	b29a      	uxth	r2, r3
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <main+0x4c>)
 800029c:	801a      	strh	r2, [r3, #0]

	OS_SVC_Set(3,3,4);
 800029e:	2204      	movs	r2, #4
 80002a0:	2103      	movs	r1, #3
 80002a2:	2003      	movs	r0, #3
 80002a4:	f7ff ffb8 	bl	8000218 <OS_SVC_Set>
 80002a8:	2300      	movs	r3, #0
////			IRQ_Flag = 0;
////		}
//
//
//	}
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	; (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 f921 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ffbd 	bl	8000264 <main>

080002ea <LoopForever>:

LoopForever:
    b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f8:	08000590 	.word	0x08000590
  ldr r2, =_sbss
 80002fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000300:	2000005c 	.word	0x2000005c

08000304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <EXTI0_IRQHandler+0x1c>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <EXTI0_IRQHandler+0x1c>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI0_IRQHandler+0x20>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4798      	blx	r3

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010400 	.word	0x40010400
 8000328:	20000020 	.word	0x20000020

0800032c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <EXTI1_IRQHandler+0x1c>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <EXTI1_IRQHandler+0x1c>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <EXTI1_IRQHandler+0x20>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4798      	blx	r3
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010400 	.word	0x40010400
 800034c:	20000020 	.word	0x20000020

08000350 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI2_IRQHandler+0x1c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI2_IRQHandler+0x1c>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI2_IRQHandler+0x20>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	20000020 	.word	0x20000020

08000374 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <EXTI3_IRQHandler+0x1c>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <EXTI3_IRQHandler+0x1c>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <EXTI3_IRQHandler+0x20>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4798      	blx	r3
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400
 8000394:	20000020 	.word	0x20000020

08000398 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI4_IRQHandler+0x1c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI4_IRQHandler+0x1c>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <EXTI4_IRQHandler+0x20>)
 80003aa:	691b      	ldr	r3, [r3, #16]
 80003ac:	4798      	blx	r3
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010400 	.word	0x40010400
 80003b8:	20000020 	.word	0x20000020

080003bc <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d008      	beq.n	80003de <EXTI9_5_IRQHandler+0x22>
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a22      	ldr	r2, [pc, #136]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6153      	str	r3, [r2, #20]
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <EXTI9_5_IRQHandler+0xa4>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d008      	beq.n	80003fc <EXTI9_5_IRQHandler+0x40>
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <EXTI9_5_IRQHandler+0xa4>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000404:	2b00      	cmp	r3, #0
 8000406:	d008      	beq.n	800041a <EXTI9_5_IRQHandler+0x5e>
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a13      	ldr	r2, [pc, #76]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000412:	6153      	str	r3, [r2, #20]
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <EXTI9_5_IRQHandler+0xa4>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000422:	2b00      	cmp	r3, #0
 8000424:	d008      	beq.n	8000438 <EXTI9_5_IRQHandler+0x7c>
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a0c      	ldr	r2, [pc, #48]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 800042c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <EXTI9_5_IRQHandler+0xa4>)
 8000434:	6a1b      	ldr	r3, [r3, #32]
 8000436:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000440:	2b00      	cmp	r3, #0
 8000442:	d008      	beq.n	8000456 <EXTI9_5_IRQHandler+0x9a>
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI9_5_IRQHandler+0xa0>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044e:	6153      	str	r3, [r2, #20]
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI9_5_IRQHandler+0xa4>)
 8000452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	20000020 	.word	0x20000020

08000464 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <EXTI15_10_IRQHandler+0x22>
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a29      	ldr	r2, [pc, #164]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800047e:	6153      	str	r3, [r2, #20]
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <EXTI15_10_IRQHandler+0xc0>)
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8000486:	4b26      	ldr	r3, [pc, #152]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <EXTI15_10_IRQHandler+0x40>
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a22      	ldr	r2, [pc, #136]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b21      	ldr	r3, [pc, #132]	; (8000524 <EXTI15_10_IRQHandler+0xc0>)
 80004a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a2:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI15_10_IRQHandler+0x5e>
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <EXTI15_10_IRQHandler+0xc0>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <EXTI15_10_IRQHandler+0x7c>
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a13      	ldr	r2, [pc, #76]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <EXTI15_10_IRQHandler+0xc0>)
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <EXTI15_10_IRQHandler+0x9a>
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6153      	str	r3, [r2, #20]
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <EXTI15_10_IRQHandler+0xc0>)
 80004fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004fc:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000506:	2b00      	cmp	r3, #0
 8000508:	d008      	beq.n	800051c <EXTI15_10_IRQHandler+0xb8>
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <EXTI15_10_IRQHandler+0xbc>)
 8000510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b03      	ldr	r3, [pc, #12]	; (8000524 <EXTI15_10_IRQHandler+0xc0>)
 8000518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800051a:	4798      	blx	r3
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40010400 	.word	0x40010400
 8000524:	20000020 	.word	0x20000020

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2500      	movs	r5, #0
 800052c:	4e0c      	ldr	r6, [pc, #48]	; (8000560 <__libc_init_array+0x38>)
 800052e:	4c0d      	ldr	r4, [pc, #52]	; (8000564 <__libc_init_array+0x3c>)
 8000530:	1ba4      	subs	r4, r4, r6
 8000532:	10a4      	asrs	r4, r4, #2
 8000534:	42a5      	cmp	r5, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	f000 f81a 	bl	8000570 <_init>
 800053c:	2500      	movs	r5, #0
 800053e:	4e0a      	ldr	r6, [pc, #40]	; (8000568 <__libc_init_array+0x40>)
 8000540:	4c0a      	ldr	r4, [pc, #40]	; (800056c <__libc_init_array+0x44>)
 8000542:	1ba4      	subs	r4, r4, r6
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	42a5      	cmp	r5, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000550:	4798      	blx	r3
 8000552:	3501      	adds	r5, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800055a:	4798      	blx	r3
 800055c:	3501      	adds	r5, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08000588 	.word	0x08000588
 8000564:	08000588 	.word	0x08000588
 8000568:	08000588 	.word	0x08000588
 800056c:	0800058c 	.word	0x0800058c

08000570 <_init>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr

0800057c <_fini>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr
