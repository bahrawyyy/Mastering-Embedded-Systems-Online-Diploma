
My_RTOS_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000684  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080007b4  080007b4  000107b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007d8  080007d8  000107e0  2**0
                  CONTENTS
  4 .ARM          00000000  080007d8  080007d8  000107e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d8  080007e0  000107e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007dc  080007dc  000107dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000000  080007e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080007e0  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003580  00000000  00000000  00010809  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000086e  00000000  00000000  00013d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008a8  00000000  00000000  000145f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b8  00000000  00000000  00014ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015058  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000025f4  00000000  00000000  000151b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002311  00000000  00000000  000177ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010104  00000000  00000000  00019abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00029bc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004cc  00000000  00000000  00029c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800079c 	.word	0x0800079c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800079c 	.word	0x0800079c

08000170 <HardFault_Handler>:
#include "CortexMxOS_Porting.h"

// Enabling all faults for possible errors (Accessing memories etc.)

void HardFault_Handler()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	while(1);
 8000174:	e7fe      	b.n	8000174 <HardFault_Handler+0x4>

08000176 <MemManage_Handler>:
}

void MemManage_Handler()
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
	while(1);
 800017a:	e7fe      	b.n	800017a <MemManage_Handler+0x4>

0800017c <BusFault_Handler>:
}

void BusFault_Handler()
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	while(1);
 8000180:	e7fe      	b.n	8000180 <BusFault_Handler+0x4>

08000182 <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	while(1);
 8000186:	e7fe      	b.n	8000186 <UsageFault_Handler+0x4>

08000188 <SVC_Handler>:

// Consider it as C function, but don't push anything in stack, it is assembly, force the compiler to not add anything
__attribute ((naked))  void SVC_Handler()
{
	// Check EXC_Return to see if you were MSP or PSP
	__asm("tst lr,#4 \n\t"
 8000188:	f01e 0f04 	tst.w	lr, #4
 800018c:	bf0c      	ite	eq
 800018e:	f3ef 8008 	mrseq	r0, MSP
 8000192:	f3ef 8009 	mrsne	r0, PSP
 8000196:	f000 b829 	b.w	80001ec <OS_SVC_Services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_Services");
}
 800019a:	bf00      	nop

0800019c <HW_Init>:



void HW_Init()
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	// Initialize clock tree (RCC --> SysTick Timer & CPU) 8MHz
	// 8 MHz (By default)
	// 1 count = 0.125 us
	// X count -> 1ms
	// X = 8000 counts
}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <FIFO_Init>:
#include "My_RTOS_FIFO.h"



FIFO_Status FIFO_Init(FIFO_Buffer_t *fifo, Element_Type* Buffer, uint32_t length)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	if(!Buffer)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d101      	bne.n	80001be <FIFO_Init+0x16>
		return FIFO_Null;
 80001ba:	2303      	movs	r3, #3
 80001bc:	e011      	b.n	80001e2 <FIFO_Init+0x3a>


	fifo->base = Buffer;
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	68ba      	ldr	r2, [r7, #8]
 80001c2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	68da      	ldr	r2, [r3, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]

	return FIFO_No_Error;
 80001e0:	2300      	movs	r3, #0


}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <OS_SVC_Services>:



// To execute specific OS service
void OS_SVC_Services(int* StackFramePointer)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	// OS_SVC_Set stack --> r0 = argument 0 = StackFramePointer
	// OS_SVC_Set stack --> r0,r1,r2,r3,r12,lr,pc,xpsr

	unsigned char SVC_Number;

	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6]) - 2));
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3318      	adds	r3, #24
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3b02      	subs	r3, #2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	73fb      	strb	r3, [r7, #15]


	switch(SVC_Number)
 8000200:	7bfb      	ldrb	r3, [r7, #15]
 8000202:	2b04      	cmp	r3, #4
 8000204:	d80d      	bhi.n	8000222 <OS_SVC_Services+0x36>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <OS_SVC_Services+0x20>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	08000221 	.word	0x08000221
 8000210:	08000221 	.word	0x08000221
 8000214:	08000221 	.word	0x08000221
 8000218:	08000221 	.word	0x08000221
 800021c:	08000221 	.word	0x08000221
	{
	case 0:  // Activate task
		break;
 8000220:	bf00      	nop

	case 4:
		break;
	}

}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <PendSV_Handler>:
}


// Will be used in context switching
void PendSV_Handler()
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <MYRTOS_Create_MainStack>:


void MYRTOS_Create_MainStack()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	OS_Control._S_MSP = &_estack;
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <MYRTOS_Create_MainStack+0x34>)
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MYRTOS_Create_MainStack+0x38>)
 8000240:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <MYRTOS_Create_MainStack+0x38>)
 8000246:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800024a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800024e:	4a08      	ldr	r2, [pc, #32]	; (8000270 <MYRTOS_Create_MainStack+0x38>)
 8000250:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Align 8 Bytes space between Main stack and Process stack
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP - 8);
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MYRTOS_Create_MainStack+0x38>)
 8000256:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800025a:	3b08      	subs	r3, #8
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <MYRTOS_Create_MainStack+0x38>)
 800025e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20002800 	.word	0x20002800
 8000270:	200001ac 	.word	0x200001ac

08000274 <MyRTOS_Idle_Task>:


void MyRTOS_Idle_Task()
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("NOP");
 8000278:	bf00      	nop
 800027a:	e7fd      	b.n	8000278 <MyRTOS_Idle_Task+0x4>

0800027c <MYRTOS_Init>:
}



MYRTOS_errorID MYRTOS_Init()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000282:	2300      	movs	r3, #0
 8000284:	71fb      	strb	r3, [r7, #7]

	// Update OS Mode (Suspend)
	OS_Control.OS_Modes_ID = OS_Suspend;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MYRTOS_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Specify the Main stack for the OS
	MYRTOS_Create_MainStack();
 800028e:	f7ff ffd3 	bl	8000238 <MYRTOS_Create_MainStack>



	// Create OS Ready Queue
	if((FIFO_Init(&ReadyQueue, ReadyQueueFIFO, 100)) != FIFO_No_Error)
 8000292:	2264      	movs	r2, #100	; 0x64
 8000294:	4913      	ldr	r1, [pc, #76]	; (80002e4 <MYRTOS_Init+0x68>)
 8000296:	4814      	ldr	r0, [pc, #80]	; (80002e8 <MYRTOS_Init+0x6c>)
 8000298:	f7ff ff86 	bl	80001a8 <FIFO_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d002      	beq.n	80002a8 <MYRTOS_Init+0x2c>
		ErrorState += ReadyQueue_Init_Error;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	3301      	adds	r3, #1
 80002a6:	71fb      	strb	r3, [r7, #7]


	// Configure idle task
	strcpy(MYRTOS_IdleTask.TaskName,"idleTask");
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <MYRTOS_Init+0x70>)
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <MYRTOS_Init+0x74>)
 80002ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ae:	c303      	stmia	r3!, {r0, r1}
 80002b0:	701a      	strb	r2, [r3, #0]
	MYRTOS_IdleTask.Priority = 255;    // The least priority
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MYRTOS_Init+0x78>)
 80002b4:	22ff      	movs	r2, #255	; 0xff
 80002b6:	711a      	strb	r2, [r3, #4]
	MYRTOS_IdleTask.P_TaskEntry = MyRTOS_Idle_Task;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MYRTOS_Init+0x78>)
 80002ba:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <MYRTOS_Init+0x7c>)
 80002bc:	609a      	str	r2, [r3, #8]
	MYRTOS_IdleTask.Stack_Size = 300;  // Bytes
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <MYRTOS_Init+0x78>)
 80002c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002c4:	601a      	str	r2, [r3, #0]

	ErrorState += MYRTOS_Create_Task(&MYRTOS_IdleTask);
 80002c6:	480b      	ldr	r0, [pc, #44]	; (80002f4 <MYRTOS_Init+0x78>)
 80002c8:	f000 f856 	bl	8000378 <MYRTOS_Create_Task>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4413      	add	r3, r2
 80002d4:	71fb      	strb	r3, [r7, #7]

	return ErrorState;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	200001ac 	.word	0x200001ac
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	20000358 	.word	0x20000358
 80002ec:	20000384 	.word	0x20000384
 80002f0:	080007b4 	.word	0x080007b4
 80002f4:	2000036c 	.word	0x2000036c
 80002f8:	08000275 	.word	0x08000275

080002fc <MYRTOS_Create_Stack>:


void MYRTOS_Create_Stack(Task_Config* taskReference)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	 * 	- r0
	 *
	 * 	//// (Manually defined to save the value of registers (Manually pushed and restored))
	 * 	r5, r6, r7, r8, r9, r10, r11
	 */
	taskReference->Current_PSP = taskReference->_S_PSP_Task;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	461a      	mov	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	615a      	str	r2, [r3, #20]

	taskReference->Current_PSP--;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	1f1a      	subs	r2, r3, #4
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = 0x01000000;  // Dummy psr (by default T=1 Thumb2) to avoid bus fault
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000320:	601a      	str	r2, [r3, #0]

	taskReference->Current_PSP--;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	1f1a      	subs	r2, r3, #4
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = (unsigned int)(taskReference->P_TaskEntry);   // PC value
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689a      	ldr	r2, [r3, #8]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	601a      	str	r2, [r3, #0]

	taskReference->Current_PSP--;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	1f1a      	subs	r2, r3, #4
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = (unsigned int)(0xFFFFFFFD);   // (Dummy value)As if LR (This function came from interrupt
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f06f 0202 	mvn.w	r2, #2
 8000348:	601a      	str	r2, [r3, #0]

	// The rest is 13 registers we want to push with 0 for now
	for(int j=0;j<13;j++)
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e00b      	b.n	8000368 <MYRTOS_Create_Stack+0x6c>
	{
		taskReference->Current_PSP--;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	1f1a      	subs	r2, r3, #4
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	615a      	str	r2, [r3, #20]
		*(taskReference->Current_PSP) = 0;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
	for(int j=0;j<13;j++)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2b0c      	cmp	r3, #12
 800036c:	ddf0      	ble.n	8000350 <MYRTOS_Create_Stack+0x54>
	}
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <MYRTOS_Create_Task>:



MYRTOS_errorID MYRTOS_Create_Task(Task_Config* taskReference)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]

	// Create its own PS Stack
	taskReference->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MYRTOS_Create_Task+0x58>)
 8000386:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	60da      	str	r2, [r3, #12]
	taskReference->_E_PSP_Task = taskReference->_S_PSP_Task -  taskReference->Stack_Size;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	68da      	ldr	r2, [r3, #12]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	1ad2      	subs	r2, r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	611a      	str	r2, [r3, #16]

	// Check that task size isn't exceeding Process stack size
	if(taskReference->_E_PSP_Task < (uint8_t)(&_eheap))
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <MYRTOS_Create_Task+0x5c>)
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d201      	bcs.n	80003ac <MYRTOS_Create_Task+0x34>
		return Task_Exceeded_Stack_Size;
 80003a8:	2302      	movs	r3, #2
 80003aa:	e00d      	b.n	80003c8 <MYRTOS_Create_Task+0x50>

	// Align 8 Byte for the next task PS stack
	OS_Control.PSP_Task_Locator = taskReference->_E_PSP_Task - 8;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	3b08      	subs	r3, #8
 80003b2:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <MYRTOS_Create_Task+0x58>)
 80003b4:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// - _eheap


	// Initialize PS Task Stack
	MYRTOS_Create_Stack(taskReference);
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff9f 	bl	80002fc <MYRTOS_Create_Stack>

	// Task state update (Suspend mode)
	taskReference->Task_State = Suspend;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return ErrorState;
 80003c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200001ac 	.word	0x200001ac
 80003d4:	200006a8 	.word	0x200006a8

080003d8 <task1>:

Task_Config Task1, Task2, Task3;


void task1()
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	while(1){
 80003dc:	e7fe      	b.n	80003dc <task1+0x4>

080003de <task2>:
		// Task1 Code
	}
}

void task2()
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
	while(1){
 80003e2:	e7fe      	b.n	80003e2 <task2+0x4>

080003e4 <task3>:
		// Task1 Code
	}
}

void task3()
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	while(1){
 80003e8:	e7fe      	b.n	80003e8 <task3+0x4>
	...

080003ec <main>:
		// Task1 Code
	}
}

int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	MYRTOS_errorID Error = NO_ERROR;
 80003f2:	2300      	movs	r3, #0
 80003f4:	71fb      	strb	r3, [r7, #7]
	// HW_Init	(Initialize clockTree, ResetController)
	HW_Init();
 80003f6:	f7ff fed1 	bl	800019c <HW_Init>

	if(MYRTOS_Init() != NO_ERROR)
 80003fa:	f7ff ff3f 	bl	800027c <MYRTOS_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d000      	beq.n	8000406 <main+0x1a>
		while(1);
 8000404:	e7fe      	b.n	8000404 <main+0x18>


	// Create tasks
	Task1.Stack_Size = 1024;   // 1kByte
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <main+0xc4>)
 8000408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800040c:	601a      	str	r2, [r3, #0]
	Task1.P_TaskEntry = task1;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <main+0xc4>)
 8000410:	4a28      	ldr	r2, [pc, #160]	; (80004b4 <main+0xc8>)
 8000412:	609a      	str	r2, [r3, #8]
	Task1.Priority = 3;
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <main+0xc4>)
 8000416:	2203      	movs	r2, #3
 8000418:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName, "task_1");
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <main+0xcc>)
 800041c:	4a27      	ldr	r2, [pc, #156]	; (80004bc <main+0xd0>)
 800041e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000422:	6018      	str	r0, [r3, #0]
 8000424:	3304      	adds	r3, #4
 8000426:	8019      	strh	r1, [r3, #0]
 8000428:	3302      	adds	r3, #2
 800042a:	0c0a      	lsrs	r2, r1, #16
 800042c:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;   // 1kByte
 800042e:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <main+0xd4>)
 8000430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000434:	601a      	str	r2, [r3, #0]
	Task2.P_TaskEntry = task2;
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <main+0xd4>)
 8000438:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <main+0xd8>)
 800043a:	609a      	str	r2, [r3, #8]
	Task2.Priority = 3;
 800043c:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <main+0xd4>)
 800043e:	2203      	movs	r2, #3
 8000440:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName, "task_2");
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <main+0xdc>)
 8000444:	4a21      	ldr	r2, [pc, #132]	; (80004cc <main+0xe0>)
 8000446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800044a:	6018      	str	r0, [r3, #0]
 800044c:	3304      	adds	r3, #4
 800044e:	8019      	strh	r1, [r3, #0]
 8000450:	3302      	adds	r3, #2
 8000452:	0c0a      	lsrs	r2, r1, #16
 8000454:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;   // 1kByte
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <main+0xe4>)
 8000458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800045c:	601a      	str	r2, [r3, #0]
	Task3.P_TaskEntry = task3;
 800045e:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <main+0xe4>)
 8000460:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <main+0xe8>)
 8000462:	609a      	str	r2, [r3, #8]
	Task3.Priority = 3;
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <main+0xe4>)
 8000466:	2203      	movs	r2, #3
 8000468:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName, "task_3");
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <main+0xec>)
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <main+0xf0>)
 800046e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000472:	6018      	str	r0, [r3, #0]
 8000474:	3304      	adds	r3, #4
 8000476:	8019      	strh	r1, [r3, #0]
 8000478:	3302      	adds	r3, #2
 800047a:	0c0a      	lsrs	r2, r1, #16
 800047c:	701a      	strb	r2, [r3, #0]

	Error += MYRTOS_Create_Task(&Task1);
 800047e:	480c      	ldr	r0, [pc, #48]	; (80004b0 <main+0xc4>)
 8000480:	f7ff ff7a 	bl	8000378 <MYRTOS_Create_Task>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4413      	add	r3, r2
 800048c:	71fb      	strb	r3, [r7, #7]
	Error += MYRTOS_Create_Task(&Task2);
 800048e:	480c      	ldr	r0, [pc, #48]	; (80004c0 <main+0xd4>)
 8000490:	f7ff ff72 	bl	8000378 <MYRTOS_Create_Task>
 8000494:	4603      	mov	r3, r0
 8000496:	461a      	mov	r2, r3
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4413      	add	r3, r2
 800049c:	71fb      	strb	r3, [r7, #7]
	Error += MYRTOS_Create_Task(&Task3);
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <main+0xe4>)
 80004a0:	f7ff ff6a 	bl	8000378 <MYRTOS_Create_Task>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	4413      	add	r3, r2
 80004ac:	71fb      	strb	r3, [r7, #7]



	while(1)
 80004ae:	e7fe      	b.n	80004ae <main+0xc2>
 80004b0:	200003ac 	.word	0x200003ac
 80004b4:	080003d9 	.word	0x080003d9
 80004b8:	200003c4 	.word	0x200003c4
 80004bc:	080007c0 	.word	0x080007c0
 80004c0:	2000042c 	.word	0x2000042c
 80004c4:	080003df 	.word	0x080003df
 80004c8:	20000444 	.word	0x20000444
 80004cc:	080007c8 	.word	0x080007c8
 80004d0:	200003ec 	.word	0x200003ec
 80004d4:	080003e5 	.word	0x080003e5
 80004d8:	20000404 	.word	0x20000404
 80004dc:	080007d0 	.word	0x080007d0

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f921 	bl	8000754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff ff6b 	bl	80003ec <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000524:	080007e0 	.word	0x080007e0
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800052c:	200004a8 	.word	0x200004a8

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <EXTI0_IRQHandler+0x1c>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <EXTI0_IRQHandler+0x1c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <EXTI0_IRQHandler+0x20>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4798      	blx	r3

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40010400 	.word	0x40010400
 8000554:	2000046c 	.word	0x2000046c

08000558 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <EXTI1_IRQHandler+0x1c>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <EXTI1_IRQHandler+0x1c>)
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <EXTI1_IRQHandler+0x20>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4798      	blx	r3
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010400 	.word	0x40010400
 8000578:	2000046c 	.word	0x2000046c

0800057c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <EXTI2_IRQHandler+0x1c>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <EXTI2_IRQHandler+0x1c>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <EXTI2_IRQHandler+0x20>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4798      	blx	r3
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010400 	.word	0x40010400
 800059c:	2000046c 	.word	0x2000046c

080005a0 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <EXTI3_IRQHandler+0x1c>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <EXTI3_IRQHandler+0x1c>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <EXTI3_IRQHandler+0x20>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4798      	blx	r3
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010400 	.word	0x40010400
 80005c0:	2000046c 	.word	0x2000046c

080005c4 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI4_IRQHandler+0x1c>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <EXTI4_IRQHandler+0x1c>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <EXTI4_IRQHandler+0x20>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	4798      	blx	r3
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010400 	.word	0x40010400
 80005e4:	2000046c 	.word	0x2000046c

080005e8 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <EXTI9_5_IRQHandler+0x22>
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <EXTI9_5_IRQHandler+0xa4>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <EXTI9_5_IRQHandler+0x40>
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 800061c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <EXTI9_5_IRQHandler+0xa4>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <EXTI9_5_IRQHandler+0x5e>
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a13      	ldr	r2, [pc, #76]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 800063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063e:	6153      	str	r3, [r2, #20]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <EXTI9_5_IRQHandler+0xa4>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800064e:	2b00      	cmp	r3, #0
 8000650:	d008      	beq.n	8000664 <EXTI9_5_IRQHandler+0x7c>
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <EXTI9_5_IRQHandler+0xa4>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800066c:	2b00      	cmp	r3, #0
 800066e:	d008      	beq.n	8000682 <EXTI9_5_IRQHandler+0x9a>
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI9_5_IRQHandler+0xa0>)
 8000676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <EXTI9_5_IRQHandler+0xa4>)
 800067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000680:	4798      	blx	r3
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010400 	.word	0x40010400
 800068c:	2000046c 	.word	0x2000046c

08000690 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x22>
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <EXTI15_10_IRQHandler+0xc0>)
 80006ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b0:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <EXTI15_10_IRQHandler+0x40>
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <EXTI15_10_IRQHandler+0xc0>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <EXTI15_10_IRQHandler+0x5e>
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a1a      	ldr	r2, [pc, #104]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e6:	6153      	str	r3, [r2, #20]
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <EXTI15_10_IRQHandler+0xc0>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <EXTI15_10_IRQHandler+0x7c>
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 8000700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <EXTI15_10_IRQHandler+0xc0>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d008      	beq.n	800072a <EXTI15_10_IRQHandler+0x9a>
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	4a0b      	ldr	r2, [pc, #44]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6153      	str	r3, [r2, #20]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <EXTI15_10_IRQHandler+0xc0>)
 8000726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000728:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <EXTI15_10_IRQHandler+0xb8>
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <EXTI15_10_IRQHandler+0xbc>)
 800073c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b03      	ldr	r3, [pc, #12]	; (8000750 <EXTI15_10_IRQHandler+0xc0>)
 8000744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000746:	4798      	blx	r3
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40010400 	.word	0x40010400
 8000750:	2000046c 	.word	0x2000046c

08000754 <__libc_init_array>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	2500      	movs	r5, #0
 8000758:	4e0c      	ldr	r6, [pc, #48]	; (800078c <__libc_init_array+0x38>)
 800075a:	4c0d      	ldr	r4, [pc, #52]	; (8000790 <__libc_init_array+0x3c>)
 800075c:	1ba4      	subs	r4, r4, r6
 800075e:	10a4      	asrs	r4, r4, #2
 8000760:	42a5      	cmp	r5, r4
 8000762:	d109      	bne.n	8000778 <__libc_init_array+0x24>
 8000764:	f000 f81a 	bl	800079c <_init>
 8000768:	2500      	movs	r5, #0
 800076a:	4e0a      	ldr	r6, [pc, #40]	; (8000794 <__libc_init_array+0x40>)
 800076c:	4c0a      	ldr	r4, [pc, #40]	; (8000798 <__libc_init_array+0x44>)
 800076e:	1ba4      	subs	r4, r4, r6
 8000770:	10a4      	asrs	r4, r4, #2
 8000772:	42a5      	cmp	r5, r4
 8000774:	d105      	bne.n	8000782 <__libc_init_array+0x2e>
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800077c:	4798      	blx	r3
 800077e:	3501      	adds	r5, #1
 8000780:	e7ee      	b.n	8000760 <__libc_init_array+0xc>
 8000782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000786:	4798      	blx	r3
 8000788:	3501      	adds	r5, #1
 800078a:	e7f2      	b.n	8000772 <__libc_init_array+0x1e>
 800078c:	080007d8 	.word	0x080007d8
 8000790:	080007d8 	.word	0x080007d8
 8000794:	080007d8 	.word	0x080007d8
 8000798:	080007dc 	.word	0x080007dc

0800079c <_init>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr

080007a8 <_fini>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	bf00      	nop
 80007ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ae:	bc08      	pop	{r3}
 80007b0:	469e      	mov	lr, r3
 80007b2:	4770      	bx	lr
