
Drivers5_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000108c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011dc  080011dc  000111e4  2**0
                  CONTENTS
  4 .ARM          00000000  080011dc  080011dc  000111e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011dc  080011e4  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011dc  080011dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011e0  080011e0  000111e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  080011e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080011e4  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d5a  00000000  00000000  0001120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001042  00000000  00000000  00017f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001312  00000000  00000000  00018fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e8  00000000  00000000  0001a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  0001a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002f4b  00000000  00000000  0001a808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000036d2  00000000  00000000  0001d753  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c232  00000000  00000000  00020e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d057  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009a4  00000000  00000000  0002d0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011a4 	.word	0x080011a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011a4 	.word	0x080011a4

08000170 <EEPROM_Init>:
#include "I2C_Slave_EEPROM.h"



void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	// PB7: I2C1_SDA

	I2C_Config_t I2C_Cfg;

	// I2C Controller act as a master
	I2C_Cfg.General_Call_Address_Detection = I2C_ENGC_ENABLE;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C_Cfg.ACK_Control = I2C_ACK_ENABLE;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C_Cfg.I2C_Clock_Speed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_Cfg.I2C_Mode = I2C_MODE_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C_Cfg.P_Slave_Event_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Cfg.Stretch_Mode = I2C_CLK_Stretch_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fc07 	bl	80009a4 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_Cfg);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 faf2 	bl	8000784 <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_MBytes>:



unsigned char EEPROM_Write_MBytes(unsigned int Memory_Address, unsigned char *bytes,uint8_t DataLength)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint8_t buffer[256];

	buffer[0] = (uint8_t)(Memory_Address >> 8);			// Upper byte memory address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address);				// Lower byte memory address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i=2;i<(DataLength+2);i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_MBytes+0x66>
	{
		buffer[i] = bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i=2;i<(DataLength+2);i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_MBytes+0x42>
	}
	MCAL_I2C_Master_Transmit(I2C1, EEPROM_Slave_Address, buffer, DataLength+2, With_Stop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_MBytes+0xa0>)
 800023e:	f000 fbfb 	bl	8000a38 <MCAL_I2C_Master_Transmit>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_Bytes>:



unsigned char EEPROM_Read_Bytes(unsigned int Memory_Address, uint8_t *data_out,uint8_t DataLength)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[2];
	buffer[0] = (uint8_t)(Memory_Address >> 8);			// Upper byte memory address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(Memory_Address);				// Lower byte memory address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]


	// Write address only
	MCAL_I2C_Master_Transmit(I2C1, EEPROM_Slave_Address, buffer, 2, Without_Stop, Start);
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <EEPROM_Read_Bytes+0x54>)
 8000282:	f000 fbd9 	bl	8000a38 <MCAL_I2C_Master_Transmit>

	// Read Data
	MCAL_I2C_Master_Receive(I2C1, EEPROM_Slave_Address, data_out, DataLength, With_Stop, RepeatedStart);
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <EEPROM_Read_Bytes+0x54>)
 8000298:	f000 fc24 	bl	8000ae4 <MCAL_I2C_Master_Receive>


	return 0;
 800029c:	2300      	movs	r3, #0


}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <main>:




int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	// Enable clock
	RCC_GPIOA_CLK_EN();
 80002b2:	4b24      	ldr	r3, [pc, #144]	; (8000344 <main+0x98>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a23      	ldr	r2, [pc, #140]	; (8000344 <main+0x98>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002be:	4b21      	ldr	r3, [pc, #132]	; (8000344 <main+0x98>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a20      	ldr	r2, [pc, #128]	; (8000344 <main+0x98>)
 80002c4:	f043 0308 	orr.w	r3, r3, #8
 80002c8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <main+0x98>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <main+0x98>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6193      	str	r3, [r2, #24]

	// Test case (1)

	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80002d6:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <main+0x9c>)
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e0:	6018      	str	r0, [r3, #0]
 80002e2:	3304      	adds	r3, #4
 80002e4:	8019      	strh	r1, [r3, #0]
 80002e6:	3302      	adds	r3, #2
 80002e8:	0c0a      	lsrs	r2, r1, #16
 80002ea:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	f8c3 2003 	str.w	r2, [r3, #3]


	EEPROM_Init();
 80002f6:	f7ff ff3b 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_MBytes(0xAF, ch1, 7);
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2207      	movs	r2, #7
 8000300:	4619      	mov	r1, r3
 8000302:	20af      	movs	r0, #175	; 0xaf
 8000304:	f7ff ff54 	bl	80001b0 <EEPROM_Write_MBytes>
	EEPROM_Read_Bytes(0xAF, ch2, 7);
 8000308:	463b      	mov	r3, r7
 800030a:	2207      	movs	r2, #7
 800030c:	4619      	mov	r1, r3
 800030e:	20af      	movs	r0, #175	; 0xaf
 8000310:	f7ff ffa0 	bl	8000254 <EEPROM_Read_Bytes>

	// Test case (2)
	ch1[0] = 0xA;
 8000314:	230a      	movs	r3, #10
 8000316:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000318:	230b      	movs	r3, #11
 800031a:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 800031c:	230c      	movs	r3, #12
 800031e:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000320:	230d      	movs	r3, #13
 8000322:	72fb      	strb	r3, [r7, #11]


	EEPROM_Write_MBytes(0xFFF, ch1, 4);
 8000324:	f107 0308 	add.w	r3, r7, #8
 8000328:	2204      	movs	r2, #4
 800032a:	4619      	mov	r1, r3
 800032c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000330:	f7ff ff3e 	bl	80001b0 <EEPROM_Write_MBytes>
	EEPROM_Read_Bytes(0xFFF, ch2, 4);
 8000334:	463b      	mov	r3, r7
 8000336:	2204      	movs	r2, #4
 8000338:	4619      	mov	r1, r3
 800033a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800033e:	f7ff ff89 	bl	8000254 <EEPROM_Read_Bytes>


	while(1)
 8000342:	e7fe      	b.n	8000342 <main+0x96>
 8000344:	40021000 	.word	0x40021000
 8000348:	080011bc 	.word	0x080011bc

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	; (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 feef 	bl	800115c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff95 	bl	80002ac <main>

08000382 <LoopForever>:

LoopForever:
    b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	080011e4 	.word	0x080011e4
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	200000ac 	.word	0x200000ac

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>
	...

080003a0 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <EXTI0_IRQHandler+0x1c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <EXTI0_IRQHandler+0x1c>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <EXTI0_IRQHandler+0x20>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4798      	blx	r3

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40010400 	.word	0x40010400
 80003c0:	20000070 	.word	0x20000070

080003c4 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <EXTI1_IRQHandler+0x1c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <EXTI1_IRQHandler+0x1c>)
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <EXTI1_IRQHandler+0x20>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4798      	blx	r3
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010400 	.word	0x40010400
 80003e4:	20000070 	.word	0x20000070

080003e8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <EXTI2_IRQHandler+0x1c>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <EXTI2_IRQHandler+0x1c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <EXTI2_IRQHandler+0x20>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4798      	blx	r3
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010400 	.word	0x40010400
 8000408:	20000070 	.word	0x20000070

0800040c <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI3_IRQHandler+0x1c>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI3_IRQHandler+0x1c>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <EXTI3_IRQHandler+0x20>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4798      	blx	r3
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	20000070 	.word	0x20000070

08000430 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <EXTI4_IRQHandler+0x1c>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <EXTI4_IRQHandler+0x1c>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <EXTI4_IRQHandler+0x20>)
 8000442:	691b      	ldr	r3, [r3, #16]
 8000444:	4798      	blx	r3
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010400 	.word	0x40010400
 8000450:	20000070 	.word	0x20000070

08000454 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8000458:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f003 0320 	and.w	r3, r3, #32
 8000460:	2b00      	cmp	r3, #0
 8000462:	d008      	beq.n	8000476 <EXTI9_5_IRQHandler+0x22>
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 800046a:	f043 0320 	orr.w	r3, r3, #32
 800046e:	6153      	str	r3, [r2, #20]
 8000470:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <EXTI9_5_IRQHandler+0xa4>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800047e:	2b00      	cmp	r3, #0
 8000480:	d008      	beq.n	8000494 <EXTI9_5_IRQHandler+0x40>
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 8000488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <EXTI9_5_IRQHandler+0xa4>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8000494:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049c:	2b00      	cmp	r3, #0
 800049e:	d008      	beq.n	80004b2 <EXTI9_5_IRQHandler+0x5e>
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004aa:	6153      	str	r3, [r2, #20]
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <EXTI9_5_IRQHandler+0xa4>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d008      	beq.n	80004d0 <EXTI9_5_IRQHandler+0x7c>
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <EXTI9_5_IRQHandler+0xa4>)
 80004cc:	6a1b      	ldr	r3, [r3, #32]
 80004ce:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <EXTI9_5_IRQHandler+0x9a>
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI9_5_IRQHandler+0xa0>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6153      	str	r3, [r2, #20]
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI9_5_IRQHandler+0xa4>)
 80004ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ec:	4798      	blx	r3
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000070 	.word	0x20000070

080004fc <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000500:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000508:	2b00      	cmp	r3, #0
 800050a:	d008      	beq.n	800051e <EXTI15_10_IRQHandler+0x22>
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a29      	ldr	r2, [pc, #164]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6153      	str	r3, [r2, #20]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <EXTI15_10_IRQHandler+0xc0>)
 800051a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051c:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000526:	2b00      	cmp	r3, #0
 8000528:	d008      	beq.n	800053c <EXTI15_10_IRQHandler+0x40>
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <EXTI15_10_IRQHandler+0xc0>)
 8000538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800053a:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d008      	beq.n	800055a <EXTI15_10_IRQHandler+0x5e>
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800054e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <EXTI15_10_IRQHandler+0xc0>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000562:	2b00      	cmp	r3, #0
 8000564:	d008      	beq.n	8000578 <EXTI15_10_IRQHandler+0x7c>
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800056c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <EXTI15_10_IRQHandler+0xc0>)
 8000574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000576:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d008      	beq.n	8000596 <EXTI15_10_IRQHandler+0x9a>
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6153      	str	r3, [r2, #20]
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <EXTI15_10_IRQHandler+0xc0>)
 8000592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000594:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d008      	beq.n	80005b4 <EXTI15_10_IRQHandler+0xb8>
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <EXTI15_10_IRQHandler+0xbc>)
 80005a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b03      	ldr	r3, [pc, #12]	; (80005bc <EXTI15_10_IRQHandler+0xc0>)
 80005b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005b2:	4798      	blx	r3
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010400 	.word	0x40010400
 80005bc:	20000070 	.word	0x20000070

080005c0 <Get_CRLH_Position>:
#include "Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	2b80      	cmp	r3, #128	; 0x80
 80005ce:	d042      	beq.n	8000656 <Get_CRLH_Position+0x96>
 80005d0:	2b80      	cmp	r3, #128	; 0x80
 80005d2:	dc11      	bgt.n	80005f8 <Get_CRLH_Position+0x38>
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d036      	beq.n	8000646 <Get_CRLH_Position+0x86>
 80005d8:	2b08      	cmp	r3, #8
 80005da:	dc06      	bgt.n	80005ea <Get_CRLH_Position+0x2a>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d02e      	beq.n	800063e <Get_CRLH_Position+0x7e>
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d02e      	beq.n	8000642 <Get_CRLH_Position+0x82>
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d028      	beq.n	800063a <Get_CRLH_Position+0x7a>
 80005e8:	e047      	b.n	800067a <Get_CRLH_Position+0xba>
 80005ea:	2b20      	cmp	r3, #32
 80005ec:	d02f      	beq.n	800064e <Get_CRLH_Position+0x8e>
 80005ee:	2b40      	cmp	r3, #64	; 0x40
 80005f0:	d02f      	beq.n	8000652 <Get_CRLH_Position+0x92>
 80005f2:	2b10      	cmp	r3, #16
 80005f4:	d029      	beq.n	800064a <Get_CRLH_Position+0x8a>
 80005f6:	e040      	b.n	800067a <Get_CRLH_Position+0xba>
 80005f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005fc:	d033      	beq.n	8000666 <Get_CRLH_Position+0xa6>
 80005fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000602:	dc09      	bgt.n	8000618 <Get_CRLH_Position+0x58>
 8000604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000608:	d029      	beq.n	800065e <Get_CRLH_Position+0x9e>
 800060a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060e:	d028      	beq.n	8000662 <Get_CRLH_Position+0xa2>
 8000610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000614:	d021      	beq.n	800065a <Get_CRLH_Position+0x9a>
 8000616:	e030      	b.n	800067a <Get_CRLH_Position+0xba>
 8000618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061c:	d027      	beq.n	800066e <Get_CRLH_Position+0xae>
 800061e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000622:	dc03      	bgt.n	800062c <Get_CRLH_Position+0x6c>
 8000624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000628:	d01f      	beq.n	800066a <Get_CRLH_Position+0xaa>
 800062a:	e026      	b.n	800067a <Get_CRLH_Position+0xba>
 800062c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000630:	d01f      	beq.n	8000672 <Get_CRLH_Position+0xb2>
 8000632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000636:	d01e      	beq.n	8000676 <Get_CRLH_Position+0xb6>
 8000638:	e01f      	b.n	800067a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e01e      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800063e:	2304      	movs	r3, #4
 8000640:	e01c      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000642:	2308      	movs	r3, #8
 8000644:	e01a      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000646:	230c      	movs	r3, #12
 8000648:	e018      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800064a:	2310      	movs	r3, #16
 800064c:	e016      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800064e:	2314      	movs	r3, #20
 8000650:	e014      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000652:	2318      	movs	r3, #24
 8000654:	e012      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000656:	231c      	movs	r3, #28
 8000658:	e010      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800065a:	2300      	movs	r3, #0
 800065c:	e00e      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800065e:	2304      	movs	r3, #4
 8000660:	e00c      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000662:	2308      	movs	r3, #8
 8000664:	e00a      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000666:	230c      	movs	r3, #12
 8000668:	e008      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800066a:	2310      	movs	r3, #16
 800066c:	e006      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800066e:	2314      	movs	r3, #20
 8000670:	e004      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000672:	2318      	movs	r3, #24
 8000674:	e002      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000676:	231c      	movs	r3, #28
 8000678:	e000      	b.n	800067c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000686:	b590      	push	{r4, r7, lr}
 8000688:	b085      	sub	sp, #20
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	2bff      	cmp	r3, #255	; 0xff
 800069e:	d801      	bhi.n	80006a4 <MCAL_GPIO_Init+0x1e>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	e001      	b.n	80006a8 <MCAL_GPIO_Init+0x22>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3304      	adds	r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff86 	bl	80005c0 <Get_CRLH_Position>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	230f      	movs	r3, #15
 80006ba:	4093      	lsls	r3, r2
 80006bc:	43da      	mvns	r2, r3
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	401a      	ands	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d00b      	beq.n	80006e8 <MCAL_GPIO_Init+0x62>
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d007      	beq.n	80006e8 <MCAL_GPIO_Init+0x62>
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d003      	beq.n	80006e8 <MCAL_GPIO_Init+0x62>
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d10e      	bne.n	8000706 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	3b04      	subs	r3, #4
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	b25a      	sxtb	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	78db      	ldrb	r3, [r3, #3]
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	e02c      	b.n	8000760 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d003      	beq.n	8000716 <MCAL_GPIO_Init+0x90>
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d107      	bne.n	8000726 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e01c      	b.n	8000760 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	2b08      	cmp	r3, #8
 800072c:	d102      	bne.n	8000734 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 800072e:	2304      	movs	r3, #4
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e015      	b.n	8000760 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8000734:	2308      	movs	r3, #8
 8000736:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	789b      	ldrb	r3, [r3, #2]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d107      	bne.n	8000750 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	8812      	ldrh	r2, [r2, #0]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	e007      	b.n	8000760 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	8812      	ldrh	r2, [r2, #0]
 8000758:	43d2      	mvns	r2, r2
 800075a:	401a      	ands	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000760:	7bfc      	ldrb	r4, [r7, #15]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff2a 	bl	80005c0 <Get_CRLH_Position>
 800076c:	4603      	mov	r3, r0
 800076e:	fa04 f203 	lsl.w	r2, r4, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	601a      	str	r2, [r3, #0]


}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bd90      	pop	{r4, r7, pc}

08000784 <MCAL_I2C_Init>:
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void MCAL_I2C_Init(I2C_Typedef* I2Cx, I2C_Config_t *I2C_Cfg)
{
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]

	uint16_t tmpreg = 0, freqrange=0;
 800078e:	2300      	movs	r3, #0
 8000790:	82fb      	strh	r3, [r7, #22]
 8000792:	2300      	movs	r3, #0
 8000794:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 8000796:	4b7a      	ldr	r3, [pc, #488]	; (8000980 <MCAL_I2C_Init+0x1fc>)
 8000798:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	81fb      	strh	r3, [r7, #14]


	// Enable RCC clock
	if(I2Cx == I2C1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a78      	ldr	r2, [pc, #480]	; (8000984 <MCAL_I2C_Init+0x200>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d110      	bne.n	80007c8 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Cfg;
 80007a6:	4a78      	ldr	r2, [pc, #480]	; (8000988 <MCAL_I2C_Init+0x204>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	4614      	mov	r4, r2
 80007ac:	461d      	mov	r5, r3
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80007ba:	4b74      	ldr	r3, [pc, #464]	; (800098c <MCAL_I2C_Init+0x208>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a73      	ldr	r2, [pc, #460]	; (800098c <MCAL_I2C_Init+0x208>)
 80007c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	e010      	b.n	80007ea <MCAL_I2C_Init+0x66>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Cfg;
 80007c8:	4b6f      	ldr	r3, [pc, #444]	; (8000988 <MCAL_I2C_Init+0x204>)
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80007d0:	4615      	mov	r5, r2
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	682b      	ldr	r3, [r5, #0]
 80007dc:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 80007de:	4b6b      	ldr	r3, [pc, #428]	; (800098c <MCAL_I2C_Init+0x208>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a6a      	ldr	r2, [pc, #424]	; (800098c <MCAL_I2C_Init+0x208>)
 80007e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e8:	61d3      	str	r3, [r2, #28]
	}


	// Mode
	if(I2C_Cfg->I2C_Mode == I2C_MODE_I2C)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f040 8082 	bne.w	80008f8 <MCAL_I2C_Init+0x174>
	{
		/**************** 1- Initialize timing ************/

		// 1- in I2C_CR2 Bits 5:0 FREQ[5:0]: Peripheral clock frequency from APB1
		// Get the I2Cx CR2 Value
		tmpreg = I2Cx->CR2;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	82fb      	strh	r3, [r7, #22]
		// Clear Frequency FREQ[5:0] bits
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000800:	82fb      	strh	r3, [r7, #22]
		// Get Pclk1 frequency value
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000802:	f000 fc1d 	bl	8001040 <MCAL_RCC_GetPCLK1Freq>
 8000806:	6138      	str	r0, [r7, #16]
		// Set the frequency bits depending on pclk1 value
		freqrange = (uint16_t)(pclk1 / 1000000);
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	4a61      	ldr	r2, [pc, #388]	; (8000990 <MCAL_I2C_Init+0x20c>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9b      	lsrs	r3, r3, #18
 8000812:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange;
 8000814:	8afa      	ldrh	r2, [r7, #22]
 8000816:	8abb      	ldrh	r3, [r7, #20]
 8000818:	4313      	orrs	r3, r2
 800081a:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = tmpreg;
 800081c:	8afa      	ldrh	r2, [r7, #22]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]

		// 2- Configure the clock control register (Thigh = CCR * TPCLK1)

		// Disable the selected I2C Peripheral to configure time
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f023 0201 	bic.w	r2, r3, #1
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	82fb      	strh	r3, [r7, #22]

		// Configure speed in standard mode
		if(I2C_Cfg->I2C_Clock_Speed == I2C_SCLK_SM_50K || I2C_Cfg->I2C_Clock_Speed == I2C_SCLK_SM_100K)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f24c 3250 	movw	r2, #50000	; 0xc350
 800083a:	4293      	cmp	r3, r2
 800083c:	d004      	beq.n	8000848 <MCAL_I2C_Init+0xc4>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a54      	ldr	r2, [pc, #336]	; (8000994 <MCAL_I2C_Init+0x210>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d112      	bne.n	800086e <MCAL_I2C_Init+0xea>

			// Tclki2c / 2 = CCR * Tpclk1
			// CCR = Tclki2c / (2 * Tpclk1)
			// CCR = Fpclk1 / (2 * Fclki2c)

			result = (uint16_t)(pclk1/(I2C_Cfg->I2C_Clock_Speed << 1));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	fbb2 f3f3 	udiv	r3, r2, r3
 8000854:	81fb      	strh	r3, [r7, #14]
			tmpreg |= result;
 8000856:	8afa      	ldrh	r2, [r7, #22]
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	4313      	orrs	r3, r2
 800085c:	82fb      	strh	r3, [r7, #22]

			// Write to CCR
			I2Cx->CCR = tmpreg;
 800085e:	8afa      	ldrh	r2, [r7, #22]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	61da      	str	r2, [r3, #28]

			//	If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//	therefore the TRISE[5:0] bits must be programmed with 09h.
			//	(1000 ns / 125 ns = 8 + 1)

			I2Cx->TRISE = freqrange + 1;
 8000864:	8abb      	ldrh	r3, [r7, #20]
 8000866:	3301      	adds	r3, #1
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	621a      	str	r2, [r3, #32]
		}


		// CR1 Configuration

		tmpreg = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	82fb      	strh	r3, [r7, #22]

		tmpreg = I2Cx->CR1;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	82fb      	strh	r3, [r7, #22]

		tmpreg |= (uint16_t)(I2C_Cfg->ACK_Control | I2C_Cfg->General_Call_Address_Detection |I2C_Cfg->I2C_Mode| I2C_Cfg->Stretch_Mode);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	b29a      	uxth	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	b29b      	uxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b29a      	uxth	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b29a      	uxth	r2, r3
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	b29b      	uxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b29a      	uxth	r2, r3
 800089c:	8afb      	ldrh	r3, [r7, #22]
 800089e:	4313      	orrs	r3, r2
 80008a0:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 = tmpreg;
 80008a2:	8afa      	ldrh	r2, [r7, #22]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]


		// If you were slave
		// ********************* I2Cx OAR1 & I2Cx OAR2 Configuration

		tmpreg = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	82fb      	strh	r3, [r7, #22]
		if(I2C_Cfg->I2C_Slave_Address.Dual_Address_Enable == 1)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	899b      	ldrh	r3, [r3, #12]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10d      	bne.n	80008d0 <MCAL_I2C_Init+0x14c>
		{
			tmpreg = I2C_OAR2_ENDUAL;
 80008b4:	2301      	movs	r3, #1
 80008b6:	82fb      	strh	r3, [r7, #22]
			tmpreg |= I2C_Cfg->I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	8a1b      	ldrh	r3, [r3, #16]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b21a      	sxth	r2, r3
 80008c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 80008ca:	8afa      	ldrh	r2, [r7, #22]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_Cfg->I2C_Slave_Address.Primary_Slave_Address << 1;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	89db      	ldrh	r3, [r3, #14]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	b21a      	sxth	r2, r3
 80008dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	82fb      	strh	r3, [r7, #22]

		tmpreg |= I2C_Cfg->I2C_Slave_Address.Addressing_Bits;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	8afb      	ldrh	r3, [r7, #22]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	82fb      	strh	r3, [r7, #22]

		I2Cx->OAR1 = tmpreg;
 80008f2:	8afa      	ldrh	r2, [r7, #22]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	609a      	str	r2, [r3, #8]
	}



	// Interrupt mode (Slave mode) // Check callBack != NULL, then you're a slave
	if(I2C_Cfg->P_Slave_Event_CallBack != NULL)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d038      	beq.n	8000972 <MCAL_I2C_Init+0x1ee>
	{
		// Enable all IRQs
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <MCAL_I2C_Init+0x200>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d10c      	bne.n	8000946 <MCAL_I2C_Init+0x1c2>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MCAL_I2C_Init+0x214>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <MCAL_I2C_Init+0x214>)
 8000932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000936:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MCAL_I2C_Init+0x218>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <MCAL_I2C_Init+0x218>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e00f      	b.n	8000966 <MCAL_I2C_Init+0x1e2>

		}else if(I2Cx == I2C2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MCAL_I2C_Init+0x21c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d10b      	bne.n	8000966 <MCAL_I2C_Init+0x1e2>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MCAL_I2C_Init+0x218>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MCAL_I2C_Init+0x218>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MCAL_I2C_Init+0x218>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <MCAL_I2C_Init+0x218>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1 = 0;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]




	// Enable the selected I2C peripheral
	I2Cx->CR1 = I2C_CR1_PE;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bdb0      	pop	{r4, r5, r7, pc}
 8000980:	007a1200 	.word	0x007a1200
 8000984:	40005400 	.word	0x40005400
 8000988:	2000001c 	.word	0x2000001c
 800098c:	40021000 	.word	0x40021000
 8000990:	431bde83 	.word	0x431bde83
 8000994:	000186a0 	.word	0x000186a0
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000e104 	.word	0xe000e104
 80009a0:	40005800 	.word	0x40005800

080009a4 <MCAL_I2C_GPIO_Set_Pins>:
 *
 */


void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef* I2Cx)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(I2Cx == I2C1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d118      	bne.n	80009e6 <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1_SCL --> Open drain
		// PB7: I2C1_SDA --> Open drain

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 80009b8:	2307      	movs	r3, #7
 80009ba:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80009bc:	2301      	movs	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	481a      	ldr	r0, [pc, #104]	; (8000a30 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80009c8:	f7ff fe5d 	bl	8000686 <MCAL_GPIO_Init>


		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 80009d0:	2307      	movs	r3, #7
 80009d2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80009e0:	f7ff fe51 	bl	8000686 <MCAL_GPIO_Init>
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

	}

}
 80009e4:	e01d      	b.n	8000a22 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if(I2Cx == I2C2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d119      	bne.n	8000a22 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 80009f4:	2307      	movs	r3, #7
 80009f6:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000a04:	f7ff fe3f 	bl	8000686 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a0c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000a1e:	f7ff fe32 	bl	8000686 <MCAL_GPIO_Init>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40005800 	.word	0x40005800

08000a38 <MCAL_I2C_Master_Transmit>:
 *
 */


void MCAL_I2C_Master_Transmit(I2C_Typedef *I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start Start)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	460b      	mov	r3, r1
 8000a46:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
	// Support timeout (Configure timer working for specific duration, raise interrupt
	// timer_isr(){flag = 1}
	// So any code exist in while (check flag || Any polling condition)

	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, ENABLE, Start);
 8000a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a50:	461a      	mov	r2, r3
 8000a52:	2101      	movs	r1, #1
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f8b7 	bl	8000bc8 <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000a5a:	bf00      	nop
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f000 f8da 	bl	8000c18 <I2C_GetFlagStatus>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f8      	beq.n	8000a5c <MCAL_I2C_Master_Transmit+0x24>


	// 3- Send Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Transmitter);
 8000a6a:	897b      	ldrh	r3, [r7, #10]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f94d 	bl	8000d10 <I2C_SendAddress>


	// .. Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000a76:	bf00      	nop
 8000a78:	2102      	movs	r1, #2
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 f8cc 	bl	8000c18 <I2C_GetFlagStatus>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f8      	beq.n	8000a78 <MCAL_I2C_Master_Transmit+0x40>


	// 4- Check : TRA, BUSY, MSL, TXE Flags
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000a86:	bf00      	nop
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <MCAL_I2C_Master_Transmit+0xa8>)
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 f8c4 	bl	8000c18 <I2C_GetFlagStatus>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f8      	beq.n	8000a88 <MCAL_I2C_Master_Transmit+0x50>

	// 5- Send Data
	for(i=0;i<dataLen;i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e011      	b.n	8000ac0 <MCAL_I2C_Master_Transmit+0x88>
	{
		// Write in the DR register the data to be sent
		I2Cx->DR = dataOut[i];
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

		// Wait EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8000aaa:	bf00      	nop
 8000aac:	2103      	movs	r1, #3
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f8b2 	bl	8000c18 <I2C_GetFlagStatus>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f8      	beq.n	8000aac <MCAL_I2C_Master_Transmit+0x74>
	for(i=0;i<dataLen;i++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8e9      	bhi.n	8000a9c <MCAL_I2C_Master_Transmit+0x64>
	//	EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));


	// 6- Stop Condition
	if(Stop == With_Stop)
 8000ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <MCAL_I2C_Master_Transmit+0xa0>
	{
		I2C_Generate_STOP(I2Cx,ENABLE);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 f952 	bl	8000d7c <I2C_Generate_STOP>
	}

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	00070080 	.word	0x00070080

08000ae4 <MCAL_I2C_Master_Receive>:




void MCAL_I2C_Master_Receive(I2C_Typedef *I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start Start)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	460b      	mov	r3, r1
 8000af2:	817b      	strh	r3, [r7, #10]
	int i=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <MCAL_I2C_Master_Receive+0xdc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	bf14      	ite	ne
 8000b00:	2301      	movne	r3, #1
 8000b02:	2300      	moveq	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	74fb      	strb	r3, [r7, #19]


	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, ENABLE, RepeatedStart);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f85b 	bl	8000bc8 <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000b12:	bf00      	nop
 8000b14:	2101      	movs	r1, #1
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f000 f87e 	bl	8000c18 <I2C_GetFlagStatus>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f8      	beq.n	8000b14 <MCAL_I2C_Master_Receive+0x30>


	// 3- Send Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Reciever);
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f000 f8f1 	bl	8000d10 <I2C_SendAddress>


	// .. Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000b2e:	bf00      	nop
 8000b30:	2102      	movs	r1, #2
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f870 	bl	8000c18 <I2C_GetFlagStatus>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f8      	beq.n	8000b30 <MCAL_I2C_Master_Receive+0x4c>


	// Enabling Acknowledge
	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000b3e:	2101      	movs	r1, #1
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f936 	bl	8000db2 <I2C_AcknowledgeConfig>


	if(dataLen)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d01c      	beq.n	8000b86 <MCAL_I2C_Master_Receive+0xa2>
	{
		for(i=dataLen;i>1;i--)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e012      	b.n	8000b78 <MCAL_I2C_Master_Receive+0x94>
		{
			// Wait for EV7: RXNE=1, Cleared by reading DR
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000b52:	bf00      	nop
 8000b54:	2105      	movs	r1, #5
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f85e 	bl	8000c18 <I2C_GetFlagStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f8      	beq.n	8000b54 <MCAL_I2C_Master_Receive+0x70>
			// Read data from register
			*dataOut = I2Cx->DR;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	701a      	strb	r2, [r3, #0]
			dataOut++;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
		for(i=dataLen;i>1;i--)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	dce9      	bgt.n	8000b52 <MCAL_I2C_Master_Receive+0x6e>
		}
		// Once receiving the last byte, we want to send NACK
		I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f916 	bl	8000db2 <I2C_AcknowledgeConfig>
	}

	// Generate Stop Condition
	if(Stop == With_Stop)
 8000b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <MCAL_I2C_Master_Receive+0xb2>
	{
		I2C_Generate_STOP(I2Cx, ENABLE);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f8f3 	bl	8000d7c <I2C_Generate_STOP>
	}


	// Re-enabling the acknowldege According to the original configuration
	if(Global_I2C_Config[index].ACK_Control == I2C_ACK_ENABLE)
 8000b96:	7cfa      	ldrb	r2, [r7, #19]
 8000b98:	490a      	ldr	r1, [pc, #40]	; (8000bc4 <MCAL_I2C_Master_Receive+0xe0>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bac:	d103      	bne.n	8000bb6 <MCAL_I2C_Master_Receive+0xd2>
	{
		I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f8fe 	bl	8000db2 <I2C_AcknowledgeConfig>
	}

}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	2000001c 	.word	0x2000001c

08000bc8 <I2C_Generate_START>:
 *
 */


void I2C_Generate_START(I2C_Typedef *I2Cx, FunctionalState NewState,Repeated_Start Start)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	70bb      	strb	r3, [r7, #2]
	// Check if start or repeated start
	if(Start != RepeatedStart)
 8000bd8:	78bb      	ldrb	r3, [r7, #2]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d007      	beq.n	8000bee <I2C_Generate_START+0x26>
	{
		// Check if bus is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000bde:	bf00      	nop
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f818 	bl	8000c18 <I2C_GetFlagStatus>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f8      	bne.n	8000be0 <I2C_Generate_START+0x18>
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	// Enable start condition
	if(NewState != DISABLE)
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <I2C_Generate_START+0x3a>
	{
		I2Cx->CR1 |= I2C_CR1_START;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
		// Disable Start condition
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}


}
 8000c00:	e005      	b.n	8000c0e <I2C_Generate_START+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <I2C_GetFlagStatus>:
 *
 */


Flag_Status I2C_GetFlagStatus(I2C_Typedef* I2Cx, Status flag)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;   // To read from
	uint32_t flag1=0,flag2=0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
	uint32_t lastEvent = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
	Flag_Status BitStatus = RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	77fb      	strb	r3, [r7, #31]
	switch(flag)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	d806      	bhi.n	8000c46 <I2C_GetFlagStatus+0x2e>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d249      	bcs.n	8000cd0 <I2C_GetFlagStatus+0xb8>
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d014      	beq.n	8000c6a <I2C_GetFlagStatus+0x52>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d81e      	bhi.n	8000c82 <I2C_GetFlagStatus+0x6a>
 8000c44:	e005      	b.n	8000c52 <I2C_GetFlagStatus+0x3a>
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d04e      	beq.n	8000ce8 <I2C_GetFlagStatus+0xd0>
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <I2C_GetFlagStatus+0xf4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d024      	beq.n	8000c9a <I2C_GetFlagStatus+0x82>
 8000c50:	e056      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0)
		if(I2Cx->SR2 & (I2C_SR2_BUSY))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <I2C_GetFlagStatus+0x4c>
			BitStatus = SET;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
		break;
 8000c62:	e04d      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
			BitStatus = RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	77fb      	strb	r3, [r7, #31]
		break;
 8000c68:	e04a      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if(I2Cx->SR1 & (I2C_SR1_SB))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <I2C_GetFlagStatus+0x64>
			BitStatus = SET;
 8000c76:	2301      	movs	r3, #1
 8000c78:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
		break;
 8000c7a:	e041      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
			BitStatus = RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
		break;
 8000c80:	e03e      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
	case EV6:
	{
		//		Address sent (Master)
		//		0: No end of address transmission
		//		1: End of address transmission
		if(I2Cx->SR1 & (I2C_SR1_ADDR))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <I2C_GetFlagStatus+0x7c>
			BitStatus = SET;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
//		//		ADDR=1, cleared by reading SR1 register followed by reading SR2
//		dummyRead = I2Cx->SR2;
		break;
 8000c92:	e035      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
			BitStatus = RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	77fb      	strb	r3, [r7, #31]
		break;
 8000c98:	e032      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		flag1 = I2Cx->SR1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	041b      	lsls	r3, r3, #16
 8000caa:	617b      	str	r3, [r7, #20]
		// Concatenate the two registers
		lastEvent = (flag1 | flag2) & ((uint32_t)(0x00FFFFFF));
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cb6:	613b      	str	r3, [r7, #16]
		if((lastEvent & flag) == flag)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d102      	bne.n	8000cca <I2C_GetFlagStatus+0xb2>
		{
			BitStatus = SET;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}
		break;
 8000cc8:	e01a      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
			BitStatus = RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	77fb      	strb	r3, [r7, #31]
		break;
 8000cce:	e017      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
	case EV8_1:
	case EV8:
	{
		//		EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		//		EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		if((I2Cx->SR1)& (I2C_SR1_TXE))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <I2C_GetFlagStatus+0xca>
		{
			BitStatus = SET;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}
		break;
 8000ce0:	e00e      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
			BitStatus = RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	77fb      	strb	r3, [r7, #31]
		break;
 8000ce6:	e00b      	b.n	8000d00 <I2C_GetFlagStatus+0xe8>
	case EV7:
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if((I2Cx->SR1)& (I2C_SR1_RXNE))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <I2C_GetFlagStatus+0xe2>
		{
			BitStatus = SET;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}


		break;
 8000cf8:	e001      	b.n	8000cfe <I2C_GetFlagStatus+0xe6>
			BitStatus = RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	77fb      	strb	r3, [r7, #31]
		break;
 8000cfe:	bf00      	nop
	}
	}


	return BitStatus;
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	00070080 	.word	0x00070080

08000d10 <I2C_SendAddress>:
 *
 */


void I2C_SendAddress(I2C_Typedef* I2Cx, uint16_t Address, I2C_Direction direction)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <I2C_SendAddress+0x64>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	73fb      	strb	r3, [r7, #15]


	// Check if 7-bit address or 10-bit address
	if(Global_I2C_Config[index].I2C_Slave_Address.Addressing_Bits == I2C_ADDRESSING_7BIT)
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4911      	ldr	r1, [pc, #68]	; (8000d78 <I2C_SendAddress+0x68>)
 8000d34:	4613      	mov	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	3314      	adds	r3, #20
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d111      	bne.n	8000d6a <I2C_SendAddress+0x5a>
	{
		Address = (Address << 1);
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	807b      	strh	r3, [r7, #2]


		if(direction != I2C_Direction_Transmitter)
 8000d4c:	787b      	ldrb	r3, [r7, #1]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <I2C_SendAddress+0x4c>
		{
			Address |= 1<<0;
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	e003      	b.n	8000d64 <I2C_SendAddress+0x54>
		}else
		{
			// Reset address bit0 to write
			Address &= ~(1<<0);
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	807b      	strh	r3, [r7, #2]
		}

		// Send address
		I2Cx->DR = Address;
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	611a      	str	r2, [r3, #16]
	{
		// Not supported yet
	}


}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40005400 	.word	0x40005400
 8000d78:	2000001c 	.word	0x2000001c

08000d7c <I2C_Generate_STOP>:
 *
 */


void I2C_Generate_STOP(I2C_Typedef *I2Cx, FunctionalState NewState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
	// STOP: 9 in CR1

	if(NewState != DISABLE)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <I2C_Generate_STOP+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
	}else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000d9a:	e005      	b.n	8000da8 <I2C_Generate_STOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <I2C_AcknowledgeConfig>:
 *
 */


void I2C_AcknowledgeConfig(I2C_Typedef* I2Cx, FunctionalState NewState)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	70fb      	strb	r3, [r7, #3]

	if (NewState != DISABLE)
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the acknowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the acknowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000dd0:	e005      	b.n	8000dde <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <I2C1_EV_IRQHandler+0xec>)
 8000df4:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dfe:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e08:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00a      	beq.n	8000e30 <I2C1_EV_IRQHandler+0x48>
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d007      	beq.n	8000e30 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f000 f866 	bl	8000efc <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d014      	beq.n	8000e6a <I2C1_EV_IRQHandler+0x82>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d011      	beq.n	8000e6a <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10b      	bne.n	8000e6a <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000e62:	2102      	movs	r1, #2
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f000 f849 	bl	8000efc <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00f      	beq.n	8000e9a <I2C1_EV_IRQHandler+0xb2>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <I2C1_EV_IRQHandler+0xb2>
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d009      	beq.n	8000e9a <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000e92:	2103      	movs	r1, #3
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f000 f831 	bl	8000efc <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00f      	beq.n	8000eca <I2C1_EV_IRQHandler+0xe2>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00c      	beq.n	8000eca <I2C1_EV_IRQHandler+0xe2>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d009      	beq.n	8000eca <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d103      	bne.n	8000eca <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f000 f819 	bl	8000efc <Slave_States>

		}
	}

}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40005400 	.word	0x40005400

08000ed8 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <Slave_States+0xd8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d856      	bhi.n	8000fcc <Slave_States+0xd0>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <Slave_States+0x28>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f3f 	.word	0x08000f3f
 8000f28:	08000f39 	.word	0x08000f39
 8000f2c:	08000f63 	.word	0x08000f63
 8000f30:	08000f7b 	.word	0x08000f7b
 8000f34:	08000f9f 	.word	0x08000f9f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000f3c:	e046      	b.n	8000fcc <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d03b      	beq.n	8000fc2 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	4922      	ldr	r1, [pc, #136]	; (8000fd8 <Slave_States+0xdc>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	3320      	adds	r3, #32
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	4798      	blx	r3
		}

		break ;
 8000f60:	e02f      	b.n	8000fc2 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	491c      	ldr	r1, [pc, #112]	; (8000fd8 <Slave_States+0xdc>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3320      	adds	r3, #32
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2002      	movs	r0, #2
 8000f76:	4798      	blx	r3

		break ;
 8000f78:	e028      	b.n	8000fcc <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d01f      	beq.n	8000fc6 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	4913      	ldr	r1, [pc, #76]	; (8000fd8 <Slave_States+0xdc>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	3320      	adds	r3, #32
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2003      	movs	r0, #3
 8000f9a:	4798      	blx	r3
		}

		break ;
 8000f9c:	e013      	b.n	8000fc6 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10f      	bne.n	8000fca <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <Slave_States+0xdc>)
 8000fae:	4613      	mov	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3320      	adds	r3, #32
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	4798      	blx	r3
		}

		break ;
 8000fc0:	e003      	b.n	8000fca <Slave_States+0xce>
		break ;
 8000fc2:	bf00      	nop
 8000fc4:	e002      	b.n	8000fcc <Slave_States+0xd0>
		break ;
 8000fc6:	bf00      	nop
 8000fc8:	e000      	b.n	8000fcc <Slave_States+0xd0>
		break ;
 8000fca:	bf00      	nop
	}
	}

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	2000001c 	.word	0x2000001c

08000fdc <MCAL_RCC_GetSYSCLKFreq>:
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: not applicable

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MCAL_RCC_GetSYSCLKFreq+0x30>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d006      	beq.n	8000ffc <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d302      	bcc.n	8000ff8 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d004      	beq.n	8001000 <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000ff6:	e005      	b.n	8001004 <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000ffa:	e003      	b.n	8001004 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	case 1:
		// To do
		return HSE_RC_CLK;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000ffe:	e001      	b.n	8001004 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	case 2:
		// To do
		return 16000000;
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8001002:	e7ff      	b.n	8001004 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	}
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	007a1200 	.word	0x007a1200
 8001014:	00f42400 	.word	0x00f42400

08001018 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return ( MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[((RCC->CFGR >> 4) & 0xF)] );
 800101c:	f7ff ffde 	bl	8000fdc <MCAL_RCC_GetSYSCLKFreq>
 8001020:	4601      	mov	r1, r0
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <MCAL_RCC_GetHCLKFreq+0x20>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <MCAL_RCC_GetHCLKFreq+0x24>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	080011cc 	.word	0x080011cc

08001040 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)] );
 8001044:	f7ff ffe8 	bl	8001018 <MCAL_RCC_GetHCLKFreq>
 8001048:	4601      	mov	r1, r0
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8001056:	5cd3      	ldrb	r3, [r2, r3]
 8001058:	fa21 f303 	lsr.w	r3, r1, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	080011c4 	.word	0x080011c4

08001068 <SPI1_IRQHandler>:
 */



void SPI1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = (((SPI1->SR) & (1<<1)) >> 1);
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <SPI1_IRQHandler+0x54>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	085b      	lsrs	r3, r3, #1
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	f362 0300 	bfi	r3, r2, #0, #1
 8001080:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (((SPI1->SR) & (1<<0)) >> 0);
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <SPI1_IRQHandler+0x54>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	f362 0341 	bfi	r3, r2, #1, #1
 8001092:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (((SPI1->SR) & (1<<4)) >> 4);
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <SPI1_IRQHandler+0x54>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	793b      	ldrb	r3, [r7, #4]
 80010a2:	f362 0382 	bfi	r3, r2, #2, #1
 80010a6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SPI1_IRQHandler+0x58>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	7938      	ldrb	r0, [r7, #4]
 80010b0:	4798      	blx	r3
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40013000 	.word	0x40013000
 80010c0:	20000064 	.word	0x20000064

080010c4 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = (((SPI2->SR) & (1<<1)) >> 1);
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <SPI2_IRQHandler+0x54>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	793b      	ldrb	r3, [r7, #4]
 80010d8:	f362 0300 	bfi	r3, r2, #0, #1
 80010dc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (((SPI2->SR) & (1<<0)) >> 0);
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <SPI2_IRQHandler+0x54>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	793b      	ldrb	r3, [r7, #4]
 80010ea:	f362 0341 	bfi	r3, r2, #1, #1
 80010ee:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (((SPI2->SR) & (1<<4)) >> 4);
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <SPI2_IRQHandler+0x54>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	f362 0382 	bfi	r3, r2, #2, #1
 8001102:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SPI2_IRQHandler+0x58>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	7938      	ldrb	r0, [r7, #4]
 800110c:	4798      	blx	r3
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40003800 	.word	0x40003800
 800111c:	20000064 	.word	0x20000064

08001120 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <USART1_IRQHandler+0x10>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4798      	blx	r3
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000006c 	.word	0x2000006c

08001134 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <USART2_IRQHandler+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4798      	blx	r3
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000006c 	.word	0x2000006c

08001148 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <USART3_IRQHandler+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	4798      	blx	r3
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000006c 	.word	0x2000006c

0800115c <__libc_init_array>:
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	2500      	movs	r5, #0
 8001160:	4e0c      	ldr	r6, [pc, #48]	; (8001194 <__libc_init_array+0x38>)
 8001162:	4c0d      	ldr	r4, [pc, #52]	; (8001198 <__libc_init_array+0x3c>)
 8001164:	1ba4      	subs	r4, r4, r6
 8001166:	10a4      	asrs	r4, r4, #2
 8001168:	42a5      	cmp	r5, r4
 800116a:	d109      	bne.n	8001180 <__libc_init_array+0x24>
 800116c:	f000 f81a 	bl	80011a4 <_init>
 8001170:	2500      	movs	r5, #0
 8001172:	4e0a      	ldr	r6, [pc, #40]	; (800119c <__libc_init_array+0x40>)
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <__libc_init_array+0x44>)
 8001176:	1ba4      	subs	r4, r4, r6
 8001178:	10a4      	asrs	r4, r4, #2
 800117a:	42a5      	cmp	r5, r4
 800117c:	d105      	bne.n	800118a <__libc_init_array+0x2e>
 800117e:	bd70      	pop	{r4, r5, r6, pc}
 8001180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001184:	4798      	blx	r3
 8001186:	3501      	adds	r5, #1
 8001188:	e7ee      	b.n	8001168 <__libc_init_array+0xc>
 800118a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800118e:	4798      	blx	r3
 8001190:	3501      	adds	r5, #1
 8001192:	e7f2      	b.n	800117a <__libc_init_array+0x1e>
 8001194:	080011dc 	.word	0x080011dc
 8001198:	080011dc 	.word	0x080011dc
 800119c:	080011dc 	.word	0x080011dc
 80011a0:	080011e0 	.word	0x080011e0

080011a4 <_init>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	bf00      	nop
 80011a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011aa:	bc08      	pop	{r3}
 80011ac:	469e      	mov	lr, r3
 80011ae:	4770      	bx	lr

080011b0 <_fini>:
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b2:	bf00      	nop
 80011b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b6:	bc08      	pop	{r3}
 80011b8:	469e      	mov	lr, r3
 80011ba:	4770      	bx	lr
