
SPI_Slave_Atmega33.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003856  000038ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080012a  0080012a  000039b4  2**0
                  ALLOC
  3 .debug_aranges 000003e8  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000071e  00000000  00000000  00003d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003733  00000000  00000000  000044ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001931  00000000  00000000  00007bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002da2  00000000  00000000  0000951e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  0000c2c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d4b  00000000  00000000  0000c850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000d59b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0000de29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_1>
       8:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_2>
       c:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 1b 	call	0x3698	; 0x3698 <main>
      8a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 16 1c 	jmp	0x382c	; 0x382c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_Init>:
// 		Initialization
// ==============================================


void UART_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	u8  UCSRC_var=0;
     caa:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_var=0;
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	19 82       	std	Y+1, r1	; 0x01

#if (SPEED_MODE==NORMAL_SPEED)
	CLR_BIT(UCSRA,U2X);
     cb0:	ab e2       	ldi	r26, 0x2B	; 43
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	eb e2       	ldi	r30, 0x2B	; 43
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	8c 93       	st	X, r24
#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
#endif

	// Set URSEL to write data to UCSRC register
	SET_BIT(UCSRC_var,URSEL);
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	80 68       	ori	r24, 0x80	; 128
     cc2:	8b 83       	std	Y+3, r24	; 0x03


#if (SYNCH_MODE==SYNCH)
	SET_BIT(UCSRC_var,UMSEL)
#elif (SYNCH_MODE==ASYNCH)
	CLR_BIT(UCSRC_var,UMSEL);
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	8f 7b       	andi	r24, 0xBF	; 191
     cc8:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if (PARITY_MODE==NO_PARITY)
	CLR_BIT(UCSRC_var,UPM0);
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRC_var,UPM1);
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	8f 7d       	andi	r24, 0xDF	; 223
     cd4:	8b 83       	std	Y+3, r24	; 0x03
#elif (N_DATA_BITS==_7_DATA_BITS)
	CLR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLR_BIT(UCSRB,UCSZ2);
#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSZ2);
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8b 7f       	andi	r24, 0xFB	; 251
     cee:	8c 93       	st	X, r24
	SET_BIT(UCSRC_var,UCSZ1);
	SET_BIT(UCSRB,UCSZ2);
#endif

#if (N_STOP_BITS==ONE_STOP_BIT)
	CLR_BIT(UCSRC_var,USBS);
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	87 7f       	andi	r24, 0xF7	; 247
     cf4:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,USBS);
#endif


	// Set UCSRC value
	UCSRC=UCSRC_var;
     cf6:	e0 e4       	ldi	r30, 0x40	; 64
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	80 83       	st	Z, r24


	// Baud rate
	UBRR_var = BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
     cfe:	80 91 e5 00 	lds	r24, 0x00E5
     d02:	90 91 e6 00 	lds	r25, 0x00E6
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(UBRR_var>>8);
     d0a:	e0 e4       	ldi	r30, 0x40	; 64
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	89 2f       	mov	r24, r25
     d14:	99 27       	eor	r25, r25
     d16:	80 83       	st	Z, r24
	UBRRL = (u8)UBRR_var;
     d18:	e9 e2       	ldi	r30, 0x29	; 41
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	80 83       	st	Z, r24


	// Enabling UART
	//enable UART  receiver
	SET_BIT(UCSRB,RXEN);
     d20:	aa e2       	ldi	r26, 0x2A	; 42
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 61       	ori	r24, 0x10	; 16
     d2c:	8c 93       	st	X, r24
	//enable UART  transmitter
	SET_BIT(UCSRB,TXEN);
     d2e:	aa e2       	ldi	r26, 0x2A	; 42
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e2       	ldi	r30, 0x2A	; 42
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	8c 93       	st	X, r24

}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <UART_SendByteNoBlock>:
// ========================================================



void UART_SendByteNoBlock(u8 data)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     d54:	ec e2       	ldi	r30, 0x2C	; 44
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	80 83       	st	Z, r24
}
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <UART_ReceiveByteNoBlock>:

u8 UART_ReceiveByteNoBlock(void)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
    return UDR;
     d6c:	ec e2       	ldi	r30, 0x2C	; 44
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <UART_Send_Char>:
// ========================================================
// 			Busy Wait Functions
// ========================================================

void UART_Send_Char(u8 data)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the buffer is empty and ready for transmitting
		a new byte so wait until this flag is set to one and it will cleared by
		hardware when u write new data to buffer */
	// Busy wait
	while(!GET_BIT(UCSRA,UDRE));
     d84:	eb e2       	ldi	r30, 0x2B	; 43
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	82 95       	swap	r24
     d8c:	86 95       	lsr	r24
     d8e:	87 70       	andi	r24, 0x07	; 7
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	81 70       	andi	r24, 0x01	; 1
     d96:	90 70       	andi	r25, 0x00	; 0
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	a1 f3       	breq	.-24     	; 0xd84 <UART_Send_Char+0xc>
	UDR = data;
     d9c:	ec e2       	ldi	r30, 0x2C	; 44
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	80 83       	st	Z, r24
}
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <UART_Receive_Char>:


u8 UART_Receive_Char(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receives data so wait until this flag
		is set to one and it will be cleared by hardware when u read data  */
	// The CPU is stucking here
	while(!GET_BIT(UCSRA,RXC));
     db4:	eb e2       	ldi	r30, 0x2B	; 43
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	dc f7       	brge	.-10     	; 0xdb4 <UART_Receive_Char+0x8>
	return UDR;
     dbe:	ec e2       	ldi	r30, 0x2C	; 44
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <UART_Send_String>:


void UART_Send_String(char* string)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <UART_Send_String+0x6>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9b 83       	std	Y+3, r25	; 0x03
     dd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <UART_Send_String+0x30>
	while(string[i] != '\0'){
		UART_Send_Char(string[i]);
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	80 81       	ld	r24, Z
     df0:	0e 94 bc 06 	call	0xd78	; 0xd78 <UART_Send_Char>
		i++;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	89 83       	std	Y+1, r24	; 0x01


void UART_Send_String(char* string)
{
	u8 i=0;
	while(string[i] != '\0'){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	fc 01       	movw	r30, r24
     e06:	e2 0f       	add	r30, r18
     e08:	f3 1f       	adc	r31, r19
     e0a:	80 81       	ld	r24, Z
     e0c:	88 23       	and	r24, r24
     e0e:	39 f7       	brne	.-50     	; 0xdde <UART_Send_String+0x14>
		UART_Send_Char(string[i]);
		i++;
	}
	// Send (Enter) as a terminating char
	UART_Send_Char(DefaultStop);
     e10:	8d e0       	ldi	r24, 0x0D	; 13
     e12:	0e 94 bc 06 	call	0xd78	; 0xd78 <UART_Send_Char>
}
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <UART_Receive_String>:


void UART_Receive_String(char *Buffer)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <UART_Receive_String+0xa>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <UART_Receive_String+0xc>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	9c 83       	std	Y+4, r25	; 0x04
     e34:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
     e36:	1a 82       	std	Y+2, r1	; 0x02
     e38:	19 82       	std	Y+1, r1	; 0x01

    Buffer[i] = UART_Receive_Char();
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	8c 01       	movw	r16, r24
     e44:	02 0f       	add	r16, r18
     e46:	13 1f       	adc	r17, r19
     e48:	0e 94 d6 06 	call	0xdac	; 0xdac <UART_Receive_Char>
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 83       	st	Z, r24
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <UART_Receive_String+0x50>
    while (Buffer[i] != DefaultStop) {
        i++;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
        Buffer[i] = UART_Receive_Char();
     e5c:	29 81       	ldd	r18, Y+1	; 0x01
     e5e:	3a 81       	ldd	r19, Y+2	; 0x02
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	8c 01       	movw	r16, r24
     e66:	02 0f       	add	r16, r18
     e68:	13 1f       	adc	r17, r19
     e6a:	0e 94 d6 06 	call	0xdac	; 0xdac <UART_Receive_Char>
     e6e:	f8 01       	movw	r30, r16
     e70:	80 83       	st	Z, r24
void UART_Receive_String(char *Buffer)
{
    int i = 0;

    Buffer[i] = UART_Receive_Char();
    while (Buffer[i] != DefaultStop) {
     e72:	29 81       	ldd	r18, Y+1	; 0x01
     e74:	3a 81       	ldd	r19, Y+2	; 0x02
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	fc 01       	movw	r30, r24
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	80 81       	ld	r24, Z
     e82:	8d 30       	cpi	r24, 0x0D	; 13
     e84:	31 f7       	brne	.-52     	; 0xe52 <UART_Receive_String+0x30>
        i++;
        Buffer[i] = UART_Receive_Char();

    }

    Buffer[i] = '\0'; // Null-terminate the string
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	f9 01       	movw	r30, r18
     e90:	e8 0f       	add	r30, r24
     e92:	f9 1f       	adc	r31, r25
     e94:	10 82       	st	Z, r1
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <UART_RX_InterruptEnable>:
// ==============================================


// Receive complete
void UART_RX_InterruptEnable(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
     eb0:	aa e2       	ldi	r26, 0x2A	; 42
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e2       	ldi	r30, 0x2A	; 42
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 68       	ori	r24, 0x80	; 128
     ebc:	8c 93       	st	X, r24
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <UART_TX_InterruptEnable>:

// Transmission complete
void UART_TX_InterruptEnable(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
     ecc:	aa e2       	ldi	r26, 0x2A	; 42
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ea e2       	ldi	r30, 0x2A	; 42
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 64       	ori	r24, 0x40	; 64
     ed8:	8c 93       	st	X, r24
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <UART_RX_InterruptDisable>:


// Receive complete
void UART_RX_InterruptDisable(void)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
     ee8:	aa e2       	ldi	r26, 0x2A	; 42
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ea e2       	ldi	r30, 0x2A	; 42
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 77       	andi	r24, 0x7F	; 127
     ef4:	8c 93       	st	X, r24
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <UART_TX_InterruptDisable>:

// Transmission complete
void UART_TX_InterruptDisable(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,TXCIE);
     f04:	aa e2       	ldi	r26, 0x2A	; 42
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e2       	ldi	r30, 0x2A	; 42
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 7b       	andi	r24, 0xBF	; 191
     f10:	8c 93       	st	X, r24
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <UART_RX_SetCallBack>:
// 		Call Back functions
// ==============================================


void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <UART_RX_SetCallBack+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	90 93 30 01 	sts	0x0130, r25
     f2e:	80 93 2f 01 	sts	0x012F, r24
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <UART_TX_SetCallBack+0x6>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	90 93 32 01 	sts	0x0132, r25
     f52:	80 93 31 01 	sts	0x0131, r24
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <__vector_15>:
// 		ISR
// ==============================================


ISR(USART_TXC_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_Fptr!=NULLPTR)
     f8a:	80 91 31 01 	lds	r24, 0x0131
     f8e:	90 91 32 01 	lds	r25, 0x0132
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_15+0x40>
	{
		UART_TX_Fptr();
     f96:	e0 91 31 01 	lds	r30, 0x0131
     f9a:	f0 91 32 01 	lds	r31, 0x0132
     f9e:	09 95       	icall
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_13>:


ISR(USART_RXC_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if(UART_RX_Fptr!=NULLPTR)
     ff0:	80 91 2f 01 	lds	r24, 0x012F
     ff4:	90 91 30 01 	lds	r25, 0x0130
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_13+0x40>
	{
		UART_RX_Fptr();
     ffc:	e0 91 2f 01 	lds	r30, 0x012F
    1000:	f0 91 30 01 	lds	r31, 0x0130
    1004:	09 95       	icall
	}
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <UART_Receive_NoBlock>:


u8 UART_Receive_NoBlock(u8 *pdata)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <UART_Receive_NoBlock+0x6>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9b 83       	std	Y+3, r25	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0;
    103c:	19 82       	std	Y+1, r1	; 0x01
	// Check if any data is received and store it in the passed buffer
	if(GET_BIT(UCSRA,RXC))
    103e:	eb e2       	ldi	r30, 0x2B	; 43
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	4c f4       	brge	.+18     	; 0x105a <UART_Receive_NoBlock+0x2e>
	{
		*pdata = UDR;
    1048:	ec e2       	ldi	r30, 0x2C	; 44
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	ea 81       	ldd	r30, Y+2	; 0x02
    1050:	fb 81       	ldd	r31, Y+3	; 0x03
    1052:	80 83       	st	Z, r24
		status=1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	01 c0       	rjmp	.+2      	; 0x105c <UART_Receive_NoBlock+0x30>
	}else{
		status = 0;
    105a:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <UART_SendString_ASYNCH>:
// 		Asynchronous functions
// ==============================================


void UART_SendString_ASYNCH(u8 *str)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <UART_SendString_ASYNCH+0x6>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str = str;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	90 93 2c 01 	sts	0x012C, r25
    1080:	80 93 2b 01 	sts	0x012B, r24
	UART_Send_Char(str[0]);
    1084:	e9 81       	ldd	r30, Y+1	; 0x01
    1086:	fa 81       	ldd	r31, Y+2	; 0x02
    1088:	80 81       	ld	r24, Z
    108a:	0e 94 bc 06 	call	0xd78	; 0xd78 <UART_Send_Char>

	UART_TX_SetCallBack(Func_TX);
    108e:	82 e5       	ldi	r24, 0x52	; 82
    1090:	98 e0       	ldi	r25, 0x08	; 8
    1092:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_TX_SetCallBack>
	UART_TX_InterruptEnable();
    1096:	0e 94 62 07 	call	0xec4	; 0xec4 <UART_TX_InterruptEnable>
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <Func_TX>:


static void Func_TX(void)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	static u8 i=1;
	if(Asynch_Send_Str[i] != '\0')
    10ac:	20 91 2b 01 	lds	r18, 0x012B
    10b0:	30 91 2c 01 	lds	r19, 0x012C
    10b4:	80 91 68 00 	lds	r24, 0x0068
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	e8 0f       	add	r30, r24
    10c0:	f9 1f       	adc	r31, r25
    10c2:	80 81       	ld	r24, Z
    10c4:	88 23       	and	r24, r24
    10c6:	a1 f0       	breq	.+40     	; 0x10f0 <Func_TX+0x4c>
	{
		UART_SendByteNoBlock(Asynch_Send_Str[i]);
    10c8:	20 91 2b 01 	lds	r18, 0x012B
    10cc:	30 91 2c 01 	lds	r19, 0x012C
    10d0:	80 91 68 00 	lds	r24, 0x0068
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	f9 01       	movw	r30, r18
    10da:	e8 0f       	add	r30, r24
    10dc:	f9 1f       	adc	r31, r25
    10de:	80 81       	ld	r24, Z
    10e0:	0e 94 a4 06 	call	0xd48	; 0xd48 <UART_SendByteNoBlock>
		i++;
    10e4:	80 91 68 00 	lds	r24, 0x0068
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	80 93 68 00 	sts	0x0068, r24
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <Func_TX+0x56>
	}else{
		i=1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 68 00 	sts	0x0068, r24
		UART_TX_InterruptDisable();
    10f6:	0e 94 7e 07 	call	0xefc	; 0xefc <UART_TX_InterruptDisable>
	}
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <UART_ReceiveString_ASYNCH>:

// -----------------------------------------------

void UART_ReceiveString_ASYNCH(u8* str)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <UART_ReceiveString_ASYNCH+0x6>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
	Asynch_receive_str = str;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	90 93 2e 01 	sts	0x012E, r25
    1116:	80 93 2d 01 	sts	0x012D, r24
	UART_RX_InterruptEnable();
    111a:	0e 94 54 07 	call	0xea8	; 0xea8 <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(Receive_Int_Function);
    111e:	88 e9       	ldi	r24, 0x98	; 152
    1120:	98 e0       	ldi	r25, 0x08	; 8
    1122:	0e 94 8c 07 	call	0xf18	; 0xf18 <UART_RX_SetCallBack>
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <Receive_Int_Function>:



static void Receive_Int_Function(void)
{
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	Asynch_receive_str[i] = UART_ReceiveByteNoBlock();
    113c:	20 91 2d 01 	lds	r18, 0x012D
    1140:	30 91 2e 01 	lds	r19, 0x012E
    1144:	80 91 2a 01 	lds	r24, 0x012A
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	89 01       	movw	r16, r18
    114e:	08 0f       	add	r16, r24
    1150:	19 1f       	adc	r17, r25
    1152:	0e 94 b2 06 	call	0xd64	; 0xd64 <UART_ReceiveByteNoBlock>
    1156:	f8 01       	movw	r30, r16
    1158:	80 83       	st	Z, r24
	i++;
    115a:	80 91 2a 01 	lds	r24, 0x012A
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 93 2a 01 	sts	0x012A, r24
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <Timer0_Init>:
#define NULLPTR   ((void*)0)

static void (*Timer0_OVF_Fptr)(void) = NULLPTR;

void Timer0_Init(Timer0Mode_type Mode, Timer0_Prescalar Prescalar,OC0Mode_type Oc0_Mode)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	27 97       	sbiw	r28, 0x07	; 7
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
    1186:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3f 83       	std	Y+7, r19	; 0x07
    1190:	2e 83       	std	Y+6, r18	; 0x06
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	21 f1       	breq	.+72     	; 0x11e4 <Timer0_Init+0x76>
    119c:	2e 81       	ldd	r18, Y+6	; 0x06
    119e:	3f 81       	ldd	r19, Y+7	; 0x07
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <Timer0_Init+0x42>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <Timer0_Init+0x58>
    11ae:	46 c0       	rjmp	.+140    	; 0x123c <Timer0_Init+0xce>
    11b0:	2e 81       	ldd	r18, Y+6	; 0x06
    11b2:	3f 81       	ldd	r19, Y+7	; 0x07
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	21 f1       	breq	.+72     	; 0x1202 <Timer0_Init+0x94>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <Timer0_Init+0xb2>
    11c4:	3b c0       	rjmp	.+118    	; 0x123c <Timer0_Init+0xce>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 7b       	andi	r24, 0xBF	; 191
    11d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	87 7f       	andi	r24, 0xF7	; 247
    11e0:	8c 93       	st	X, r24
    11e2:	2c c0       	rjmp	.+88     	; 0x123c <Timer0_Init+0xce>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    11e4:	a3 e5       	ldi	r26, 0x53	; 83
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e3 e5       	ldi	r30, 0x53	; 83
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	87 7f       	andi	r24, 0xF7	; 247
    11fe:	8c 93       	st	X, r24
    1200:	1d c0       	rjmp	.+58     	; 0x123c <Timer0_Init+0xce>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
    1202:	a3 e5       	ldi	r26, 0x53	; 83
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e3 e5       	ldi	r30, 0x53	; 83
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8f 7b       	andi	r24, 0xBF	; 191
    120e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1210:	a3 e5       	ldi	r26, 0x53	; 83
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e3 e5       	ldi	r30, 0x53	; 83
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 60       	ori	r24, 0x08	; 8
    121c:	8c 93       	st	X, r24
    121e:	0e c0       	rjmp	.+28     	; 0x123c <Timer0_Init+0xce>
		break;
	case TIMER0_FAST_PWM_MODE:
		SET_BIT(TCCR0,WGM00);
    1220:	a3 e5       	ldi	r26, 0x53	; 83
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e3 e5       	ldi	r30, 0x53	; 83
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 64       	ori	r24, 0x40	; 64
    122c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    122e:	a3 e5       	ldi	r26, 0x53	; 83
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	88 60       	ori	r24, 0x08	; 8
    123a:	8c 93       	st	X, r24
		break;
	}

	// To make sure the first three pins are zero
	// in case of old data written
	TCCR0 = TCCR0 & 0xf8;   // 11111000
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 7f       	andi	r24, 0xF8	; 248
    1248:	8c 93       	st	X, r24
	TCCR0 = TCCR0 | Prescalar;
    124a:	a3 e5       	ldi	r26, 0x53	; 83
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e5       	ldi	r30, 0x53	; 83
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	89 2b       	or	r24, r25
    1258:	8c 93       	st	X, r24


	// Hardware pin from OCU (Output compare unit) to output something
	// when there is matching between OCR and TCNT

	switch(Oc0_Mode)
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3d 83       	std	Y+5, r19	; 0x05
    1262:	2c 83       	std	Y+4, r18	; 0x04
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	21 f1       	breq	.+72     	; 0x12b6 <Timer0_Init+0x148>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <Timer0_Init+0x114>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <Timer0_Init+0x12a>
    1280:	46 c0       	rjmp	.+140    	; 0x130e <Timer0_Init+0x1a0>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	21 f1       	breq	.+72     	; 0x12d4 <Timer0_Init+0x166>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	71 f1       	breq	.+92     	; 0x12f2 <Timer0_Init+0x184>
    1296:	3b c0       	rjmp	.+118    	; 0x130e <Timer0_Init+0x1a0>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7e       	andi	r24, 0xEF	; 239
    12a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    12a6:	a3 e5       	ldi	r26, 0x53	; 83
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e3 e5       	ldi	r30, 0x53	; 83
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7d       	andi	r24, 0xDF	; 223
    12b2:	8c 93       	st	X, r24
    12b4:	2c c0       	rjmp	.+88     	; 0x130e <Timer0_Init+0x1a0>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0,COM00);
    12b6:	a3 e5       	ldi	r26, 0x53	; 83
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e3 e5       	ldi	r30, 0x53	; 83
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    12c4:	a3 e5       	ldi	r26, 0x53	; 83
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e3 e5       	ldi	r30, 0x53	; 83
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7d       	andi	r24, 0xDF	; 223
    12d0:	8c 93       	st	X, r24
    12d2:	1d c0       	rjmp	.+58     	; 0x130e <Timer0_Init+0x1a0>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
    12d4:	a3 e5       	ldi	r26, 0x53	; 83
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e3 e5       	ldi	r30, 0x53	; 83
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 7e       	andi	r24, 0xEF	; 239
    12e0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    12e2:	a3 e5       	ldi	r26, 0x53	; 83
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e3 e5       	ldi	r30, 0x53	; 83
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	8c 93       	st	X, r24
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <Timer0_Init+0x1a0>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0,COM00);
    12f2:	a3 e5       	ldi	r26, 0x53	; 83
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e3 e5       	ldi	r30, 0x53	; 83
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 61       	ori	r24, 0x10	; 16
    12fe:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1300:	a3 e5       	ldi	r26, 0x53	; 83
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e3 e5       	ldi	r30, 0x53	; 83
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 62       	ori	r24, 0x20	; 32
    130c:	8c 93       	st	X, r24
		break;
	}


}
    130e:	27 96       	adiw	r28, 0x07	; 7
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <Timer0_OVInterrupt_Enable>:

// Separately, in case you want to run the timer
// without interrupt
void Timer0_OVInterrupt_Enable(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1328:	a9 e5       	ldi	r26, 0x59	; 89
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e5       	ldi	r30, 0x59	; 89
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	81 60       	ori	r24, 0x01	; 1
    1334:	8c 93       	st	X, r24
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    1344:	a9 e5       	ldi	r26, 0x59	; 89
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e9 e5       	ldi	r30, 0x59	; 89
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8e 7f       	andi	r24, 0xFE	; 254
    1350:	8c 93       	st	X, r24
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <Timer0_OVF_SetCallBack>:

void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <Timer0_OVF_SetCallBack+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	90 93 34 01 	sts	0x0134, r25
    136e:	80 93 33 01 	sts	0x0133, r24
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <__vector_11>:


// used in delay
ISR(TIMER0_OVF_vect)
{
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	6f 93       	push	r22
    1390:	7f 93       	push	r23
    1392:	8f 93       	push	r24
    1394:	9f 93       	push	r25
    1396:	af 93       	push	r26
    1398:	bf 93       	push	r27
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULLPTR)
    13a6:	80 91 33 01 	lds	r24, 0x0133
    13aa:	90 91 34 01 	lds	r25, 0x0134
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	29 f0       	breq	.+10     	; 0x13bc <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    13b2:	e0 91 33 01 	lds	r30, 0x0133
    13b6:	f0 91 34 01 	lds	r31, 0x0134
    13ba:	09 95       	icall
	}
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <SPI_Master_Init>:
#include "SPI.h"



void SPI_Master_Init(void)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(SPI_REG, SCK, OUTPUT);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	67 e0       	ldi	r22, 0x07	; 7
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(SPI_REG, MOSI, OUTPUT);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	65 e0       	ldi	r22, 0x05	; 5
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(SPI_REG, SS, OUTPUT);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	64 e0       	ldi	r22, 0x04	; 4
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>


	// Set MISO pin as INPUT
	DIO_ES_tSetPinDirection(SPI_REG, MISO, INPUT);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	66 e0       	ldi	r22, 0x06	; 6
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>


//	DIO_ES_tSetPinValue(SPI_REG, SS, LOW);

	// Enable SPI
	SET_BIT(SPCR,SPE);
    1412:	ad e2       	ldi	r26, 0x2D	; 45
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ed e2       	ldi	r30, 0x2D	; 45
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 64       	ori	r24, 0x40	; 64
    141e:	8c 93       	st	X, r24
	// Work as a master
	SET_BIT(SPCR,MSTR);
    1420:	ad e2       	ldi	r26, 0x2D	; 45
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ed e2       	ldi	r30, 0x2D	; 45
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 61       	ori	r24, 0x10	; 16
    142c:	8c 93       	st	X, r24
	// SPI clock rate : fck / 16
	SET_BIT(SPCR,SPR0);
    142e:	ad e2       	ldi	r26, 0x2D	; 45
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ed e2       	ldi	r30, 0x2D	; 45
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	81 60       	ori	r24, 0x01	; 1
    143a:	8c 93       	st	X, r24
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <SPI_Slave_Init>:



void SPI_Slave_Init(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(SPI_REG, MISO, OUTPUT);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	66 e0       	ldi	r22, 0x06	; 6
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>
	// Set SCK, MOSI, and SS pins as INPUT (slave mode doesn't need them as output)
	DIO_ES_tSetPinDirection(SPI_REG, SCK, INPUT);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	67 e0       	ldi	r22, 0x07	; 7
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(SPI_REG, MOSI, INPUT);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	65 e0       	ldi	r22, 0x05	; 5
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(SPI_REG, SS, INPUT);
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	0e 94 be 0c 	call	0x197c	; 0x197c <DIO_ES_tSetPinDirection>


	// Enable SPI
	SET_BIT(SPCR,SPE);
    1472:	ad e2       	ldi	r26, 0x2D	; 45
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ed e2       	ldi	r30, 0x2D	; 45
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 64       	ori	r24, 0x40	; 64
    147e:	8c 93       	st	X, r24

	CLR_BIT(SPCR,MSTR);
    1480:	ad e2       	ldi	r26, 0x2D	; 45
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ed e2       	ldi	r30, 0x2D	; 45
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8f 7e       	andi	r24, 0xEF	; 239
    148c:	8c 93       	st	X, r24
}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <SPI_Master_Transmit_Receive>:



u8 SPI_Master_Transmit_Receive(u8 data)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    14a0:	ef e2       	ldi	r30, 0x2F	; 47
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    14a8:	ee e2       	ldi	r30, 0x2E	; 46
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	88 23       	and	r24, r24
    14b0:	dc f7       	brge	.-10     	; 0x14a8 <SPI_Master_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
    14b2:	ef e2       	ldi	r30, 0x2F	; 47
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <SPI_Slave_Transmit_Receive>:



u8 SPI_Slave_Transmit_Receive(u8 data)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    14cc:	ef e2       	ldi	r30, 0x2F	; 47
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    14d4:	ee e2       	ldi	r30, 0x2E	; 46
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 23       	and	r24, r24
    14dc:	dc f7       	brge	.-10     	; 0x14d4 <SPI_Slave_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
    14de:	ef e2       	ldi	r30, 0x2F	; 47
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
}
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <EXI_Set_CallBack+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <EXI_Set_CallBack+0x8>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	7b 83       	std	Y+3, r23	; 0x03
    14fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3d 83       	std	Y+5, r19	; 0x05
    1508:	2c 83       	std	Y+4, r18	; 0x04
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	81 f0       	breq	.+32     	; 0x1534 <EXI_Set_CallBack+0x48>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	91 f0       	breq	.+36     	; 0x1542 <EXI_Set_CallBack+0x56>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	a1 f4       	brne	.+40     	; 0x154e <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	90 93 36 01 	sts	0x0136, r25
    152e:	80 93 35 01 	sts	0x0135, r24
    1532:	0d c0       	rjmp	.+26     	; 0x154e <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	90 93 38 01 	sts	0x0138, r25
    153c:	80 93 37 01 	sts	0x0137, r24
    1540:	06 c0       	rjmp	.+12     	; 0x154e <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	90 93 3a 01 	sts	0x013A, r25
    154a:	80 93 39 01 	sts	0x0139, r24
		break;
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <EXI_ENABLE+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3b 83       	std	Y+3, r19	; 0x03
    1574:	2a 83       	std	Y+2, r18	; 0x02
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	89 f0       	breq	.+34     	; 0x15a2 <EXI_ENABLE+0x44>
    1580:	2a 81       	ldd	r18, Y+2	; 0x02
    1582:	3b 81       	ldd	r19, Y+3	; 0x03
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	a1 f0       	breq	.+40     	; 0x15b2 <EXI_ENABLE+0x54>
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	b9 f4       	brne	.+46     	; 0x15c0 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1592:	ab e5       	ldi	r26, 0x5B	; 91
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e5       	ldi	r30, 0x5B	; 91
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	80 64       	ori	r24, 0x40	; 64
    159e:	8c 93       	st	X, r24
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    15a2:	ab e5       	ldi	r26, 0x5B	; 91
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e5       	ldi	r30, 0x5B	; 91
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 68       	ori	r24, 0x80	; 128
    15ae:	8c 93       	st	X, r24
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    15b2:	ab e5       	ldi	r26, 0x5B	; 91
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e5       	ldi	r30, 0x5B	; 91
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 62       	ori	r24, 0x20	; 32
    15be:	8c 93       	st	X, r24
		break;
	}
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <EXI_DISABLE+0x6>
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3b 83       	std	Y+3, r19	; 0x03
    15e2:	2a 83       	std	Y+2, r18	; 0x02
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	89 f0       	breq	.+34     	; 0x1610 <EXI_DISABLE+0x44>
    15ee:	2a 81       	ldd	r18, Y+2	; 0x02
    15f0:	3b 81       	ldd	r19, Y+3	; 0x03
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	a1 f0       	breq	.+40     	; 0x1620 <EXI_DISABLE+0x54>
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	b9 f4       	brne	.+46     	; 0x162e <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    1600:	ab e5       	ldi	r26, 0x5B	; 91
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	eb e5       	ldi	r30, 0x5B	; 91
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8f 7b       	andi	r24, 0xBF	; 191
    160c:	8c 93       	st	X, r24
    160e:	0f c0       	rjmp	.+30     	; 0x162e <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    1610:	ab e5       	ldi	r26, 0x5B	; 91
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e5       	ldi	r30, 0x5B	; 91
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 77       	andi	r24, 0x7F	; 127
    161c:	8c 93       	st	X, r24
    161e:	07 c0       	rjmp	.+14     	; 0x162e <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8f 7d       	andi	r24, 0xDF	; 223
    162c:	8c 93       	st	X, r24
		break;
	}
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	2a 97       	sbiw	r28, 0x0a	; 10
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3a 87       	std	Y+10, r19	; 0x0a
    165a:	29 87       	std	Y+9, r18	; 0x09
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <EXI_TriggerEdge+0x2e>
    1666:	66 c0       	rjmp	.+204    	; 0x1734 <EXI_TriggerEdge+0xfa>
    1668:	29 85       	ldd	r18, Y+9	; 0x09
    166a:	3a 85       	ldd	r19, Y+10	; 0x0a
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <EXI_TriggerEdge+0x3a>
    1672:	bb c0       	rjmp	.+374    	; 0x17ea <EXI_TriggerEdge+0x1b0>
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	09 f0       	breq	.+2      	; 0x167e <EXI_TriggerEdge+0x44>
    167c:	dd c0       	rjmp	.+442    	; 0x1838 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	38 87       	std	Y+8, r19	; 0x08
    1686:	2f 83       	std	Y+7, r18	; 0x07
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	21 f1       	breq	.+72     	; 0x16da <EXI_TriggerEdge+0xa0>
    1692:	2f 81       	ldd	r18, Y+7	; 0x07
    1694:	38 85       	ldd	r19, Y+8	; 0x08
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	2c f4       	brge	.+10     	; 0x16a6 <EXI_TriggerEdge+0x6c>
    169c:	8f 81       	ldd	r24, Y+7	; 0x07
    169e:	98 85       	ldd	r25, Y+8	; 0x08
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	61 f0       	breq	.+24     	; 0x16bc <EXI_TriggerEdge+0x82>
    16a4:	c9 c0       	rjmp	.+402    	; 0x1838 <EXI_TriggerEdge+0x1fe>
    16a6:	2f 81       	ldd	r18, Y+7	; 0x07
    16a8:	38 85       	ldd	r19, Y+8	; 0x08
    16aa:	22 30       	cpi	r18, 0x02	; 2
    16ac:	31 05       	cpc	r19, r1
    16ae:	21 f1       	breq	.+72     	; 0x16f8 <EXI_TriggerEdge+0xbe>
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	98 85       	ldd	r25, Y+8	; 0x08
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	71 f1       	breq	.+92     	; 0x1716 <EXI_TriggerEdge+0xdc>
    16ba:	be c0       	rjmp	.+380    	; 0x1838 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8e 7f       	andi	r24, 0xFE	; 254
    16c8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    16ca:	a5 e5       	ldi	r26, 0x55	; 85
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e5       	ldi	r30, 0x55	; 85
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8d 7f       	andi	r24, 0xFD	; 253
    16d6:	8c 93       	st	X, r24
    16d8:	af c0       	rjmp	.+350    	; 0x1838 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    16da:	a5 e5       	ldi	r26, 0x55	; 85
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e5       	ldi	r30, 0x55	; 85
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	81 60       	ori	r24, 0x01	; 1
    16e6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    16e8:	a5 e5       	ldi	r26, 0x55	; 85
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e5       	ldi	r30, 0x55	; 85
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8d 7f       	andi	r24, 0xFD	; 253
    16f4:	8c 93       	st	X, r24
    16f6:	a0 c0       	rjmp	.+320    	; 0x1838 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    16f8:	a5 e5       	ldi	r26, 0x55	; 85
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e5       	ldi	r30, 0x55	; 85
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	8e 7f       	andi	r24, 0xFE	; 254
    1704:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1706:	a5 e5       	ldi	r26, 0x55	; 85
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e5       	ldi	r30, 0x55	; 85
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	82 60       	ori	r24, 0x02	; 2
    1712:	8c 93       	st	X, r24
    1714:	91 c0       	rjmp	.+290    	; 0x1838 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1716:	a5 e5       	ldi	r26, 0x55	; 85
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e5       	ldi	r30, 0x55	; 85
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	81 60       	ori	r24, 0x01	; 1
    1722:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1724:	a5 e5       	ldi	r26, 0x55	; 85
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e5 e5       	ldi	r30, 0x55	; 85
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	82 60       	ori	r24, 0x02	; 2
    1730:	8c 93       	st	X, r24
    1732:	82 c0       	rjmp	.+260    	; 0x1838 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3e 83       	std	Y+6, r19	; 0x06
    173c:	2d 83       	std	Y+5, r18	; 0x05
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	21 f1       	breq	.+72     	; 0x1790 <EXI_TriggerEdge+0x156>
    1748:	2d 81       	ldd	r18, Y+5	; 0x05
    174a:	3e 81       	ldd	r19, Y+6	; 0x06
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <EXI_TriggerEdge+0x122>
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f0       	breq	.+24     	; 0x1772 <EXI_TriggerEdge+0x138>
    175a:	6e c0       	rjmp	.+220    	; 0x1838 <EXI_TriggerEdge+0x1fe>
    175c:	2d 81       	ldd	r18, Y+5	; 0x05
    175e:	3e 81       	ldd	r19, Y+6	; 0x06
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	21 f1       	breq	.+72     	; 0x17ae <EXI_TriggerEdge+0x174>
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	71 f1       	breq	.+92     	; 0x17cc <EXI_TriggerEdge+0x192>
    1770:	63 c0       	rjmp	.+198    	; 0x1838 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1772:	a5 e5       	ldi	r26, 0x55	; 85
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e5       	ldi	r30, 0x55	; 85
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8b 7f       	andi	r24, 0xFB	; 251
    177e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1780:	a5 e5       	ldi	r26, 0x55	; 85
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 e5       	ldi	r30, 0x55	; 85
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	87 7f       	andi	r24, 0xF7	; 247
    178c:	8c 93       	st	X, r24
    178e:	54 c0       	rjmp	.+168    	; 0x1838 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1790:	a5 e5       	ldi	r26, 0x55	; 85
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e5       	ldi	r30, 0x55	; 85
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	84 60       	ori	r24, 0x04	; 4
    179c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    179e:	a5 e5       	ldi	r26, 0x55	; 85
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 e5       	ldi	r30, 0x55	; 85
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	87 7f       	andi	r24, 0xF7	; 247
    17aa:	8c 93       	st	X, r24
    17ac:	45 c0       	rjmp	.+138    	; 0x1838 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    17ae:	a5 e5       	ldi	r26, 0x55	; 85
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e5 e5       	ldi	r30, 0x55	; 85
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8b 7f       	andi	r24, 0xFB	; 251
    17ba:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    17bc:	a5 e5       	ldi	r26, 0x55	; 85
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e5       	ldi	r30, 0x55	; 85
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	88 60       	ori	r24, 0x08	; 8
    17c8:	8c 93       	st	X, r24
    17ca:	36 c0       	rjmp	.+108    	; 0x1838 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    17cc:	a5 e5       	ldi	r26, 0x55	; 85
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e5       	ldi	r30, 0x55	; 85
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	84 60       	ori	r24, 0x04	; 4
    17d8:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    17da:	a5 e5       	ldi	r26, 0x55	; 85
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e5       	ldi	r30, 0x55	; 85
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	88 60       	ori	r24, 0x08	; 8
    17e6:	8c 93       	st	X, r24
    17e8:	27 c0       	rjmp	.+78     	; 0x1838 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3c 83       	std	Y+4, r19	; 0x04
    17f2:	2b 83       	std	Y+3, r18	; 0x03
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	91 05       	cpc	r25, r1
    17fc:	31 f0       	breq	.+12     	; 0x180a <EXI_TriggerEdge+0x1d0>
    17fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1800:	3c 81       	ldd	r19, Y+4	; 0x04
    1802:	23 30       	cpi	r18, 0x03	; 3
    1804:	31 05       	cpc	r19, r1
    1806:	49 f0       	breq	.+18     	; 0x181a <EXI_TriggerEdge+0x1e0>
    1808:	10 c0       	rjmp	.+32     	; 0x182a <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    180a:	a4 e5       	ldi	r26, 0x54	; 84
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e4 e5       	ldi	r30, 0x54	; 84
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 7b       	andi	r24, 0xBF	; 191
    1816:	8c 93       	st	X, r24
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    181a:	a4 e5       	ldi	r26, 0x54	; 84
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e4 e5       	ldi	r30, 0x54	; 84
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8c 93       	st	X, r24
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    182a:	a4 e5       	ldi	r26, 0x54	; 84
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e4 e5       	ldi	r30, 0x54	; 84
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8f 7b       	andi	r24, 0xBF	; 191
    1836:	8c 93       	st	X, r24
				}
				break;
	}
}
    1838:	2a 96       	adiw	r28, 0x0a	; 10
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	2f 93       	push	r18
    1856:	3f 93       	push	r19
    1858:	4f 93       	push	r20
    185a:	5f 93       	push	r21
    185c:	6f 93       	push	r22
    185e:	7f 93       	push	r23
    1860:	8f 93       	push	r24
    1862:	9f 93       	push	r25
    1864:	af 93       	push	r26
    1866:	bf 93       	push	r27
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1874:	80 91 35 01 	lds	r24, 0x0135
    1878:	90 91 36 01 	lds	r25, 0x0136
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	29 f0       	breq	.+10     	; 0x188a <__vector_1+0x40>
		INT0_Fptr();
    1880:	e0 91 35 01 	lds	r30, 0x0135
    1884:	f0 91 36 01 	lds	r31, 0x0136
    1888:	09 95       	icall
	}
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <__vector_2>:

ISR(INT1_vect){
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    18da:	80 91 37 01 	lds	r24, 0x0137
    18de:	90 91 38 01 	lds	r25, 0x0138
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <__vector_2+0x40>
		INT1_Fptr();
    18e6:	e0 91 37 01 	lds	r30, 0x0137
    18ea:	f0 91 38 01 	lds	r31, 0x0138
    18ee:	09 95       	icall
	}
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <__vector_3>:

ISR(INT2_vect){
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1940:	80 91 39 01 	lds	r24, 0x0139
    1944:	90 91 3a 01 	lds	r25, 0x013A
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	29 f0       	breq	.+10     	; 0x1956 <__vector_3+0x40>
		INT2_Fptr();
    194c:	e0 91 39 01 	lds	r30, 0x0139
    1950:	f0 91 3a 01 	lds	r31, 0x013A
    1954:	09 95       	icall
	}
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	bf 91       	pop	r27
    1960:	af 91       	pop	r26
    1962:	9f 91       	pop	r25
    1964:	8f 91       	pop	r24
    1966:	7f 91       	pop	r23
    1968:	6f 91       	pop	r22
    196a:	5f 91       	pop	r21
    196c:	4f 91       	pop	r20
    196e:	3f 91       	pop	r19
    1970:	2f 91       	pop	r18
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_ES_tSetPinDirection+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <DIO_ES_tSetPinDirection+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
    198c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	88 30       	cpi	r24, 0x08	; 8
    1992:	18 f0       	brcs	.+6      	; 0x199a <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	8c 83       	std	Y+4, r24	; 0x04
    1998:	d8 c0       	rjmp	.+432    	; 0x1b4a <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	88 23       	and	r24, r24
    199e:	91 f5       	brne	.+100    	; 0x1a04 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	a1 f4       	brne	.+40     	; 0x19ce <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    19a6:	aa e3       	ldi	r26, 0x3A	; 58
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	ea e3       	ldi	r30, 0x3A	; 58
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_ES_tSetPinDirection+0x48>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <DIO_ES_tSetPinDirection+0x44>
    19c8:	84 2b       	or	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	bd c0       	rjmp	.+378    	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 23       	and	r24, r24
    19d2:	a9 f4       	brne	.+42     	; 0x19fe <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    19d4:	aa e3       	ldi	r26, 0x3A	; 58
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ea e3       	ldi	r30, 0x3A	; 58
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_ES_tSetPinDirection+0x76>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_ES_tSetPinDirection+0x72>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	a5 c0       	rjmp	.+330    	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	8c 83       	std	Y+4, r24	; 0x04
    1a02:	a3 c0       	rjmp	.+326    	; 0x1b4a <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 f5       	brne	.+100    	; 0x1a6e <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	a1 f4       	brne	.+40     	; 0x1a38 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1a10:	a7 e3       	ldi	r26, 0x37	; 55
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e7 e3       	ldi	r30, 0x37	; 55
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_ES_tSetPinDirection+0xb2>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_ES_tSetPinDirection+0xae>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	88 c0       	rjmp	.+272    	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 23       	and	r24, r24
    1a3c:	a9 f4       	brne	.+42     	; 0x1a68 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1a3e:	a7 e3       	ldi	r26, 0x37	; 55
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e3       	ldi	r30, 0x37	; 55
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_ES_tSetPinDirection+0xe0>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_ES_tSetPinDirection+0xdc>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	70 c0       	rjmp	.+224    	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	8c 83       	std	Y+4, r24	; 0x04
    1a6c:	6e c0       	rjmp	.+220    	; 0x1b4a <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	91 f5       	brne	.+100    	; 0x1ad8 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	a1 f4       	brne	.+40     	; 0x1aa2 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1a7a:	a4 e3       	ldi	r26, 0x34	; 52
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e4 e3       	ldi	r30, 0x34	; 52
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_ES_tSetPinDirection+0x11c>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_ES_tSetPinDirection+0x118>
    1a9c:	84 2b       	or	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	53 c0       	rjmp	.+166    	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	88 23       	and	r24, r24
    1aa6:	a9 f4       	brne	.+42     	; 0x1ad2 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1aa8:	a4 e3       	ldi	r26, 0x34	; 52
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e4 e3       	ldi	r30, 0x34	; 52
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_ES_tSetPinDirection+0x14a>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_ES_tSetPinDirection+0x146>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	3b c0       	rjmp	.+118    	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	8c 83       	std	Y+4, r24	; 0x04
    1ad6:	39 c0       	rjmp	.+114    	; 0x1b4a <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	91 f5       	brne	.+100    	; 0x1b42 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	a1 f4       	brne	.+40     	; 0x1b0c <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1ae4:	a1 e3       	ldi	r26, 0x31	; 49
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e1 e3       	ldi	r30, 0x31	; 49
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <DIO_ES_tSetPinDirection+0x186>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <DIO_ES_tSetPinDirection+0x182>
    1b06:	84 2b       	or	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	1e c0       	rjmp	.+60     	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 23       	and	r24, r24
    1b10:	a9 f4       	brne	.+42     	; 0x1b3c <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1b12:	a1 e3       	ldi	r26, 0x31	; 49
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e1 e3       	ldi	r30, 0x31	; 49
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_ES_tSetPinDirection+0x1b4>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_ES_tSetPinDirection+0x1b0>
    1b34:	80 95       	com	r24
    1b36:	84 23       	and	r24, r20
    1b38:	8c 93       	st	X, r24
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	8c 83       	std	Y+4, r24	; 0x04
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	8c 83       	std	Y+4, r24	; 0x04
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    1b48:	1c 82       	std	Y+4, r1	; 0x04
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <DIO_ES_tSetPinValue+0x6>
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <DIO_ES_tSetPinValue+0x8>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	6a 83       	std	Y+2, r22	; 0x02
    1b6a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	18 f0       	brcs	.+6      	; 0x1b78 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	8c 83       	std	Y+4, r24	; 0x04
    1b76:	d8 c0       	rjmp	.+432    	; 0x1d28 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	88 23       	and	r24, r24
    1b7c:	91 f5       	brne	.+100    	; 0x1be2 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	a1 f4       	brne	.+40     	; 0x1bac <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1b84:	ab e3       	ldi	r26, 0x3B	; 59
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	eb e3       	ldi	r30, 0x3B	; 59
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <DIO_ES_tSetPinValue+0x48>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <DIO_ES_tSetPinValue+0x44>
    1ba6:	84 2b       	or	r24, r20
    1ba8:	8c 93       	st	X, r24
    1baa:	bd c0       	rjmp	.+378    	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	88 23       	and	r24, r24
    1bb0:	a9 f4       	brne	.+42     	; 0x1bdc <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_ES_tSetPinValue+0x76>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_ES_tSetPinValue+0x72>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	a5 c0       	rjmp	.+330    	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	8c 83       	std	Y+4, r24	; 0x04
    1be0:	a3 c0       	rjmp	.+326    	; 0x1d28 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 f5       	brne	.+100    	; 0x1c4c <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	a1 f4       	brne	.+40     	; 0x1c16 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1bee:	a8 e3       	ldi	r26, 0x38	; 56
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e8 e3       	ldi	r30, 0x38	; 56
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_ES_tSetPinValue+0xb2>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_ES_tSetPinValue+0xae>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	88 c0       	rjmp	.+272    	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 23       	and	r24, r24
    1c1a:	a9 f4       	brne	.+42     	; 0x1c46 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1c1c:	a8 e3       	ldi	r26, 0x38	; 56
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e8 e3       	ldi	r30, 0x38	; 56
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_ES_tSetPinValue+0xe0>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_ES_tSetPinValue+0xdc>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	70 c0       	rjmp	.+224    	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	8c 83       	std	Y+4, r24	; 0x04
    1c4a:	6e c0       	rjmp	.+220    	; 0x1d28 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	91 f5       	brne	.+100    	; 0x1cb6 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	a1 f4       	brne	.+40     	; 0x1c80 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1c58:	a5 e3       	ldi	r26, 0x35	; 53
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e3       	ldi	r30, 0x35	; 53
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_ES_tSetPinValue+0x11c>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_ES_tSetPinValue+0x118>
    1c7a:	84 2b       	or	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	53 c0       	rjmp	.+166    	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	88 23       	and	r24, r24
    1c84:	a9 f4       	brne	.+42     	; 0x1cb0 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1c86:	a5 e3       	ldi	r26, 0x35	; 53
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e5 e3       	ldi	r30, 0x35	; 53
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_ES_tSetPinValue+0x14a>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_ES_tSetPinValue+0x146>
    1ca8:	80 95       	com	r24
    1caa:	84 23       	and	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	3b c0       	rjmp	.+118    	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	8c 83       	std	Y+4, r24	; 0x04
    1cb4:	39 c0       	rjmp	.+114    	; 0x1d28 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 f5       	brne	.+100    	; 0x1d20 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	a1 f4       	brne	.+40     	; 0x1cea <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1cc2:	a2 e3       	ldi	r26, 0x32	; 50
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e2 e3       	ldi	r30, 0x32	; 50
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_ES_tSetPinValue+0x186>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_ES_tSetPinValue+0x182>
    1ce4:	84 2b       	or	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	1e c0       	rjmp	.+60     	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 23       	and	r24, r24
    1cee:	a9 f4       	brne	.+42     	; 0x1d1a <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1cf0:	a2 e3       	ldi	r26, 0x32	; 50
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e2 e3       	ldi	r30, 0x32	; 50
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_ES_tSetPinValue+0x1b4>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_ES_tSetPinValue+0x1b0>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	06 c0       	rjmp	.+12     	; 0x1d26 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	8c 83       	std	Y+4, r24	; 0x04
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1d26:	1c 82       	std	Y+4, r1	; 0x04
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <DIO_ES_tGetPinValue+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <DIO_ES_tGetPinValue+0x8>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	6a 83       	std	Y+2, r22	; 0x02
    1d4a:	5c 83       	std	Y+4, r21	; 0x04
    1d4c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	88 30       	cpi	r24, 0x08	; 8
    1d52:	18 f0       	brcs	.+6      	; 0x1d5a <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	4d 83       	std	Y+5, r20	; 0x05
    1d58:	60 c0       	rjmp	.+192    	; 0x1e1a <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	88 23       	and	r24, r24
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1d60:	e9 e3       	ldi	r30, 0x39	; 57
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a9 01       	movw	r20, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <DIO_ES_tGetPinValue+0x40>
    1d74:	55 95       	asr	r21
    1d76:	47 95       	ror	r20
    1d78:	8a 95       	dec	r24
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <DIO_ES_tGetPinValue+0x3c>
    1d7c:	ca 01       	movw	r24, r20
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	eb 81       	ldd	r30, Y+3	; 0x03
    1d82:	fc 81       	ldd	r31, Y+4	; 0x04
    1d84:	80 83       	st	Z, r24
    1d86:	48 c0       	rjmp	.+144    	; 0x1e18 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	a1 f4       	brne	.+40     	; 0x1db6 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1d8e:	e6 e3       	ldi	r30, 0x36	; 54
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a9 01       	movw	r20, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <DIO_ES_tGetPinValue+0x6e>
    1da2:	55 95       	asr	r21
    1da4:	47 95       	ror	r20
    1da6:	8a 95       	dec	r24
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <DIO_ES_tGetPinValue+0x6a>
    1daa:	ca 01       	movw	r24, r20
    1dac:	81 70       	andi	r24, 0x01	; 1
    1dae:	eb 81       	ldd	r30, Y+3	; 0x03
    1db0:	fc 81       	ldd	r31, Y+4	; 0x04
    1db2:	80 83       	st	Z, r24
    1db4:	31 c0       	rjmp	.+98     	; 0x1e18 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	a1 f4       	brne	.+40     	; 0x1de4 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    1dbc:	e3 e3       	ldi	r30, 0x33	; 51
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a9 01       	movw	r20, r18
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <DIO_ES_tGetPinValue+0x9c>
    1dd0:	55 95       	asr	r21
    1dd2:	47 95       	ror	r20
    1dd4:	8a 95       	dec	r24
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <DIO_ES_tGetPinValue+0x98>
    1dd8:	ca 01       	movw	r24, r20
    1dda:	81 70       	andi	r24, 0x01	; 1
    1ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dde:	fc 81       	ldd	r31, Y+4	; 0x04
    1de0:	80 83       	st	Z, r24
    1de2:	1a c0       	rjmp	.+52     	; 0x1e18 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	a1 f4       	brne	.+40     	; 0x1e12 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    1dea:	e0 e3       	ldi	r30, 0x30	; 48
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_ES_tGetPinValue+0xca>
    1dfe:	55 95       	asr	r21
    1e00:	47 95       	ror	r20
    1e02:	8a 95       	dec	r24
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <DIO_ES_tGetPinValue+0xc6>
    1e06:	ca 01       	movw	r24, r20
    1e08:	81 70       	andi	r24, 0x01	; 1
    1e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0e:	80 83       	st	Z, r24
    1e10:	03 c0       	rjmp	.+6      	; 0x1e18 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1e12:	51 e0       	ldi	r21, 0x01	; 1
    1e14:	5d 83       	std	Y+5, r21	; 0x05
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    1e18:	1d 82       	std	Y+5, r1	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <DIO_ES_tSetPortDirection+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <DIO_ES_tSetPortDirection+0x8>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <DIO_ES_tSetPortDirection+0x24>
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	19 f0       	breq	.+6      	; 0x1e50 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    1e4a:	21 e0       	ldi	r18, 0x01	; 1
    1e4c:	2d 83       	std	Y+5, r18	; 0x05
    1e4e:	53 c0       	rjmp	.+166    	; 0x1ef6 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	3c 83       	std	Y+4, r19	; 0x04
    1e58:	2b 83       	std	Y+3, r18	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	91 05       	cpc	r25, r1
    1e62:	09 f1       	breq	.+66     	; 0x1ea6 <DIO_ES_tSetPortDirection+0x7a>
    1e64:	2b 81       	ldd	r18, Y+3	; 0x03
    1e66:	3c 81       	ldd	r19, Y+4	; 0x04
    1e68:	22 30       	cpi	r18, 0x02	; 2
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <DIO_ES_tSetPortDirection+0x4c>
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <DIO_ES_tSetPortDirection+0x62>
    1e76:	3b c0       	rjmp	.+118    	; 0x1eee <DIO_ES_tSetPortDirection+0xc2>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	f1 f0       	breq	.+60     	; 0x1ebe <DIO_ES_tSetPortDirection+0x92>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	83 30       	cpi	r24, 0x03	; 3
    1e88:	91 05       	cpc	r25, r1
    1e8a:	29 f1       	breq	.+74     	; 0x1ed6 <DIO_ES_tSetPortDirection+0xaa>
    1e8c:	30 c0       	rjmp	.+96     	; 0x1eee <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	29 f4       	brne	.+10     	; 0x1e9e <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    1e94:	ea e3       	ldi	r30, 0x3A	; 58
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	80 83       	st	Z, r24
    1e9c:	2b c0       	rjmp	.+86     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    1e9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	10 82       	st	Z, r1
    1ea4:	27 c0       	rjmp	.+78     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    1eac:	e7 e3       	ldi	r30, 0x37	; 55
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	80 83       	st	Z, r24
    1eb4:	1f c0       	rjmp	.+62     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    1eb6:	e7 e3       	ldi	r30, 0x37	; 55
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	10 82       	st	Z, r1
    1ebc:	1b c0       	rjmp	.+54     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	29 f4       	brne	.+10     	; 0x1ece <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    1ec4:	e4 e3       	ldi	r30, 0x34	; 52
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	80 83       	st	Z, r24
    1ecc:	13 c0       	rjmp	.+38     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    1ece:	e4 e3       	ldi	r30, 0x34	; 52
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	10 82       	st	Z, r1
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	29 f4       	brne	.+10     	; 0x1ee6 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    1edc:	e1 e3       	ldi	r30, 0x31	; 49
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	80 83       	st	Z, r24
    1ee4:	07 c0       	rjmp	.+14     	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1ee6:	e1 e3       	ldi	r30, 0x31	; 49
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	10 82       	st	Z, r1
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	9d 83       	std	Y+5, r25	; 0x05
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1ef4:	1d 82       	std	Y+5, r1	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <DIO_ES_tSetPortValue+0x6>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <DIO_ES_tSetPortValue+0x8>
    1f10:	0f 92       	push	r0
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	31 f0       	breq	.+12     	; 0x1f2c <DIO_ES_tSetPortValue+0x24>
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	88 23       	and	r24, r24
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1f26:	21 e0       	ldi	r18, 0x01	; 1
    1f28:	2d 83       	std	Y+5, r18	; 0x05
    1f2a:	53 c0       	rjmp	.+166    	; 0x1fd2 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	3c 83       	std	Y+4, r19	; 0x04
    1f34:	2b 83       	std	Y+3, r18	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	09 f1       	breq	.+66     	; 0x1f82 <DIO_ES_tSetPortValue+0x7a>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <DIO_ES_tSetPortValue+0x4c>
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <DIO_ES_tSetPortValue+0x62>
    1f52:	3b c0       	rjmp	.+118    	; 0x1fca <DIO_ES_tSetPortValue+0xc2>
    1f54:	2b 81       	ldd	r18, Y+3	; 0x03
    1f56:	3c 81       	ldd	r19, Y+4	; 0x04
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	f1 f0       	breq	.+60     	; 0x1f9a <DIO_ES_tSetPortValue+0x92>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	29 f1       	breq	.+74     	; 0x1fb2 <DIO_ES_tSetPortValue+0xaa>
    1f68:	30 c0       	rjmp	.+96     	; 0x1fca <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	29 f4       	brne	.+10     	; 0x1f7a <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1f70:	eb e3       	ldi	r30, 0x3B	; 59
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	80 83       	st	Z, r24
    1f78:	2b c0       	rjmp	.+86     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    1f7a:	eb e3       	ldi	r30, 0x3B	; 59
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	10 82       	st	Z, r1
    1f80:	27 c0       	rjmp	.+78     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	29 f4       	brne	.+10     	; 0x1f92 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    1f88:	e8 e3       	ldi	r30, 0x38	; 56
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	80 83       	st	Z, r24
    1f90:	1f c0       	rjmp	.+62     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    1f92:	e8 e3       	ldi	r30, 0x38	; 56
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	10 82       	st	Z, r1
    1f98:	1b c0       	rjmp	.+54     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    1fa0:	e5 e3       	ldi	r30, 0x35	; 53
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	80 83       	st	Z, r24
    1fa8:	13 c0       	rjmp	.+38     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    1faa:	e5 e3       	ldi	r30, 0x35	; 53
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	10 82       	st	Z, r1
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	29 f4       	brne	.+10     	; 0x1fc2 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    1fb8:	e2 e3       	ldi	r30, 0x32	; 50
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	80 83       	st	Z, r24
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1fc2:	e2 e3       	ldi	r30, 0x32	; 50
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	10 82       	st	Z, r1
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	9d 83       	std	Y+5, r25	; 0x05
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1fd0:	1d 82       	std	Y+5, r1	; 0x05
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_ES_tTOGPin+0x6>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	88 30       	cpi	r24, 0x08	; 8
    1ff8:	18 f0       	brcs	.+6      	; 0x2000 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	60 c0       	rjmp	.+192    	; 0x20c0 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	88 23       	and	r24, r24
    2004:	a1 f4       	brne	.+40     	; 0x202e <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <DIO_ES_tTOGPin+0x40>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <DIO_ES_tTOGPin+0x3c>
    2028:	84 27       	eor	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	48 c0       	rjmp	.+144    	; 0x20be <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	a1 f4       	brne	.+40     	; 0x205c <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2034:	a8 e3       	ldi	r26, 0x38	; 56
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e8 e3       	ldi	r30, 0x38	; 56
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <DIO_ES_tTOGPin+0x6e>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <DIO_ES_tTOGPin+0x6a>
    2056:	84 27       	eor	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	31 c0       	rjmp	.+98     	; 0x20be <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	82 30       	cpi	r24, 0x02	; 2
    2060:	a1 f4       	brne	.+40     	; 0x208a <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    2062:	a5 e3       	ldi	r26, 0x35	; 53
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e5 e3       	ldi	r30, 0x35	; 53
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	48 2f       	mov	r20, r24
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	02 2e       	mov	r0, r18
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <DIO_ES_tTOGPin+0x9c>
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	0a 94       	dec	r0
    2082:	e2 f7       	brpl	.-8      	; 0x207c <DIO_ES_tTOGPin+0x98>
    2084:	84 27       	eor	r24, r20
    2086:	8c 93       	st	X, r24
    2088:	1a c0       	rjmp	.+52     	; 0x20be <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	a1 f4       	brne	.+40     	; 0x20b8 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    2090:	a2 e3       	ldi	r26, 0x32	; 50
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e2 e3       	ldi	r30, 0x32	; 50
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	48 2f       	mov	r20, r24
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_ES_tTOGPin+0xca>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_ES_tTOGPin+0xc6>
    20b2:	84 27       	eor	r24, r20
    20b4:	8c 93       	st	X, r24
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    20be:	1b 82       	std	Y+3, r1	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <DIO_ES_tInit+0x6>
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    20d8:	1a 82       	std	Y+2, r1	; 0x02
    20da:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    20dc:	1a 82       	std	Y+2, r1	; 0x02
    20de:	19 82       	std	Y+1, r1	; 0x01
    20e0:	a3 c2       	rjmp	.+1350   	; 0x2628 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	fc 01       	movw	r30, r24
    20f0:	e7 59       	subi	r30, 0x97	; 151
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	88 23       	and	r24, r24
    20f8:	09 f0       	breq	.+2      	; 0x20fc <DIO_ES_tInit+0x2e>
    20fa:	9b c0       	rjmp	.+310    	; 0x2232 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	fc 01       	movw	r30, r24
    210c:	e7 59       	subi	r30, 0x97	; 151
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	e9 f4       	brne	.+58     	; 0x2150 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2116:	aa e3       	ldi	r26, 0x3A	; 58
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	ea e3       	ldi	r30, 0x3A	; 58
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	48 2f       	mov	r20, r24
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	fc 01       	movw	r30, r24
    2130:	e6 59       	subi	r30, 0x96	; 150
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	02 2e       	mov	r0, r18
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <DIO_ES_tInit+0x78>
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	0a 94       	dec	r0
    2148:	e2 f7       	brpl	.-8      	; 0x2142 <DIO_ES_tInit+0x74>
    214a:	84 2b       	or	r24, r20
    214c:	8c 93       	st	X, r24
    214e:	67 c2       	rjmp	.+1230   	; 0x261e <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2150:	aa e3       	ldi	r26, 0x3A	; 58
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ea e3       	ldi	r30, 0x3A	; 58
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	48 2f       	mov	r20, r24
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	fc 01       	movw	r30, r24
    216a:	e6 59       	subi	r30, 0x96	; 150
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 2e       	mov	r0, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <DIO_ES_tInit+0xb2>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <DIO_ES_tInit+0xae>
    2184:	80 95       	com	r24
    2186:	84 23       	and	r24, r20
    2188:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	fc 01       	movw	r30, r24
    2198:	e4 59       	subi	r30, 0x94	; 148
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	e9 f4       	brne	.+58     	; 0x21dc <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    21a2:	ab e3       	ldi	r26, 0x3B	; 59
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	eb e3       	ldi	r30, 0x3B	; 59
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	fc 01       	movw	r30, r24
    21bc:	e6 59       	subi	r30, 0x96	; 150
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <DIO_ES_tInit+0x104>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <DIO_ES_tInit+0x100>
    21d6:	84 2b       	or	r24, r20
    21d8:	8c 93       	st	X, r24
    21da:	21 c2       	rjmp	.+1090   	; 0x261e <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	fc 01       	movw	r30, r24
    21ea:	e4 59       	subi	r30, 0x94	; 148
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	88 23       	and	r24, r24
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <DIO_ES_tInit+0x128>
    21f4:	14 c2       	rjmp	.+1064   	; 0x261e <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    21f6:	ab e3       	ldi	r26, 0x3B	; 59
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	eb e3       	ldi	r30, 0x3B	; 59
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	48 2f       	mov	r20, r24
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	fc 01       	movw	r30, r24
    2210:	e6 59       	subi	r30, 0x96	; 150
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 2e       	mov	r0, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <DIO_ES_tInit+0x158>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	0a 94       	dec	r0
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <DIO_ES_tInit+0x154>
    222a:	80 95       	com	r24
    222c:	84 23       	and	r24, r20
    222e:	8c 93       	st	X, r24
    2230:	f6 c1       	rjmp	.+1004   	; 0x261e <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	fc 01       	movw	r30, r24
    2240:	e7 59       	subi	r30, 0x97	; 151
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 81       	ld	r24, Z
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	09 f0       	breq	.+2      	; 0x224c <DIO_ES_tInit+0x17e>
    224a:	9b c0       	rjmp	.+310    	; 0x2382 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	fc 01       	movw	r30, r24
    225c:	e7 59       	subi	r30, 0x97	; 151
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	e9 f4       	brne	.+58     	; 0x22a0 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2266:	a7 e3       	ldi	r26, 0x37	; 55
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e7 e3       	ldi	r30, 0x37	; 55
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	48 2f       	mov	r20, r24
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	fc 01       	movw	r30, r24
    2280:	e6 59       	subi	r30, 0x96	; 150
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 81       	ld	r24, Z
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_ES_tInit+0x1c8>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_ES_tInit+0x1c4>
    229a:	84 2b       	or	r24, r20
    229c:	8c 93       	st	X, r24
    229e:	bf c1       	rjmp	.+894    	; 0x261e <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    22a0:	a7 e3       	ldi	r26, 0x37	; 55
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e7 e3       	ldi	r30, 0x37	; 55
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	48 2f       	mov	r20, r24
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	fc 01       	movw	r30, r24
    22ba:	e6 59       	subi	r30, 0x96	; 150
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_ES_tInit+0x202>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_ES_tInit+0x1fe>
    22d4:	80 95       	com	r24
    22d6:	84 23       	and	r24, r20
    22d8:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	fc 01       	movw	r30, r24
    22e8:	e4 59       	subi	r30, 0x94	; 148
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	e9 f4       	brne	.+58     	; 0x232c <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    22f2:	a8 e3       	ldi	r26, 0x38	; 56
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 e3       	ldi	r30, 0x38	; 56
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	48 2f       	mov	r20, r24
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	fc 01       	movw	r30, r24
    230c:	e6 59       	subi	r30, 0x96	; 150
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_ES_tInit+0x254>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_ES_tInit+0x250>
    2326:	84 2b       	or	r24, r20
    2328:	8c 93       	st	X, r24
    232a:	79 c1       	rjmp	.+754    	; 0x261e <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	fc 01       	movw	r30, r24
    233a:	e4 59       	subi	r30, 0x94	; 148
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	88 23       	and	r24, r24
    2342:	09 f0       	breq	.+2      	; 0x2346 <DIO_ES_tInit+0x278>
    2344:	6c c1       	rjmp	.+728    	; 0x261e <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2346:	ab e3       	ldi	r26, 0x3B	; 59
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	eb e3       	ldi	r30, 0x3B	; 59
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	48 2f       	mov	r20, r24
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	fc 01       	movw	r30, r24
    2360:	e6 59       	subi	r30, 0x96	; 150
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 81       	ld	r24, Z
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <DIO_ES_tInit+0x2a8>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <DIO_ES_tInit+0x2a4>
    237a:	80 95       	com	r24
    237c:	84 23       	and	r24, r20
    237e:	8c 93       	st	X, r24
    2380:	4e c1       	rjmp	.+668    	; 0x261e <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	fc 01       	movw	r30, r24
    2390:	e7 59       	subi	r30, 0x97	; 151
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	09 f0       	breq	.+2      	; 0x239c <DIO_ES_tInit+0x2ce>
    239a:	9b c0       	rjmp	.+310    	; 0x24d2 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	01 96       	adiw	r24, 0x01	; 1
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	fc 01       	movw	r30, r24
    23ac:	e7 59       	subi	r30, 0x97	; 151
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 81       	ld	r24, Z
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	e9 f4       	brne	.+58     	; 0x23f0 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    23b6:	a4 e3       	ldi	r26, 0x34	; 52
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e4 e3       	ldi	r30, 0x34	; 52
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	fc 01       	movw	r30, r24
    23d0:	e6 59       	subi	r30, 0x96	; 150
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	02 2e       	mov	r0, r18
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <DIO_ES_tInit+0x318>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	0a 94       	dec	r0
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <DIO_ES_tInit+0x314>
    23ea:	84 2b       	or	r24, r20
    23ec:	8c 93       	st	X, r24
    23ee:	17 c1       	rjmp	.+558    	; 0x261e <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    23f0:	a4 e3       	ldi	r26, 0x34	; 52
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e4 e3       	ldi	r30, 0x34	; 52
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	48 2f       	mov	r20, r24
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	fc 01       	movw	r30, r24
    240a:	e6 59       	subi	r30, 0x96	; 150
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 2e       	mov	r0, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <DIO_ES_tInit+0x352>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	0a 94       	dec	r0
    2422:	e2 f7       	brpl	.-8      	; 0x241c <DIO_ES_tInit+0x34e>
    2424:	80 95       	com	r24
    2426:	84 23       	and	r24, r20
    2428:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	fc 01       	movw	r30, r24
    2438:	e4 59       	subi	r30, 0x94	; 148
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	e9 f4       	brne	.+58     	; 0x247c <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2442:	a5 e3       	ldi	r26, 0x35	; 53
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e5 e3       	ldi	r30, 0x35	; 53
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	fc 01       	movw	r30, r24
    245c:	e6 59       	subi	r30, 0x96	; 150
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <DIO_ES_tInit+0x3a4>
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <DIO_ES_tInit+0x3a0>
    2476:	84 2b       	or	r24, r20
    2478:	8c 93       	st	X, r24
    247a:	d1 c0       	rjmp	.+418    	; 0x261e <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	fc 01       	movw	r30, r24
    248a:	e4 59       	subi	r30, 0x94	; 148
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	88 23       	and	r24, r24
    2492:	09 f0       	breq	.+2      	; 0x2496 <DIO_ES_tInit+0x3c8>
    2494:	c4 c0       	rjmp	.+392    	; 0x261e <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2496:	ab e3       	ldi	r26, 0x3B	; 59
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	eb e3       	ldi	r30, 0x3B	; 59
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	48 2f       	mov	r20, r24
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	fc 01       	movw	r30, r24
    24b0:	e6 59       	subi	r30, 0x96	; 150
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <DIO_ES_tInit+0x3f8>
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <DIO_ES_tInit+0x3f4>
    24ca:	80 95       	com	r24
    24cc:	84 23       	and	r24, r20
    24ce:	8c 93       	st	X, r24
    24d0:	a6 c0       	rjmp	.+332    	; 0x261e <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	fc 01       	movw	r30, r24
    24e0:	e7 59       	subi	r30, 0x97	; 151
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	09 f0       	breq	.+2      	; 0x24ec <DIO_ES_tInit+0x41e>
    24ea:	99 c0       	rjmp	.+306    	; 0x261e <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	fc 01       	movw	r30, r24
    24fc:	e7 59       	subi	r30, 0x97	; 151
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	e9 f4       	brne	.+58     	; 0x2540 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2506:	a1 e3       	ldi	r26, 0x31	; 49
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e1 e3       	ldi	r30, 0x31	; 49
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	48 2f       	mov	r20, r24
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	9a 81       	ldd	r25, Y+2	; 0x02
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	fc 01       	movw	r30, r24
    2520:	e6 59       	subi	r30, 0x96	; 150
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <DIO_ES_tInit+0x468>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <DIO_ES_tInit+0x464>
    253a:	84 2b       	or	r24, r20
    253c:	8c 93       	st	X, r24
    253e:	6f c0       	rjmp	.+222    	; 0x261e <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2540:	a1 e3       	ldi	r26, 0x31	; 49
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e1 e3       	ldi	r30, 0x31	; 49
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	48 2f       	mov	r20, r24
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	fc 01       	movw	r30, r24
    255a:	e6 59       	subi	r30, 0x96	; 150
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 81       	ld	r24, Z
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <DIO_ES_tInit+0x4a2>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <DIO_ES_tInit+0x49e>
    2574:	80 95       	com	r24
    2576:	84 23       	and	r24, r20
    2578:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	fc 01       	movw	r30, r24
    2588:	e4 59       	subi	r30, 0x94	; 148
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	e9 f4       	brne	.+58     	; 0x25cc <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2592:	a2 e3       	ldi	r26, 0x32	; 50
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e2 e3       	ldi	r30, 0x32	; 50
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	fc 01       	movw	r30, r24
    25ac:	e6 59       	subi	r30, 0x96	; 150
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <DIO_ES_tInit+0x4f4>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <DIO_ES_tInit+0x4f0>
    25c6:	84 2b       	or	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	29 c0       	rjmp	.+82     	; 0x261e <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	fc 01       	movw	r30, r24
    25da:	e4 59       	subi	r30, 0x94	; 148
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	88 23       	and	r24, r24
    25e2:	e9 f4       	brne	.+58     	; 0x261e <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    25e4:	ab e3       	ldi	r26, 0x3B	; 59
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	eb e3       	ldi	r30, 0x3B	; 59
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	48 2f       	mov	r20, r24
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	fc 01       	movw	r30, r24
    25fe:	e6 59       	subi	r30, 0x96	; 150
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	02 2e       	mov	r0, r18
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <DIO_ES_tInit+0x546>
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	0a 94       	dec	r0
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <DIO_ES_tInit+0x542>
    2618:	80 95       	com	r24
    261a:	84 23       	and	r24, r20
    261c:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	9a 81       	ldd	r25, Y+2	; 0x02
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	88 31       	cpi	r24, 0x18	; 24
    262e:	91 05       	cpc	r25, r1
    2630:	0c f4       	brge	.+2      	; 0x2634 <DIO_ES_tInit+0x566>
    2632:	57 cd       	rjmp	.-1362   	; 0x20e2 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2634:	80 e0       	ldi	r24, 0x00	; 0
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	e0 97       	sbiw	r28, 0x30	; 48
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	62 e0       	ldi	r22, 0x02	; 2
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e2       	ldi	r26, 0x20	; 32
    2664:	b1 e4       	ldi	r27, 0x41	; 65
    2666:	8d a7       	std	Y+45, r24	; 0x2d
    2668:	9e a7       	std	Y+46, r25	; 0x2e
    266a:	af a7       	std	Y+47, r26	; 0x2f
    266c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    266e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2670:	7e a5       	ldd	r23, Y+46	; 0x2e
    2672:	8f a5       	ldd	r24, Y+47	; 0x2f
    2674:	98 a9       	ldd	r25, Y+48	; 0x30
    2676:	2b ea       	ldi	r18, 0xAB	; 171
    2678:	3a ea       	ldi	r19, 0xAA	; 170
    267a:	4a ea       	ldi	r20, 0xAA	; 170
    267c:	50 e4       	ldi	r21, 0x40	; 64
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	89 a7       	std	Y+41, r24	; 0x29
    2688:	9a a7       	std	Y+42, r25	; 0x2a
    268a:	ab a7       	std	Y+43, r26	; 0x2b
    268c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    268e:	69 a5       	ldd	r22, Y+41	; 0x29
    2690:	7a a5       	ldd	r23, Y+42	; 0x2a
    2692:	8b a5       	ldd	r24, Y+43	; 0x2b
    2694:	9c a5       	ldd	r25, Y+44	; 0x2c
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5f e3       	ldi	r21, 0x3F	; 63
    269e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	1c f4       	brge	.+6      	; 0x26ac <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	88 a7       	std	Y+40, r24	; 0x28
    26aa:	91 c0       	rjmp	.+290    	; 0x27ce <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    26ac:	69 a5       	ldd	r22, Y+41	; 0x29
    26ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    26b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	53 e4       	ldi	r21, 0x43	; 67
    26bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	0c f0       	brlt	.+2      	; 0x26c6 <LCD_ES_tTrigger_Enable+0x86>
    26c4:	7b c0       	rjmp	.+246    	; 0x27bc <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    26c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    26c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    26ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    26cc:	98 a9       	ldd	r25, Y+48	; 0x30
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a e7       	ldi	r20, 0x7A	; 122
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8c a3       	std	Y+36, r24	; 0x24
    26e0:	9d a3       	std	Y+37, r25	; 0x25
    26e2:	ae a3       	std	Y+38, r26	; 0x26
    26e4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6c a1       	ldd	r22, Y+36	; 0x24
    26e8:	7d a1       	ldd	r23, Y+37	; 0x25
    26ea:	8e a1       	ldd	r24, Y+38	; 0x26
    26ec:	9f a1       	ldd	r25, Y+39	; 0x27
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	55 e4       	ldi	r21, 0x45	; 69
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	88 a3       	std	Y+32, r24	; 0x20
    2700:	99 a3       	std	Y+33, r25	; 0x21
    2702:	aa a3       	std	Y+34, r26	; 0x22
    2704:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2706:	68 a1       	ldd	r22, Y+32	; 0x20
    2708:	79 a1       	ldd	r23, Y+33	; 0x21
    270a:	8a a1       	ldd	r24, Y+34	; 0x22
    270c:	9b a1       	ldd	r25, Y+35	; 0x23
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9f 8f       	std	Y+31, r25	; 0x1f
    2724:	8e 8f       	std	Y+30, r24	; 0x1e
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2728:	68 a1       	ldd	r22, Y+32	; 0x20
    272a:	79 a1       	ldd	r23, Y+33	; 0x21
    272c:	8a a1       	ldd	r24, Y+34	; 0x22
    272e:	9b a1       	ldd	r25, Y+35	; 0x23
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6c a1       	ldd	r22, Y+36	; 0x24
    2742:	7d a1       	ldd	r23, Y+37	; 0x25
    2744:	8e a1       	ldd	r24, Y+38	; 0x26
    2746:	9f a1       	ldd	r25, Y+39	; 0x27
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9f 8f       	std	Y+31, r25	; 0x1f
    2766:	8e 8f       	std	Y+30, r24	; 0x1e
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_ES_tTrigger_Enable+0x148>
    276a:	80 e9       	ldi	r24, 0x90	; 144
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	9d 8f       	std	Y+29, r25	; 0x1d
    2770:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2772:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2774:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_ES_tTrigger_Enable+0x136>
    277a:	9d 8f       	std	Y+29, r25	; 0x1d
    277c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2780:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9f 8f       	std	Y+31, r25	; 0x1f
    2786:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8e 8d       	ldd	r24, Y+30	; 0x1e
    278a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_ES_tTrigger_Enable+0x12a>
    2790:	24 c0       	rjmp	.+72     	; 0x27da <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	68 a1       	ldd	r22, Y+32	; 0x20
    2794:	79 a1       	ldd	r23, Y+33	; 0x21
    2796:	8a a1       	ldd	r24, Y+34	; 0x22
    2798:	9b a1       	ldd	r25, Y+35	; 0x23
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9f 8f       	std	Y+31, r25	; 0x1f
    27a4:	8e 8f       	std	Y+30, r24	; 0x1e
    27a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27aa:	9b 8f       	std	Y+27, r25	; 0x1b
    27ac:	8a 8f       	std	Y+26, r24	; 0x1a
    27ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_ES_tTrigger_Enable+0x172>
    27b6:	9b 8f       	std	Y+27, r25	; 0x1b
    27b8:	8a 8f       	std	Y+26, r24	; 0x1a
    27ba:	0f c0       	rjmp	.+30     	; 0x27da <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27bc:	69 a5       	ldd	r22, Y+41	; 0x29
    27be:	7a a5       	ldd	r23, Y+42	; 0x2a
    27c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	88 a7       	std	Y+40, r24	; 0x28
    27ce:	88 a5       	ldd	r24, Y+40	; 0x28
    27d0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27d2:	89 8d       	ldd	r24, Y+25	; 0x19
    27d4:	8a 95       	dec	r24
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_ES_tTrigger_Enable+0x194>
    27d8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	aa ef       	ldi	r26, 0xFA	; 250
    27ea:	b4 e4       	ldi	r27, 0x44	; 68
    27ec:	8d 8b       	std	Y+21, r24	; 0x15
    27ee:	9e 8b       	std	Y+22, r25	; 0x16
    27f0:	af 8b       	std	Y+23, r26	; 0x17
    27f2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27f4:	6d 89       	ldd	r22, Y+21	; 0x15
    27f6:	7e 89       	ldd	r23, Y+22	; 0x16
    27f8:	8f 89       	ldd	r24, Y+23	; 0x17
    27fa:	98 8d       	ldd	r25, Y+24	; 0x18
    27fc:	2b ea       	ldi	r18, 0xAB	; 171
    27fe:	3a ea       	ldi	r19, 0xAA	; 170
    2800:	4a ea       	ldi	r20, 0xAA	; 170
    2802:	50 e4       	ldi	r21, 0x40	; 64
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	89 8b       	std	Y+17, r24	; 0x11
    280e:	9a 8b       	std	Y+18, r25	; 0x12
    2810:	ab 8b       	std	Y+19, r26	; 0x13
    2812:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2814:	69 89       	ldd	r22, Y+17	; 0x11
    2816:	7a 89       	ldd	r23, Y+18	; 0x12
    2818:	8b 89       	ldd	r24, Y+19	; 0x13
    281a:	9c 89       	ldd	r25, Y+20	; 0x14
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	1c f4       	brge	.+6      	; 0x2832 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	88 8b       	std	Y+16, r24	; 0x10
    2830:	91 c0       	rjmp	.+290    	; 0x2954 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2832:	69 89       	ldd	r22, Y+17	; 0x11
    2834:	7a 89       	ldd	r23, Y+18	; 0x12
    2836:	8b 89       	ldd	r24, Y+19	; 0x13
    2838:	9c 89       	ldd	r25, Y+20	; 0x14
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	53 e4       	ldi	r21, 0x43	; 67
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	0c f0       	brlt	.+2      	; 0x284c <LCD_ES_tTrigger_Enable+0x20c>
    284a:	7b c0       	rjmp	.+246    	; 0x2942 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    284c:	6d 89       	ldd	r22, Y+21	; 0x15
    284e:	7e 89       	ldd	r23, Y+22	; 0x16
    2850:	8f 89       	ldd	r24, Y+23	; 0x17
    2852:	98 8d       	ldd	r25, Y+24	; 0x18
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4a e7       	ldi	r20, 0x7A	; 122
    285a:	54 e4       	ldi	r21, 0x44	; 68
    285c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8c 87       	std	Y+12, r24	; 0x0c
    2866:	9d 87       	std	Y+13, r25	; 0x0d
    2868:	ae 87       	std	Y+14, r26	; 0x0e
    286a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286c:	6c 85       	ldd	r22, Y+12	; 0x0c
    286e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2870:	8e 85       	ldd	r24, Y+14	; 0x0e
    2872:	9f 85       	ldd	r25, Y+15	; 0x0f
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a e7       	ldi	r20, 0x7A	; 122
    287a:	55 e4       	ldi	r21, 0x45	; 69
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	88 87       	std	Y+8, r24	; 0x08
    2886:	99 87       	std	Y+9, r25	; 0x09
    2888:	aa 87       	std	Y+10, r26	; 0x0a
    288a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    288c:	68 85       	ldd	r22, Y+8	; 0x08
    288e:	79 85       	ldd	r23, Y+9	; 0x09
    2890:	8a 85       	ldd	r24, Y+10	; 0x0a
    2892:	9b 85       	ldd	r25, Y+11	; 0x0b
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e8       	ldi	r20, 0x80	; 128
    289a:	5f e3       	ldi	r21, 0x3F	; 63
    289c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	2c f4       	brge	.+10     	; 0x28ae <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9f 83       	std	Y+7, r25	; 0x07
    28aa:	8e 83       	std	Y+6, r24	; 0x06
    28ac:	3f c0       	rjmp	.+126    	; 0x292c <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    28ae:	68 85       	ldd	r22, Y+8	; 0x08
    28b0:	79 85       	ldd	r23, Y+9	; 0x09
    28b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	3f ef       	ldi	r19, 0xFF	; 255
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	57 e4       	ldi	r21, 0x47	; 71
    28be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	4c f5       	brge	.+82     	; 0x2918 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    28c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    28ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    28cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e2       	ldi	r20, 0x20	; 32
    28d4:	51 e4       	ldi	r21, 0x41	; 65
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	9f 83       	std	Y+7, r25	; 0x07
    28ec:	8e 83       	std	Y+6, r24	; 0x06
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <LCD_ES_tTrigger_Enable+0x2ce>
    28f0:	80 e9       	ldi	r24, 0x90	; 144
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	9d 83       	std	Y+5, r25	; 0x05
    28f6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28f8:	8c 81       	ldd	r24, Y+4	; 0x04
    28fa:	9d 81       	ldd	r25, Y+5	; 0x05
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_ES_tTrigger_Enable+0x2bc>
    2900:	9d 83       	std	Y+5, r25	; 0x05
    2902:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2904:	8e 81       	ldd	r24, Y+6	; 0x06
    2906:	9f 81       	ldd	r25, Y+7	; 0x07
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	9f 83       	std	Y+7, r25	; 0x07
    290c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	8e 81       	ldd	r24, Y+6	; 0x06
    2910:	9f 81       	ldd	r25, Y+7	; 0x07
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	69 f7       	brne	.-38     	; 0x28f0 <LCD_ES_tTrigger_Enable+0x2b0>
    2916:	24 c0       	rjmp	.+72     	; 0x2960 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2918:	68 85       	ldd	r22, Y+8	; 0x08
    291a:	79 85       	ldd	r23, Y+9	; 0x09
    291c:	8a 85       	ldd	r24, Y+10	; 0x0a
    291e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9f 83       	std	Y+7, r25	; 0x07
    292a:	8e 83       	std	Y+6, r24	; 0x06
    292c:	8e 81       	ldd	r24, Y+6	; 0x06
    292e:	9f 81       	ldd	r25, Y+7	; 0x07
    2930:	9b 83       	std	Y+3, r25	; 0x03
    2932:	8a 83       	std	Y+2, r24	; 0x02
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	9b 81       	ldd	r25, Y+3	; 0x03
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCD_ES_tTrigger_Enable+0x2f8>
    293c:	9b 83       	std	Y+3, r25	; 0x03
    293e:	8a 83       	std	Y+2, r24	; 0x02
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2942:	69 89       	ldd	r22, Y+17	; 0x11
    2944:	7a 89       	ldd	r23, Y+18	; 0x12
    2946:	8b 89       	ldd	r24, Y+19	; 0x13
    2948:	9c 89       	ldd	r25, Y+20	; 0x14
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	88 8b       	std	Y+16, r24	; 0x10
    2954:	88 89       	ldd	r24, Y+16	; 0x10
    2956:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	8a 95       	dec	r24
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_ES_tTrigger_Enable+0x31a>
    295e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2960:	80 e0       	ldi	r24, 0x00	; 0
}
    2962:	e0 96       	adiw	r28, 0x30	; 48
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2982:	88 e2       	ldi	r24, 0x28	; 40
    2984:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2988:	8e e0       	ldi	r24, 0x0E	; 14
    298a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    298e:	86 e0       	ldi	r24, 0x06	; 6
    2990:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
	return ES_OK;
    299a:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	2e 97       	sbiw	r28, 0x0e	; 14
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	b0 e4       	ldi	r27, 0x40	; 64
    29c4:	8b 87       	std	Y+11, r24	; 0x0b
    29c6:	9c 87       	std	Y+12, r25	; 0x0c
    29c8:	ad 87       	std	Y+13, r26	; 0x0d
    29ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	4a e7       	ldi	r20, 0x7A	; 122
    29da:	55 e4       	ldi	r21, 0x45	; 69
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8f 83       	std	Y+7, r24	; 0x07
    29e6:	98 87       	std	Y+8, r25	; 0x08
    29e8:	a9 87       	std	Y+9, r26	; 0x09
    29ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e8       	ldi	r20, 0x80	; 128
    29fa:	5f e3       	ldi	r21, 0x3F	; 63
    29fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a00:	88 23       	and	r24, r24
    2a02:	2c f4       	brge	.+10     	; 0x2a0e <lcd_ES_tclear+0x6c>
		__ticks = 1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	3f c0       	rjmp	.+126    	; 0x2a8c <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    2a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a10:	78 85       	ldd	r23, Y+8	; 0x08
    2a12:	89 85       	ldd	r24, Y+9	; 0x09
    2a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	3f ef       	ldi	r19, 0xFF	; 255
    2a1a:	4f e7       	ldi	r20, 0x7F	; 127
    2a1c:	57 e4       	ldi	r21, 0x47	; 71
    2a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a22:	18 16       	cp	r1, r24
    2a24:	4c f5       	brge	.+82     	; 0x2a78 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e2       	ldi	r20, 0x20	; 32
    2a34:	51 e4       	ldi	r21, 0x41	; 65
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	0f c0       	rjmp	.+30     	; 0x2a6e <lcd_ES_tclear+0xcc>
    2a50:	80 e9       	ldi	r24, 0x90	; 144
    2a52:	91 e0       	ldi	r25, 0x01	; 1
    2a54:	9c 83       	std	Y+4, r25	; 0x04
    2a56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <lcd_ES_tclear+0xba>
    2a60:	9c 83       	std	Y+4, r25	; 0x04
    2a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	69 f7       	brne	.-38     	; 0x2a50 <lcd_ES_tclear+0xae>
    2a76:	14 c0       	rjmp	.+40     	; 0x2aa0 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a78:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7a:	78 85       	ldd	r23, Y+8	; 0x08
    2a7c:	89 85       	ldd	r24, Y+9	; 0x09
    2a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <lcd_ES_tclear+0xf6>
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
}
    2aa2:	2e 96       	adiw	r28, 0x0e	; 14
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	0f 92       	push	r0
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	88 23       	and	r24, r24
    2ad8:	34 f4       	brge	.+12     	; 0x2ae6 <Lcd_ES_tsendCmd+0x32>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	66 e0       	ldi	r22, 0x06	; 6
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2ae4:	05 c0       	rjmp	.+10     	; 0x2af0 <Lcd_ES_tsendCmd+0x3c>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	66 e0       	ldi	r22, 0x06	; 6
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	82 95       	swap	r24
    2af4:	86 95       	lsr	r24
    2af6:	86 95       	lsr	r24
    2af8:	83 70       	andi	r24, 0x03	; 3
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	81 70       	andi	r24, 0x01	; 1
    2b00:	90 70       	andi	r25, 0x00	; 0
    2b02:	88 23       	and	r24, r24
    2b04:	31 f0       	breq	.+12     	; 0x2b12 <Lcd_ES_tsendCmd+0x5e>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	65 e0       	ldi	r22, 0x05	; 5
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2b10:	05 c0       	rjmp	.+10     	; 0x2b1c <Lcd_ES_tsendCmd+0x68>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	65 e0       	ldi	r22, 0x05	; 5
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	82 95       	swap	r24
    2b20:	86 95       	lsr	r24
    2b22:	87 70       	andi	r24, 0x07	; 7
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	81 70       	andi	r24, 0x01	; 1
    2b2a:	90 70       	andi	r25, 0x00	; 0
    2b2c:	88 23       	and	r24, r24
    2b2e:	31 f0       	breq	.+12     	; 0x2b3c <Lcd_ES_tsendCmd+0x88>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	64 e0       	ldi	r22, 0x04	; 4
    2b34:	41 e0       	ldi	r20, 0x01	; 1
    2b36:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2b3a:	05 c0       	rjmp	.+10     	; 0x2b46 <Lcd_ES_tsendCmd+0x92>
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	64 e0       	ldi	r22, 0x04	; 4
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	82 95       	swap	r24
    2b4a:	8f 70       	andi	r24, 0x0F	; 15
    2b4c:	88 2f       	mov	r24, r24
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	81 70       	andi	r24, 0x01	; 1
    2b52:	90 70       	andi	r25, 0x00	; 0
    2b54:	88 23       	and	r24, r24
    2b56:	31 f0       	breq	.+12     	; 0x2b64 <Lcd_ES_tsendCmd+0xb0>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	63 e0       	ldi	r22, 0x03	; 3
    2b5c:	41 e0       	ldi	r20, 0x01	; 1
    2b5e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <Lcd_ES_tsendCmd+0xba>
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	63 e0       	ldi	r22, 0x03	; 3
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2b6e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	86 95       	lsr	r24
    2b76:	86 95       	lsr	r24
    2b78:	86 95       	lsr	r24
    2b7a:	88 2f       	mov	r24, r24
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	90 70       	andi	r25, 0x00	; 0
    2b82:	88 23       	and	r24, r24
    2b84:	31 f0       	breq	.+12     	; 0x2b92 <Lcd_ES_tsendCmd+0xde>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	66 e0       	ldi	r22, 0x06	; 6
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <Lcd_ES_tsendCmd+0xe8>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	66 e0       	ldi	r22, 0x06	; 6
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	86 95       	lsr	r24
    2ba0:	86 95       	lsr	r24
    2ba2:	88 2f       	mov	r24, r24
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	81 70       	andi	r24, 0x01	; 1
    2ba8:	90 70       	andi	r25, 0x00	; 0
    2baa:	88 23       	and	r24, r24
    2bac:	31 f0       	breq	.+12     	; 0x2bba <Lcd_ES_tsendCmd+0x106>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	65 e0       	ldi	r22, 0x05	; 5
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <Lcd_ES_tsendCmd+0x110>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	65 e0       	ldi	r22, 0x05	; 5
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	86 95       	lsr	r24
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	81 70       	andi	r24, 0x01	; 1
    2bce:	90 70       	andi	r25, 0x00	; 0
    2bd0:	88 23       	and	r24, r24
    2bd2:	31 f0       	breq	.+12     	; 0x2be0 <Lcd_ES_tsendCmd+0x12c>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	64 e0       	ldi	r22, 0x04	; 4
    2bd8:	41 e0       	ldi	r20, 0x01	; 1
    2bda:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2bde:	05 c0       	rjmp	.+10     	; 0x2bea <Lcd_ES_tsendCmd+0x136>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	64 e0       	ldi	r22, 0x04	; 4
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	81 70       	andi	r24, 0x01	; 1
    2bf2:	90 70       	andi	r25, 0x00	; 0
    2bf4:	88 23       	and	r24, r24
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <Lcd_ES_tsendCmd+0x150>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	63 e0       	ldi	r22, 0x03	; 3
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2c02:	05 c0       	rjmp	.+10     	; 0x2c0e <Lcd_ES_tsendCmd+0x15a>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	63 e0       	ldi	r22, 0x03	; 3
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2c0e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2c12:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    2c14:	0f 90       	pop	r0
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	0f 92       	push	r0
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	61 e0       	ldi	r22, 0x01	; 1
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	88 23       	and	r24, r24
    2c40:	34 f4       	brge	.+12     	; 0x2c4e <Lcd_ES_tsendChar+0x32>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	66 e0       	ldi	r22, 0x06	; 6
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <Lcd_ES_tsendChar+0x3c>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	66 e0       	ldi	r22, 0x06	; 6
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	82 95       	swap	r24
    2c5c:	86 95       	lsr	r24
    2c5e:	86 95       	lsr	r24
    2c60:	83 70       	andi	r24, 0x03	; 3
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	81 70       	andi	r24, 0x01	; 1
    2c68:	90 70       	andi	r25, 0x00	; 0
    2c6a:	88 23       	and	r24, r24
    2c6c:	31 f0       	breq	.+12     	; 0x2c7a <Lcd_ES_tsendChar+0x5e>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	65 e0       	ldi	r22, 0x05	; 5
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2c78:	05 c0       	rjmp	.+10     	; 0x2c84 <Lcd_ES_tsendChar+0x68>
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	65 e0       	ldi	r22, 0x05	; 5
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	82 95       	swap	r24
    2c88:	86 95       	lsr	r24
    2c8a:	87 70       	andi	r24, 0x07	; 7
    2c8c:	88 2f       	mov	r24, r24
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	81 70       	andi	r24, 0x01	; 1
    2c92:	90 70       	andi	r25, 0x00	; 0
    2c94:	88 23       	and	r24, r24
    2c96:	31 f0       	breq	.+12     	; 0x2ca4 <Lcd_ES_tsendChar+0x88>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	64 e0       	ldi	r22, 0x04	; 4
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2ca2:	05 c0       	rjmp	.+10     	; 0x2cae <Lcd_ES_tsendChar+0x92>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	64 e0       	ldi	r22, 0x04	; 4
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	82 95       	swap	r24
    2cb2:	8f 70       	andi	r24, 0x0F	; 15
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	81 70       	andi	r24, 0x01	; 1
    2cba:	90 70       	andi	r25, 0x00	; 0
    2cbc:	88 23       	and	r24, r24
    2cbe:	31 f0       	breq	.+12     	; 0x2ccc <Lcd_ES_tsendChar+0xb0>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	63 e0       	ldi	r22, 0x03	; 3
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2cca:	05 c0       	rjmp	.+10     	; 0x2cd6 <Lcd_ES_tsendChar+0xba>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	63 e0       	ldi	r22, 0x03	; 3
    2cd0:	40 e0       	ldi	r20, 0x00	; 0
    2cd2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2cd6:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	86 95       	lsr	r24
    2cde:	86 95       	lsr	r24
    2ce0:	86 95       	lsr	r24
    2ce2:	88 2f       	mov	r24, r24
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	81 70       	andi	r24, 0x01	; 1
    2ce8:	90 70       	andi	r25, 0x00	; 0
    2cea:	88 23       	and	r24, r24
    2cec:	31 f0       	breq	.+12     	; 0x2cfa <Lcd_ES_tsendChar+0xde>
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	66 e0       	ldi	r22, 0x06	; 6
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2cf8:	05 c0       	rjmp	.+10     	; 0x2d04 <Lcd_ES_tsendChar+0xe8>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	66 e0       	ldi	r22, 0x06	; 6
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	86 95       	lsr	r24
    2d08:	86 95       	lsr	r24
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	81 70       	andi	r24, 0x01	; 1
    2d10:	90 70       	andi	r25, 0x00	; 0
    2d12:	88 23       	and	r24, r24
    2d14:	31 f0       	breq	.+12     	; 0x2d22 <Lcd_ES_tsendChar+0x106>
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	65 e0       	ldi	r22, 0x05	; 5
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2d20:	05 c0       	rjmp	.+10     	; 0x2d2c <Lcd_ES_tsendChar+0x110>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	65 e0       	ldi	r22, 0x05	; 5
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	86 95       	lsr	r24
    2d30:	88 2f       	mov	r24, r24
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	81 70       	andi	r24, 0x01	; 1
    2d36:	90 70       	andi	r25, 0x00	; 0
    2d38:	88 23       	and	r24, r24
    2d3a:	31 f0       	breq	.+12     	; 0x2d48 <Lcd_ES_tsendChar+0x12c>
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	64 e0       	ldi	r22, 0x04	; 4
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <Lcd_ES_tsendChar+0x136>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	64 e0       	ldi	r22, 0x04	; 4
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	81 70       	andi	r24, 0x01	; 1
    2d5a:	90 70       	andi	r25, 0x00	; 0
    2d5c:	88 23       	and	r24, r24
    2d5e:	31 f0       	breq	.+12     	; 0x2d6c <Lcd_ES_tsendChar+0x150>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	63 e0       	ldi	r22, 0x03	; 3
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <Lcd_ES_tsendChar+0x15a>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	63 e0       	ldi	r22, 0x03	; 3
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2d76:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    2d7c:	0f 90       	pop	r0
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <Lcd_ES_tsendString+0x6>
    2d8a:	0f 92       	push	r0
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	9b 83       	std	Y+3, r25	; 0x03
    2d92:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>

	unsigned char i=0;
    2da8:	19 82       	std	Y+1, r1	; 0x01
    2daa:	0e c0       	rjmp	.+28     	; 0x2dc8 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	fc 01       	movw	r30, r24
    2db8:	e2 0f       	add	r30, r18
    2dba:	f3 1f       	adc	r31, r19
    2dbc:	80 81       	ld	r24, Z
    2dbe:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Lcd_ES_tsendChar>
		i++;
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	8f 5f       	subi	r24, 0xFF	; 255
    2dc6:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e2 0f       	add	r30, r18
    2dd6:	f3 1f       	adc	r31, r19
    2dd8:	80 81       	ld	r24, Z
    2dda:	88 23       	and	r24, r24
    2ddc:	39 f7       	brne	.-50     	; 0x2dac <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    2dde:	80 e0       	ldi	r24, 0x00	; 0
}
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <Lcd_ES_tsendString_xy+0x6>
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <Lcd_ES_tsendString_xy+0x8>
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	6b 83       	std	Y+3, r22	; 0x03
    2dfe:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	61 e0       	ldi	r22, 0x01	; 1
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	6c 81       	ldd	r22, Y+4	; 0x04
    2e18:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <Lcd_ES_tsendString>
	return ES_OK;
    2e24:	80 e0       	ldi	r24, 0x00	; 0

}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	08 95       	ret

00002e34 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    2e34:	df 93       	push	r29
    2e36:	cf 93       	push	r28
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	9e 87       	std	Y+14, r25	; 0x0e
    2e4a:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	61 e0       	ldi	r22, 0x01	; 1
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2e60:	1a 82       	std	Y+2, r1	; 0x02
    2e62:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	11 f5       	brne	.+68     	; 0x2eb0 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    2e6c:	80 e3       	ldi	r24, 0x30	; 48
    2e6e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Lcd_ES_tsendChar>
    2e72:	39 c0       	rjmp	.+114    	; 0x2ee6 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	e8 2f       	mov	r30, r24
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	2a e0       	ldi	r18, 0x0A	; 10
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	b9 01       	movw	r22, r18
    2e84:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodhi4>
    2e88:	28 2f       	mov	r18, r24
    2e8a:	20 5d       	subi	r18, 0xD0	; 208
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	03 96       	adiw	r24, 0x03	; 3
    2e90:	e8 0f       	add	r30, r24
    2e92:	f9 1f       	adc	r31, r25
    2e94:	20 83       	st	Z, r18
			num /= 10;
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	2a e0       	ldi	r18, 0x0A	; 10
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	b9 01       	movw	r22, r18
    2ea0:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodhi4>
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9e 87       	std	Y+14, r25	; 0x0e
    2ea8:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	f1 f6       	brne	.-68     	; 0x2e74 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	11 c0       	rjmp	.+34     	; 0x2ee0 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	88 2f       	mov	r24, r24
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9c 01       	movw	r18, r24
    2ec6:	21 50       	subi	r18, 0x01	; 1
    2ec8:	30 40       	sbci	r19, 0x00	; 0
    2eca:	ce 01       	movw	r24, r28
    2ecc:	03 96       	adiw	r24, 0x03	; 3
    2ece:	fc 01       	movw	r30, r24
    2ed0:	e2 0f       	add	r30, r18
    2ed2:	f3 1f       	adc	r31, r19
    2ed4:	80 81       	ld	r24, Z
    2ed6:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	81 50       	subi	r24, 0x01	; 1
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	88 23       	and	r24, r24
    2ee4:	61 f7       	brne	.-40     	; 0x2ebe <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
}
    2ee8:	2e 96       	adiw	r28, 0x0e	; 14
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	a3 97       	sbiw	r28, 0x23	; 35
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	98 a3       	std	Y+32, r25	; 0x20
    2f10:	8f 8f       	std	Y+31, r24	; 0x1f
    2f12:	69 a3       	std	Y+33, r22	; 0x21
    2f14:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	61 e0       	ldi	r22, 0x01	; 1
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>


	if(row == 1){
    2f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <Lcd_ES_tdisplayNum_xy+0x38>
    2f30:	76 c0       	rjmp	.+236    	; 0x301e <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    2f32:	80 e8       	ldi	r24, 0x80	; 128
    2f34:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	89 8f       	std	Y+25, r24	; 0x19
    2f42:	9a 8f       	std	Y+26, r25	; 0x1a
    2f44:	ab 8f       	std	Y+27, r26	; 0x1b
    2f46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	69 8d       	ldd	r22, Y+25	; 0x19
    2f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a e7       	ldi	r20, 0x7A	; 122
    2f56:	55 e4       	ldi	r21, 0x45	; 69
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8d 8b       	std	Y+21, r24	; 0x15
    2f62:	9e 8b       	std	Y+22, r25	; 0x16
    2f64:	af 8b       	std	Y+23, r26	; 0x17
    2f66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f68:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9c 8b       	std	Y+20, r25	; 0x14
    2f86:	8b 8b       	std	Y+19, r24	; 0x13
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    2f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <Lcd_ES_tdisplayNum_xy+0xf0>
    2fcc:	80 e9       	ldi	r24, 0x90	; 144
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	9a 8b       	std	Y+18, r25	; 0x12
    2fd2:	89 8b       	std	Y+17, r24	; 0x11
    2fd4:	89 89       	ldd	r24, Y+17	; 0x11
    2fd6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <Lcd_ES_tdisplayNum_xy+0xde>
    2fdc:	9a 8b       	std	Y+18, r25	; 0x12
    2fde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8b 89       	ldd	r24, Y+19	; 0x13
    2fec:	9c 89       	ldd	r25, Y+20	; 0x14
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <Lcd_ES_tdisplayNum_xy+0xd2>
    2ff2:	92 c0       	rjmp	.+292    	; 0x3118 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9c 8b       	std	Y+20, r25	; 0x14
    3006:	8b 8b       	std	Y+19, r24	; 0x13
    3008:	8b 89       	ldd	r24, Y+19	; 0x13
    300a:	9c 89       	ldd	r25, Y+20	; 0x14
    300c:	98 8b       	std	Y+16, r25	; 0x10
    300e:	8f 87       	std	Y+15, r24	; 0x0f
    3010:	8f 85       	ldd	r24, Y+15	; 0x0f
    3012:	98 89       	ldd	r25, Y+16	; 0x10
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <Lcd_ES_tdisplayNum_xy+0x11a>
    3018:	98 8b       	std	Y+16, r25	; 0x10
    301a:	8f 87       	std	Y+15, r24	; 0x0f
    301c:	7d c0       	rjmp	.+250    	; 0x3118 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    301e:	89 a1       	ldd	r24, Y+33	; 0x21
    3020:	82 30       	cpi	r24, 0x02	; 2
    3022:	09 f0       	breq	.+2      	; 0x3026 <Lcd_ES_tdisplayNum_xy+0x12c>
    3024:	76 c0       	rjmp	.+236    	; 0x3112 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    3026:	80 ec       	ldi	r24, 0xC0	; 192
    3028:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 e2       	ldi	r26, 0x20	; 32
    3032:	b1 e4       	ldi	r27, 0x41	; 65
    3034:	8b 87       	std	Y+11, r24	; 0x0b
    3036:	9c 87       	std	Y+12, r25	; 0x0c
    3038:	ad 87       	std	Y+13, r26	; 0x0d
    303a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6b 85       	ldd	r22, Y+11	; 0x0b
    303e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3040:	8d 85       	ldd	r24, Y+13	; 0x0d
    3042:	9e 85       	ldd	r25, Y+14	; 0x0e
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a e7       	ldi	r20, 0x7A	; 122
    304a:	55 e4       	ldi	r21, 0x45	; 69
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8f 83       	std	Y+7, r24	; 0x07
    3056:	98 87       	std	Y+8, r25	; 0x08
    3058:	a9 87       	std	Y+9, r26	; 0x09
    305a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305c:	6f 81       	ldd	r22, Y+7	; 0x07
    305e:	78 85       	ldd	r23, Y+8	; 0x08
    3060:	89 85       	ldd	r24, Y+9	; 0x09
    3062:	9a 85       	ldd	r25, Y+10	; 0x0a
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6b 85       	ldd	r22, Y+11	; 0x0b
    3098:	7c 85       	ldd	r23, Y+12	; 0x0c
    309a:	8d 85       	ldd	r24, Y+13	; 0x0d
    309c:	9e 85       	ldd	r25, Y+14	; 0x0e
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9e 83       	std	Y+6, r25	; 0x06
    30bc:	8d 83       	std	Y+5, r24	; 0x05
    30be:	0f c0       	rjmp	.+30     	; 0x30de <Lcd_ES_tdisplayNum_xy+0x1e4>
    30c0:	80 e9       	ldi	r24, 0x90	; 144
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <Lcd_ES_tdisplayNum_xy+0x1d2>
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <Lcd_ES_tdisplayNum_xy+0x1c6>
    30e6:	18 c0       	rjmp	.+48     	; 0x3118 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
    30fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	9a 81       	ldd	r25, Y+2	; 0x02
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <Lcd_ES_tdisplayNum_xy+0x20e>
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	8b a3       	std	Y+35, r24	; 0x23
    3116:	1a c0       	rjmp	.+52     	; 0x314c <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9e 8f       	std	Y+30, r25	; 0x1e
    311e:	8d 8f       	std	Y+29, r24	; 0x1d
    3120:	08 c0       	rjmp	.+16     	; 0x3132 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    3122:	8c e1       	ldi	r24, 0x1C	; 28
    3124:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    312a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    312c:	01 96       	adiw	r24, 0x01	; 1
    312e:	9e 8f       	std	Y+30, r25	; 0x1e
    3130:	8d 8f       	std	Y+29, r24	; 0x1d
    3132:	8a a1       	ldd	r24, Y+34	; 0x22
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    313a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313c:	28 17       	cp	r18, r24
    313e:	39 07       	cpc	r19, r25
    3140:	84 f7       	brge	.-32     	; 0x3122 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    3142:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3144:	98 a1       	ldd	r25, Y+32	; 0x20
    3146:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <Lcd_ES_tdisplayNum>
	return ES_OK;
    314a:	1b a2       	std	Y+35, r1	; 0x23
    314c:	8b a1       	ldd	r24, Y+35	; 0x23

}
    314e:	a3 96       	adiw	r28, 0x23	; 35
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	cf 91       	pop	r28
    315c:	df 91       	pop	r29
    315e:	08 95       	ret

00003160 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	a2 97       	sbiw	r28, 0x22	; 34
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	8f 8f       	std	Y+31, r24	; 0x1f
    3176:	68 a3       	std	Y+32, r22	; 0x20
    3178:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	61 e0       	ldi	r22, 0x01	; 1
    317e:	41 e0       	ldi	r20, 0x01	; 1
    3180:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>


	if(row == 1){
    318e:	88 a1       	ldd	r24, Y+32	; 0x20
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	09 f0       	breq	.+2      	; 0x3196 <Lcd_ES_tsendChar_xy+0x36>
    3194:	76 c0       	rjmp	.+236    	; 0x3282 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    3196:	80 e8       	ldi	r24, 0x80	; 128
    3198:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a0 e8       	ldi	r26, 0x80	; 128
    31a2:	bf e3       	ldi	r27, 0x3F	; 63
    31a4:	89 8f       	std	Y+25, r24	; 0x19
    31a6:	9a 8f       	std	Y+26, r25	; 0x1a
    31a8:	ab 8f       	std	Y+27, r26	; 0x1b
    31aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	69 8d       	ldd	r22, Y+25	; 0x19
    31ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	4a e7       	ldi	r20, 0x7A	; 122
    31ba:	55 e4       	ldi	r21, 0x45	; 69
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	8d 8b       	std	Y+21, r24	; 0x15
    31c6:	9e 8b       	std	Y+22, r25	; 0x16
    31c8:	af 8b       	std	Y+23, r26	; 0x17
    31ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31cc:	6d 89       	ldd	r22, Y+21	; 0x15
    31ce:	7e 89       	ldd	r23, Y+22	; 0x16
    31d0:	8f 89       	ldd	r24, Y+23	; 0x17
    31d2:	98 8d       	ldd	r25, Y+24	; 0x18
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e8       	ldi	r20, 0x80	; 128
    31da:	5f e3       	ldi	r21, 0x3F	; 63
    31dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e0:	88 23       	and	r24, r24
    31e2:	2c f4       	brge	.+10     	; 0x31ee <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9c 8b       	std	Y+20, r25	; 0x14
    31ea:	8b 8b       	std	Y+19, r24	; 0x13
    31ec:	3f c0       	rjmp	.+126    	; 0x326c <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    31ee:	6d 89       	ldd	r22, Y+21	; 0x15
    31f0:	7e 89       	ldd	r23, Y+22	; 0x16
    31f2:	8f 89       	ldd	r24, Y+23	; 0x17
    31f4:	98 8d       	ldd	r25, Y+24	; 0x18
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	3f ef       	ldi	r19, 0xFF	; 255
    31fa:	4f e7       	ldi	r20, 0x7F	; 127
    31fc:	57 e4       	ldi	r21, 0x47	; 71
    31fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3202:	18 16       	cp	r1, r24
    3204:	4c f5       	brge	.+82     	; 0x3258 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3206:	69 8d       	ldd	r22, Y+25	; 0x19
    3208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    320a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9c 8b       	std	Y+20, r25	; 0x14
    322c:	8b 8b       	std	Y+19, r24	; 0x13
    322e:	0f c0       	rjmp	.+30     	; 0x324e <Lcd_ES_tsendChar_xy+0xee>
    3230:	80 e9       	ldi	r24, 0x90	; 144
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	9a 8b       	std	Y+18, r25	; 0x12
    3236:	89 8b       	std	Y+17, r24	; 0x11
    3238:	89 89       	ldd	r24, Y+17	; 0x11
    323a:	9a 89       	ldd	r25, Y+18	; 0x12
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <Lcd_ES_tsendChar_xy+0xdc>
    3240:	9a 8b       	std	Y+18, r25	; 0x12
    3242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9c 8b       	std	Y+20, r25	; 0x14
    324c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	8b 89       	ldd	r24, Y+19	; 0x13
    3250:	9c 89       	ldd	r25, Y+20	; 0x14
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	69 f7       	brne	.-38     	; 0x3230 <Lcd_ES_tsendChar_xy+0xd0>
    3256:	92 c0       	rjmp	.+292    	; 0x337c <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 89       	ldd	r22, Y+21	; 0x15
    325a:	7e 89       	ldd	r23, Y+22	; 0x16
    325c:	8f 89       	ldd	r24, Y+23	; 0x17
    325e:	98 8d       	ldd	r25, Y+24	; 0x18
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9c 8b       	std	Y+20, r25	; 0x14
    326a:	8b 8b       	std	Y+19, r24	; 0x13
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	98 8b       	std	Y+16, r25	; 0x10
    3272:	8f 87       	std	Y+15, r24	; 0x0f
    3274:	8f 85       	ldd	r24, Y+15	; 0x0f
    3276:	98 89       	ldd	r25, Y+16	; 0x10
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <Lcd_ES_tsendChar_xy+0x118>
    327c:	98 8b       	std	Y+16, r25	; 0x10
    327e:	8f 87       	std	Y+15, r24	; 0x0f
    3280:	7d c0       	rjmp	.+250    	; 0x337c <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    3282:	88 a1       	ldd	r24, Y+32	; 0x20
    3284:	82 30       	cpi	r24, 0x02	; 2
    3286:	09 f0       	breq	.+2      	; 0x328a <Lcd_ES_tsendChar_xy+0x12a>
    3288:	76 c0       	rjmp	.+236    	; 0x3376 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    328a:	80 ec       	ldi	r24, 0xC0	; 192
    328c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	a0 e2       	ldi	r26, 0x20	; 32
    3296:	b1 e4       	ldi	r27, 0x41	; 65
    3298:	8b 87       	std	Y+11, r24	; 0x0b
    329a:	9c 87       	std	Y+12, r25	; 0x0c
    329c:	ad 87       	std	Y+13, r26	; 0x0d
    329e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	4a e7       	ldi	r20, 0x7A	; 122
    32ae:	55 e4       	ldi	r21, 0x45	; 69
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	8f 83       	std	Y+7, r24	; 0x07
    32ba:	98 87       	std	Y+8, r25	; 0x08
    32bc:	a9 87       	std	Y+9, r26	; 0x09
    32be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c0:	6f 81       	ldd	r22, Y+7	; 0x07
    32c2:	78 85       	ldd	r23, Y+8	; 0x08
    32c4:	89 85       	ldd	r24, Y+9	; 0x09
    32c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e8       	ldi	r20, 0x80	; 128
    32ce:	5f e3       	ldi	r21, 0x3F	; 63
    32d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d4:	88 23       	and	r24, r24
    32d6:	2c f4       	brge	.+10     	; 0x32e2 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
    32e0:	3f c0       	rjmp	.+126    	; 0x3360 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    32e2:	6f 81       	ldd	r22, Y+7	; 0x07
    32e4:	78 85       	ldd	r23, Y+8	; 0x08
    32e6:	89 85       	ldd	r24, Y+9	; 0x09
    32e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	3f ef       	ldi	r19, 0xFF	; 255
    32ee:	4f e7       	ldi	r20, 0x7F	; 127
    32f0:	57 e4       	ldi	r21, 0x47	; 71
    32f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f6:	18 16       	cp	r1, r24
    32f8:	4c f5       	brge	.+82     	; 0x334c <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3300:	9e 85       	ldd	r25, Y+14	; 0x0e
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e2       	ldi	r20, 0x20	; 32
    3308:	51 e4       	ldi	r21, 0x41	; 65
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	bc 01       	movw	r22, r24
    3314:	cd 01       	movw	r24, r26
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	0f c0       	rjmp	.+30     	; 0x3342 <Lcd_ES_tsendChar_xy+0x1e2>
    3324:	80 e9       	ldi	r24, 0x90	; 144
    3326:	91 e0       	ldi	r25, 0x01	; 1
    3328:	9c 83       	std	Y+4, r25	; 0x04
    332a:	8b 83       	std	Y+3, r24	; 0x03
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <Lcd_ES_tsendChar_xy+0x1d0>
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3338:	8d 81       	ldd	r24, Y+5	; 0x05
    333a:	9e 81       	ldd	r25, Y+6	; 0x06
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	9e 83       	std	Y+6, r25	; 0x06
    3340:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	9e 81       	ldd	r25, Y+6	; 0x06
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	69 f7       	brne	.-38     	; 0x3324 <Lcd_ES_tsendChar_xy+0x1c4>
    334a:	18 c0       	rjmp	.+48     	; 0x337c <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334c:	6f 81       	ldd	r22, Y+7	; 0x07
    334e:	78 85       	ldd	r23, Y+8	; 0x08
    3350:	89 85       	ldd	r24, Y+9	; 0x09
    3352:	9a 85       	ldd	r25, Y+10	; 0x0a
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	8d 81       	ldd	r24, Y+5	; 0x05
    3362:	9e 81       	ldd	r25, Y+6	; 0x06
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	9a 81       	ldd	r25, Y+2	; 0x02
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <Lcd_ES_tsendChar_xy+0x20c>
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	03 c0       	rjmp	.+6      	; 0x337c <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	8a a3       	std	Y+34, r24	; 0x22
    337a:	19 c0       	rjmp	.+50     	; 0x33ae <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9e 8f       	std	Y+30, r25	; 0x1e
    3382:	8d 8f       	std	Y+29, r24	; 0x1d
    3384:	08 c0       	rjmp	.+16     	; 0x3396 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    3386:	8c e1       	ldi	r24, 0x1C	; 28
    3388:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    338c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    338e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	9e 8f       	std	Y+30, r25	; 0x1e
    3394:	8d 8f       	std	Y+29, r24	; 0x1d
    3396:	89 a1       	ldd	r24, Y+33	; 0x21
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    339e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33a0:	28 17       	cp	r18, r24
    33a2:	39 07       	cpc	r19, r25
    33a4:	84 f7       	brge	.-32     	; 0x3386 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    33a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33a8:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Lcd_ES_tsendChar>
	return ES_OK;
    33ac:	1a a2       	std	Y+34, r1	; 0x22
    33ae:	8a a1       	ldd	r24, Y+34	; 0x22
}
    33b0:	a2 96       	adiw	r28, 0x22	; 34
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <LCD_ES_tSet_Cursor_Pos+0x6>
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <LCD_ES_tSet_Cursor_Pos+0x8>
    33ca:	0f 92       	push	r0
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	81 50       	subi	r24, 0x01	; 1
    33d8:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	3d 83       	std	Y+5, r19	; 0x05
    33e2:	2c 83       	std	Y+4, r18	; 0x04
    33e4:	8c 81       	ldd	r24, Y+4	; 0x04
    33e6:	9d 81       	ldd	r25, Y+5	; 0x05
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	91 05       	cpc	r25, r1
    33ec:	31 f0       	breq	.+12     	; 0x33fa <LCD_ES_tSet_Cursor_Pos+0x38>
    33ee:	2c 81       	ldd	r18, Y+4	; 0x04
    33f0:	3d 81       	ldd	r19, Y+5	; 0x05
    33f2:	22 30       	cpi	r18, 0x02	; 2
    33f4:	31 05       	cpc	r19, r1
    33f6:	31 f0       	breq	.+12     	; 0x3404 <LCD_ES_tSet_Cursor_Pos+0x42>
    33f8:	0a c0       	rjmp	.+20     	; 0x340e <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	80 58       	subi	r24, 0x80	; 128
    33fe:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    3402:	08 c0       	rjmp	.+16     	; 0x3414 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	80 54       	subi	r24, 0x40	; 64
    3408:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    340c:	03 c0       	rjmp	.+6      	; 0x3414 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    340e:	31 e0       	ldi	r19, 0x01	; 1
    3410:	3b 83       	std	Y+3, r19	; 0x03
    3412:	01 c0       	rjmp	.+2      	; 0x3416 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3414:	1b 82       	std	Y+3, r1	; 0x03
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <LCD_ES_tGoTo+0x6>
    342e:	0f 92       	push	r0
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	88 23       	and	r24, r24
    343c:	41 f4       	brne	.+16     	; 0x344e <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	80 31       	cpi	r24, 0x10	; 16
    3442:	98 f4       	brcc	.+38     	; 0x346a <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	80 58       	subi	r24, 0x80	; 128
    3448:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    344c:	0e c0       	rjmp	.+28     	; 0x346a <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	41 f4       	brne	.+16     	; 0x3464 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	80 31       	cpi	r24, 0x10	; 16
    3458:	40 f4       	brcc	.+16     	; 0x346a <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	80 54       	subi	r24, 0x40	; 64
    345e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <Lcd_ES_tsendCmd>
    3462:	03 c0       	rjmp	.+6      	; 0x346a <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	8b 83       	std	Y+3, r24	; 0x03
    3468:	01 c0       	rjmp	.+2      	; 0x346c <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    346a:	1b 82       	std	Y+3, r1	; 0x03
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	65 97       	sbiw	r28, 0x15	; 21
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	9c 8b       	std	Y+20, r25	; 0x14
    3490:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3492:	eb 89       	ldd	r30, Y+19	; 0x13
    3494:	fc 89       	ldd	r31, Y+20	; 0x14
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    349a:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    349c:	8b 89       	ldd	r24, Y+19	; 0x13
    349e:	9c 89       	ldd	r25, Y+20	; 0x14
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <KPD_ES_tGetKeyPressed+0x2c>
    34a4:	ed c0       	rjmp	.+474    	; 0x3680 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    34a6:	19 8a       	std	Y+17, r1	; 0x11
    34a8:	e5 c0       	rjmp	.+458    	; 0x3674 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    34aa:	89 89       	ldd	r24, Y+17	; 0x11
    34ac:	88 2f       	mov	r24, r24
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	fc 01       	movw	r30, r24
    34b2:	ef 5d       	subi	r30, 0xDF	; 223
    34b4:	fe 4f       	sbci	r31, 0xFE	; 254
    34b6:	90 81       	ld	r25, Z
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	69 2f       	mov	r22, r25
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    34c2:	18 8a       	std	Y+16, r1	; 0x10
    34c4:	c1 c0       	rjmp	.+386    	; 0x3648 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    34c6:	88 89       	ldd	r24, Y+16	; 0x10
    34c8:	88 2f       	mov	r24, r24
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	fc 01       	movw	r30, r24
    34ce:	eb 5d       	subi	r30, 0xDB	; 219
    34d0:	fe 4f       	sbci	r31, 0xFE	; 254
    34d2:	90 81       	ld	r25, Z
    34d4:	9e 01       	movw	r18, r28
    34d6:	2e 5e       	subi	r18, 0xEE	; 238
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	83 e0       	ldi	r24, 0x03	; 3
    34dc:	69 2f       	mov	r22, r25
    34de:	a9 01       	movw	r20, r18
    34e0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    34e4:	8a 89       	ldd	r24, Y+18	; 0x12
    34e6:	88 23       	and	r24, r24
    34e8:	09 f0       	breq	.+2      	; 0x34ec <KPD_ES_tGetKeyPressed+0x72>
    34ea:	ab c0       	rjmp	.+342    	; 0x3642 <KPD_ES_tGetKeyPressed+0x1c8>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a0 ea       	ldi	r26, 0xA0	; 160
    34f2:	b1 e4       	ldi	r27, 0x41	; 65
    34f4:	8b 87       	std	Y+11, r24	; 0x0b
    34f6:	9c 87       	std	Y+12, r25	; 0x0c
    34f8:	ad 87       	std	Y+13, r26	; 0x0d
    34fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3500:	8d 85       	ldd	r24, Y+13	; 0x0d
    3502:	9e 85       	ldd	r25, Y+14	; 0x0e
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a e7       	ldi	r20, 0x7A	; 122
    350a:	55 e4       	ldi	r21, 0x45	; 69
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8f 83       	std	Y+7, r24	; 0x07
    3516:	98 87       	std	Y+8, r25	; 0x08
    3518:	a9 87       	std	Y+9, r26	; 0x09
    351a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    351c:	6f 81       	ldd	r22, Y+7	; 0x07
    351e:	78 85       	ldd	r23, Y+8	; 0x08
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    353e:	6f 81       	ldd	r22, Y+7	; 0x07
    3540:	78 85       	ldd	r23, Y+8	; 0x08
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	9a 85       	ldd	r25, Y+10	; 0x0a
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6b 85       	ldd	r22, Y+11	; 0x0b
    3558:	7c 85       	ldd	r23, Y+12	; 0x0c
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	0f c0       	rjmp	.+30     	; 0x359e <KPD_ES_tGetKeyPressed+0x124>
    3580:	80 e9       	ldi	r24, 0x90	; 144
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	9c 83       	std	Y+4, r25	; 0x04
    3586:	8b 83       	std	Y+3, r24	; 0x03
    3588:	8b 81       	ldd	r24, Y+3	; 0x03
    358a:	9c 81       	ldd	r25, Y+4	; 0x04
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <KPD_ES_tGetKeyPressed+0x112>
    3590:	9c 83       	std	Y+4, r25	; 0x04
    3592:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	8d 81       	ldd	r24, Y+5	; 0x05
    3596:	9e 81       	ldd	r25, Y+6	; 0x06
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	9e 83       	std	Y+6, r25	; 0x06
    359c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	9e 81       	ldd	r25, Y+6	; 0x06
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <KPD_ES_tGetKeyPressed+0x106>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	8d 81       	ldd	r24, Y+5	; 0x05
    35be:	9e 81       	ldd	r25, Y+6	; 0x06
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <KPD_ES_tGetKeyPressed+0x14e>
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    35d0:	88 89       	ldd	r24, Y+16	; 0x10
    35d2:	88 2f       	mov	r24, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	fc 01       	movw	r30, r24
    35d8:	eb 5d       	subi	r30, 0xDB	; 219
    35da:	fe 4f       	sbci	r31, 0xFE	; 254
    35dc:	90 81       	ld	r25, Z
    35de:	9e 01       	movw	r18, r28
    35e0:	2e 5e       	subi	r18, 0xEE	; 238
    35e2:	3f 4f       	sbci	r19, 0xFF	; 255
    35e4:	83 e0       	ldi	r24, 0x03	; 3
    35e6:	69 2f       	mov	r22, r25
    35e8:	a9 01       	movw	r20, r18
    35ea:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <DIO_ES_tGetPinValue>
    35ee:	0f c0       	rjmp	.+30     	; 0x360e <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    35f0:	88 89       	ldd	r24, Y+16	; 0x10
    35f2:	88 2f       	mov	r24, r24
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	fc 01       	movw	r30, r24
    35f8:	eb 5d       	subi	r30, 0xDB	; 219
    35fa:	fe 4f       	sbci	r31, 0xFE	; 254
    35fc:	90 81       	ld	r25, Z
    35fe:	9e 01       	movw	r18, r28
    3600:	2e 5e       	subi	r18, 0xEE	; 238
    3602:	3f 4f       	sbci	r19, 0xFF	; 255
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	69 2f       	mov	r22, r25
    3608:	a9 01       	movw	r20, r18
    360a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    360e:	8a 89       	ldd	r24, Y+18	; 0x12
    3610:	88 23       	and	r24, r24
    3612:	71 f3       	breq	.-36     	; 0x35f0 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3614:	89 89       	ldd	r24, Y+17	; 0x11
    3616:	48 2f       	mov	r20, r24
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	88 89       	ldd	r24, Y+16	; 0x10
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	ca 01       	movw	r24, r20
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	82 0f       	add	r24, r18
    362c:	93 1f       	adc	r25, r19
    362e:	fc 01       	movw	r30, r24
    3630:	ef 5e       	subi	r30, 0xEF	; 239
    3632:	fe 4f       	sbci	r31, 0xFE	; 254
    3634:	80 81       	ld	r24, Z
    3636:	eb 89       	ldd	r30, Y+19	; 0x13
    3638:	fc 89       	ldd	r31, Y+20	; 0x14
    363a:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	8f 87       	std	Y+15, r24	; 0x0f
    3640:	07 c0       	rjmp	.+14     	; 0x3650 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3642:	88 89       	ldd	r24, Y+16	; 0x10
    3644:	8f 5f       	subi	r24, 0xFF	; 255
    3646:	88 8b       	std	Y+16, r24	; 0x10
    3648:	88 89       	ldd	r24, Y+16	; 0x10
    364a:	84 30       	cpi	r24, 0x04	; 4
    364c:	08 f4       	brcc	.+2      	; 0x3650 <KPD_ES_tGetKeyPressed+0x1d6>
    364e:	3b cf       	rjmp	.-394    	; 0x34c6 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    3650:	89 89       	ldd	r24, Y+17	; 0x11
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	fc 01       	movw	r30, r24
    3658:	ef 5d       	subi	r30, 0xDF	; 223
    365a:	fe 4f       	sbci	r31, 0xFE	; 254
    365c:	90 81       	ld	r25, Z
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	69 2f       	mov	r22, r25
    3662:	41 e0       	ldi	r20, 0x01	; 1
    3664:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3668:	8f 85       	ldd	r24, Y+15	; 0x0f
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	39 f0       	breq	.+14     	; 0x367c <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    366e:	89 89       	ldd	r24, Y+17	; 0x11
    3670:	8f 5f       	subi	r24, 0xFF	; 255
    3672:	89 8b       	std	Y+17, r24	; 0x11
    3674:	89 89       	ldd	r24, Y+17	; 0x11
    3676:	84 30       	cpi	r24, 0x04	; 4
    3678:	08 f4       	brcc	.+2      	; 0x367c <KPD_ES_tGetKeyPressed+0x202>
    367a:	17 cf       	rjmp	.-466    	; 0x34aa <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    367c:	1d 8a       	std	Y+21, r1	; 0x15
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	8d 8b       	std	Y+21, r24	; 0x15
    3684:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3686:	65 96       	adiw	r28, 0x15	; 21
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <main>:




int main()
{
    3698:	0f 93       	push	r16
    369a:	1f 93       	push	r17
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	2f 97       	sbiw	r28, 0x0f	; 15
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	de bf       	out	0x3e, r29	; 62
    36ac:	0f be       	out	0x3f, r0	; 63
    36ae:	cd bf       	out	0x3d, r28	; 61
	// Seven segment port
	DIO_ES_tSetPortDirection(DIO_U8_PORT_A, OUTPUT);
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	61 e0       	ldi	r22, 0x01	; 1
    36b4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <DIO_ES_tSetPortDirection>

	u8 data=0;
    36b8:	1f 86       	std	Y+15, r1	; 0x0f

	SPI_Slave_Init();
    36ba:	0e 94 21 0a 	call	0x1442	; 0x1442 <SPI_Slave_Init>

	for(data=255;data>=0;data--)
    36be:	8f ef       	ldi	r24, 0xFF	; 255
    36c0:	8f 87       	std	Y+15, r24	; 0x0f
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	aa e7       	ldi	r26, 0x7A	; 122
    36c8:	b4 e4       	ldi	r27, 0x44	; 68
    36ca:	8b 87       	std	Y+11, r24	; 0x0b
    36cc:	9c 87       	std	Y+12, r25	; 0x0c
    36ce:	ad 87       	std	Y+13, r26	; 0x0d
    36d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	4a e7       	ldi	r20, 0x7A	; 122
    36e0:	55 e4       	ldi	r21, 0x45	; 69
    36e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	8f 83       	std	Y+7, r24	; 0x07
    36ec:	98 87       	std	Y+8, r25	; 0x08
    36ee:	a9 87       	std	Y+9, r26	; 0x09
    36f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f2:	6f 81       	ldd	r22, Y+7	; 0x07
    36f4:	78 85       	ldd	r23, Y+8	; 0x08
    36f6:	89 85       	ldd	r24, Y+9	; 0x09
    36f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e8       	ldi	r20, 0x80	; 128
    3700:	5f e3       	ldi	r21, 0x3F	; 63
    3702:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3706:	88 23       	and	r24, r24
    3708:	2c f4       	brge	.+10     	; 0x3714 <main+0x7c>
		__ticks = 1;
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	9e 83       	std	Y+6, r25	; 0x06
    3710:	8d 83       	std	Y+5, r24	; 0x05
    3712:	3f c0       	rjmp	.+126    	; 0x3792 <main+0xfa>
	else if (__tmp > 65535)
    3714:	6f 81       	ldd	r22, Y+7	; 0x07
    3716:	78 85       	ldd	r23, Y+8	; 0x08
    3718:	89 85       	ldd	r24, Y+9	; 0x09
    371a:	9a 85       	ldd	r25, Y+10	; 0x0a
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	3f ef       	ldi	r19, 0xFF	; 255
    3720:	4f e7       	ldi	r20, 0x7F	; 127
    3722:	57 e4       	ldi	r21, 0x47	; 71
    3724:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3728:	18 16       	cp	r1, r24
    372a:	4c f5       	brge	.+82     	; 0x377e <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372c:	6b 85       	ldd	r22, Y+11	; 0x0b
    372e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3730:	8d 85       	ldd	r24, Y+13	; 0x0d
    3732:	9e 85       	ldd	r25, Y+14	; 0x0e
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e2       	ldi	r20, 0x20	; 32
    373a:	51 e4       	ldi	r21, 0x41	; 65
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9e 83       	std	Y+6, r25	; 0x06
    3752:	8d 83       	std	Y+5, r24	; 0x05
    3754:	0f c0       	rjmp	.+30     	; 0x3774 <main+0xdc>
    3756:	80 e9       	ldi	r24, 0x90	; 144
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	9c 83       	std	Y+4, r25	; 0x04
    375c:	8b 83       	std	Y+3, r24	; 0x03
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	9c 81       	ldd	r25, Y+4	; 0x04
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	f1 f7       	brne	.-4      	; 0x3762 <main+0xca>
    3766:	9c 83       	std	Y+4, r25	; 0x04
    3768:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376a:	8d 81       	ldd	r24, Y+5	; 0x05
    376c:	9e 81       	ldd	r25, Y+6	; 0x06
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	9e 83       	std	Y+6, r25	; 0x06
    3772:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3774:	8d 81       	ldd	r24, Y+5	; 0x05
    3776:	9e 81       	ldd	r25, Y+6	; 0x06
    3778:	00 97       	sbiw	r24, 0x00	; 0
    377a:	69 f7       	brne	.-38     	; 0x3756 <main+0xbe>
    377c:	14 c0       	rjmp	.+40     	; 0x37a6 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377e:	6f 81       	ldd	r22, Y+7	; 0x07
    3780:	78 85       	ldd	r23, Y+8	; 0x08
    3782:	89 85       	ldd	r24, Y+9	; 0x09
    3784:	9a 85       	ldd	r25, Y+10	; 0x0a
    3786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	9a 83       	std	Y+2, r25	; 0x02
    3798:	89 83       	std	Y+1, r24	; 0x01
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	9a 81       	ldd	r25, Y+2	; 0x02
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <main+0x106>
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1000);
		PORTA = SPI_Slave_Transmit_Receive(data);
    37a6:	0b e3       	ldi	r16, 0x3B	; 59
    37a8:	10 e0       	ldi	r17, 0x00	; 0
    37aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ac:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <SPI_Slave_Transmit_Receive>
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 83       	st	Z, r24

	u8 data=0;

	SPI_Slave_Init();

	for(data=255;data>=0;data--)
    37b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b6:	81 50       	subi	r24, 0x01	; 1
    37b8:	8f 87       	std	Y+15, r24	; 0x0f
    37ba:	83 cf       	rjmp	.-250    	; 0x36c2 <main+0x2a>

000037bc <__udivmodhi4>:
    37bc:	aa 1b       	sub	r26, r26
    37be:	bb 1b       	sub	r27, r27
    37c0:	51 e1       	ldi	r21, 0x11	; 17
    37c2:	07 c0       	rjmp	.+14     	; 0x37d2 <__udivmodhi4_ep>

000037c4 <__udivmodhi4_loop>:
    37c4:	aa 1f       	adc	r26, r26
    37c6:	bb 1f       	adc	r27, r27
    37c8:	a6 17       	cp	r26, r22
    37ca:	b7 07       	cpc	r27, r23
    37cc:	10 f0       	brcs	.+4      	; 0x37d2 <__udivmodhi4_ep>
    37ce:	a6 1b       	sub	r26, r22
    37d0:	b7 0b       	sbc	r27, r23

000037d2 <__udivmodhi4_ep>:
    37d2:	88 1f       	adc	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	5a 95       	dec	r21
    37d8:	a9 f7       	brne	.-22     	; 0x37c4 <__udivmodhi4_loop>
    37da:	80 95       	com	r24
    37dc:	90 95       	com	r25
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	08 95       	ret

000037e4 <__prologue_saves__>:
    37e4:	2f 92       	push	r2
    37e6:	3f 92       	push	r3
    37e8:	4f 92       	push	r4
    37ea:	5f 92       	push	r5
    37ec:	6f 92       	push	r6
    37ee:	7f 92       	push	r7
    37f0:	8f 92       	push	r8
    37f2:	9f 92       	push	r9
    37f4:	af 92       	push	r10
    37f6:	bf 92       	push	r11
    37f8:	cf 92       	push	r12
    37fa:	df 92       	push	r13
    37fc:	ef 92       	push	r14
    37fe:	ff 92       	push	r15
    3800:	0f 93       	push	r16
    3802:	1f 93       	push	r17
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	ca 1b       	sub	r28, r26
    380e:	db 0b       	sbc	r29, r27
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	09 94       	ijmp

0000381c <__epilogue_restores__>:
    381c:	2a 88       	ldd	r2, Y+18	; 0x12
    381e:	39 88       	ldd	r3, Y+17	; 0x11
    3820:	48 88       	ldd	r4, Y+16	; 0x10
    3822:	5f 84       	ldd	r5, Y+15	; 0x0f
    3824:	6e 84       	ldd	r6, Y+14	; 0x0e
    3826:	7d 84       	ldd	r7, Y+13	; 0x0d
    3828:	8c 84       	ldd	r8, Y+12	; 0x0c
    382a:	9b 84       	ldd	r9, Y+11	; 0x0b
    382c:	aa 84       	ldd	r10, Y+10	; 0x0a
    382e:	b9 84       	ldd	r11, Y+9	; 0x09
    3830:	c8 84       	ldd	r12, Y+8	; 0x08
    3832:	df 80       	ldd	r13, Y+7	; 0x07
    3834:	ee 80       	ldd	r14, Y+6	; 0x06
    3836:	fd 80       	ldd	r15, Y+5	; 0x05
    3838:	0c 81       	ldd	r16, Y+4	; 0x04
    383a:	1b 81       	ldd	r17, Y+3	; 0x03
    383c:	aa 81       	ldd	r26, Y+2	; 0x02
    383e:	b9 81       	ldd	r27, Y+1	; 0x01
    3840:	ce 0f       	add	r28, r30
    3842:	d1 1d       	adc	r29, r1
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	ed 01       	movw	r28, r26
    3850:	08 95       	ret

00003852 <_exit>:
    3852:	f8 94       	cli

00003854 <__stop_program>:
    3854:	ff cf       	rjmp	.-2      	; 0x3854 <__stop_program>
