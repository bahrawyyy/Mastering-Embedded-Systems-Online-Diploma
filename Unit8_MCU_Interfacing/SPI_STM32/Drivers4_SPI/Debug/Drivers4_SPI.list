
Drivers4_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e14  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f5c  08000f5c  00010f64  2**0
                  CONTENTS
  4 .ARM          00000000  08000f5c  08000f5c  00010f64  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f5c  08000f64  00010f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000f64  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f64  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f64  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051c5  00000000  00000000  00010f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c6e  00000000  00000000  00016152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d28  00000000  00000000  00016dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000dd5  00000000  00000000  00017ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002860  00000000  00000000  00018ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a6ef  00000000  00000000  0001b505  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025bf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006dc  00000000  00000000  00025c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f2c 	.word	0x08000f2c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f2c 	.word	0x08000f2c

08000170 <OUR_UART_IRQ_CallBack>:
#endif

}

void OUR_UART_IRQ_CallBack(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART1, &ch, Disable);
 8000174:	2200      	movs	r2, #0
 8000176:	490d      	ldr	r1, [pc, #52]	; (80001ac <OUR_UART_IRQ_CallBack+0x3c>)
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <OUR_UART_IRQ_CallBack+0x40>)
 800017a:	f000 fe01 	bl	8000d80 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, Enable);
 800017e:	2201      	movs	r2, #1
 8000180:	490a      	ldr	r1, [pc, #40]	; (80001ac <OUR_UART_IRQ_CallBack+0x3c>)
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <OUR_UART_IRQ_CallBack+0x40>)
 8000184:	f000 fde0 	bl	8000d48 <MCAL_UART_SendData>
	// Send to SPI
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_LOW);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4809      	ldr	r0, [pc, #36]	; (80001b4 <OUR_UART_IRQ_CallBack+0x44>)
 800018e:	f000 fa9d 	bl	80006cc <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, Polling_Enable);
 8000192:	2201      	movs	r2, #1
 8000194:	4905      	ldr	r1, [pc, #20]	; (80001ac <OUR_UART_IRQ_CallBack+0x3c>)
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <OUR_UART_IRQ_CallBack+0x48>)
 8000198:	f000 fb98 	bl	80008cc <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_HIGH);
 800019c:	2201      	movs	r2, #1
 800019e:	2110      	movs	r1, #16
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <OUR_UART_IRQ_CallBack+0x44>)
 80001a2:	f000 fa93 	bl	80006cc <MCAL_GPIO_WritePin>
#endif

}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000028 	.word	0x20000028
 80001b0:	40013800 	.word	0x40013800
 80001b4:	40010800 	.word	0x40010800
 80001b8:	40013000 	.word	0x40013000

080001bc <main>:



int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b08c      	sub	sp, #48	; 0x30
 80001c0:	af00      	add	r7, sp, #0
	// Enable clock
	RCC_GPIOA_CLK_EN();
 80001c2:	4b2f      	ldr	r3, [pc, #188]	; (8000280 <main+0xc4>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	4a2e      	ldr	r2, [pc, #184]	; (8000280 <main+0xc4>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001ce:	4b2c      	ldr	r3, [pc, #176]	; (8000280 <main+0xc4>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	4a2b      	ldr	r2, [pc, #172]	; (8000280 <main+0xc4>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001da:	4b29      	ldr	r3, [pc, #164]	; (8000280 <main+0xc4>)
 80001dc:	699b      	ldr	r3, [r3, #24]
 80001de:	4a28      	ldr	r2, [pc, #160]	; (8000280 <main+0xc4>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6193      	str	r3, [r2, #24]

	// UART Initialization

	UART_Config UartCfg;
	UartCfg.BaudRate = UART_BaudRate_115200;
 80001e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001ea:	623b      	str	r3, [r7, #32]
	UartCfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 80001ec:	2300      	movs	r3, #0
 80001ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	UartCfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 80001f2:	2320      	movs	r3, #32
 80001f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	UartCfg.P_IRQ_CallBack = OUR_UART_IRQ_CallBack;
 80001f8:	4b22      	ldr	r3, [pc, #136]	; (8000284 <main+0xc8>)
 80001fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	UartCfg.Payload_length = UART_Payload_Length_8B;
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UartCfg.Parity = UART_Parity_NONE;
 8000202:	2300      	movs	r3, #0
 8000204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UartCfg.StopBits = UART_StopBits_1;
 8000208:	2300      	movs	r3, #0
 800020a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UartCfg.USART_Mode = UART_Mode_Tx_Rx;
 800020e:	230c      	movs	r3, #12
 8000210:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1, &UartCfg);
 8000212:	f107 031c 	add.w	r3, r7, #28
 8000216:	4619      	mov	r1, r3
 8000218:	481b      	ldr	r0, [pc, #108]	; (8000288 <main+0xcc>)
 800021a:	f000 fcd3 	bl	8000bc4 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 800021e:	481a      	ldr	r0, [pc, #104]	; (8000288 <main+0xcc>)
 8000220:	f000 fddc 	bl	8000ddc <MCAL_UART_GPIO_SetPins>
	// SPI Initialization


	// Common Configurations
	SPI_Config SPI_Cfg;
	SPI_Cfg.CLKPhase = SPI_Clock_Phase_SECOND_EDGE;
 8000224:	2301      	movs	r3, #1
 8000226:	81fb      	strh	r3, [r7, #14]
	SPI_Cfg.CLKPolarity = SPI_Clock_Polarity_IDLE_HIGH;
 8000228:	2302      	movs	r3, #2
 800022a:	81bb      	strh	r3, [r7, #12]
	SPI_Cfg.DataSize = SPI_Data_Size_8BIT;
 800022c:	2300      	movs	r3, #0
 800022e:	817b      	strh	r3, [r7, #10]
	SPI_Cfg.Frame_Format = SPI_Frame_Format_MSBFIRST;
 8000230:	2300      	movs	r3, #0
 8000232:	813b      	strh	r3, [r7, #8]
	// Assume by default PCLK2 = 8MHz
	SPI_Cfg.Baudrate_Prescalar = SPI_Baudrate_Prescalar_8;
 8000234:	2310      	movs	r3, #16
 8000236:	827b      	strh	r3, [r7, #18]
	SPI_Cfg.Communication_Mode = SPI_Communication_Mode_2LINES;
 8000238:	2300      	movs	r3, #0
 800023a:	80fb      	strh	r3, [r7, #6]


#ifdef MCU_Act_As_Master
	SPI_Cfg.Device_Mode = SPI_Device_Mode_Master;
 800023c:	2304      	movs	r3, #4
 800023e:	80bb      	strh	r3, [r7, #4]
	SPI_Cfg.IRQ_Enable = SPI_IRQ_NONE;
 8000240:	2300      	movs	r3, #0
 8000242:	82bb      	strh	r3, [r7, #20]
	SPI_Cfg.NSS = SPI_NSS_InternalSlaveSelect_Set;    // To use a gpio as a slave select and I'm the one who controls it
 8000244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000248:	823b      	strh	r3, [r7, #16]
	SPI_Cfg.P_IRQ_CallBack = NULL;
 800024a:	2300      	movs	r3, #0
 800024c:	61bb      	str	r3, [r7, #24]
	// Configure SS on PORTA PIN4 by GPIO
	// output enabled Alternate function push-pull


	GPIO_PinConfig_t GPIO_Cfg;
	GPIO_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800024e:	2304      	movs	r3, #4
 8000250:	70bb      	strb	r3, [r7, #2]
	GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 8000252:	2310      	movs	r3, #16
 8000254:	803b      	strh	r3, [r7, #0]
	GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000256:	2301      	movs	r3, #1
 8000258:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 800025a:	463b      	mov	r3, r7
 800025c:	4619      	mov	r1, r3
 800025e:	480b      	ldr	r0, [pc, #44]	; (800028c <main+0xd0>)
 8000260:	f000 f9b5 	bl	80005ce <MCAL_GPIO_Init>


	// Force the slave select to be high (idle mode)
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_HIGH);
 8000264:	2201      	movs	r2, #1
 8000266:	2110      	movs	r1, #16
 8000268:	4808      	ldr	r0, [pc, #32]	; (800028c <main+0xd0>)
 800026a:	f000 fa2f 	bl	80006cc <MCAL_GPIO_WritePin>
	SPI_Cfg.IRQ_Enable = SPI_IRQ_RXNEIE;
	SPI_Cfg.NSS = SPI_NSS_HW_SLAVE;
	SPI_Cfg.P_IRQ_CallBack = OUR_SPI_IRQ_CallBack;
#endif

	MCAL_SPI_Init(SPI1, &SPI_Cfg);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4619      	mov	r1, r3
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0xd4>)
 8000274:	f000 fa9c 	bl	80007b0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0xd4>)
 800027a:	f000 fb51 	bl	8000920 <MCAL_SPI_GPIO_Set_Pins>



	while(1)
 800027e:	e7fe      	b.n	800027e <main+0xc2>
 8000280:	40021000 	.word	0x40021000
 8000284:	08000171 	.word	0x08000171
 8000288:	40013800 	.word	0x40013800
 800028c:	40010800 	.word	0x40010800
 8000290:	40013000 	.word	0x40013000

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 fe0f 	bl	8000ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ff79 	bl	80001bc <main>

080002ca <LoopForever>:

LoopForever:
    b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000f64 	.word	0x08000f64
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	20000068 	.word	0x20000068

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI0_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI0_IRQHandler+0x1c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI0_IRQHandler+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4798      	blx	r3

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	2000002c 	.word	0x2000002c

0800030c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI1_IRQHandler+0x1c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <EXTI1_IRQHandler+0x1c>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <EXTI1_IRQHandler+0x20>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	4798      	blx	r3
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010400 	.word	0x40010400
 800032c:	2000002c 	.word	0x2000002c

08000330 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <EXTI2_IRQHandler+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <EXTI2_IRQHandler+0x1c>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <EXTI2_IRQHandler+0x20>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4798      	blx	r3
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	2000002c 	.word	0x2000002c

08000354 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI3_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI3_IRQHandler+0x1c>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI3_IRQHandler+0x20>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4798      	blx	r3
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	2000002c 	.word	0x2000002c

08000378 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI4_IRQHandler+0x1c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI4_IRQHandler+0x1c>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI4_IRQHandler+0x20>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	4798      	blx	r3
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	2000002c 	.word	0x2000002c

0800039c <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x22>
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 80003be:	4b1f      	ldr	r3, [pc, #124]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x40>
 80003ca:	4b1c      	ldr	r3, [pc, #112]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a1b      	ldr	r2, [pc, #108]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x5e>
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a13      	ldr	r2, [pc, #76]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000402:	2b00      	cmp	r3, #0
 8000404:	d008      	beq.n	8000418 <EXTI9_5_IRQHandler+0x7c>
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a0c      	ldr	r2, [pc, #48]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 800040c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 8000414:	6a1b      	ldr	r3, [r3, #32]
 8000416:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000420:	2b00      	cmp	r3, #0
 8000422:	d008      	beq.n	8000436 <EXTI9_5_IRQHandler+0x9a>
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI9_5_IRQHandler+0xa0>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6153      	str	r3, [r2, #20]
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <EXTI9_5_IRQHandler+0xa4>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000434:	4798      	blx	r3
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010400 	.word	0x40010400
 8000440:	2000002c 	.word	0x2000002c

08000444 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x22>
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a29      	ldr	r2, [pc, #164]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 8000462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000464:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x40>
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a22      	ldr	r2, [pc, #136]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 8000480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000482:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x5e>
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0x7c>
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a13      	ldr	r2, [pc, #76]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004be:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d008      	beq.n	80004de <EXTI15_10_IRQHandler+0x9a>
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	6153      	str	r3, [r2, #20]
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004dc:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <EXTI15_10_IRQHandler+0xb8>
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b03      	ldr	r3, [pc, #12]	; (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fa:	4798      	blx	r3
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010400 	.word	0x40010400
 8000504:	2000002c 	.word	0x2000002c

08000508 <Get_CRLH_Position>:
#include "Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2b80      	cmp	r3, #128	; 0x80
 8000516:	d042      	beq.n	800059e <Get_CRLH_Position+0x96>
 8000518:	2b80      	cmp	r3, #128	; 0x80
 800051a:	dc11      	bgt.n	8000540 <Get_CRLH_Position+0x38>
 800051c:	2b08      	cmp	r3, #8
 800051e:	d036      	beq.n	800058e <Get_CRLH_Position+0x86>
 8000520:	2b08      	cmp	r3, #8
 8000522:	dc06      	bgt.n	8000532 <Get_CRLH_Position+0x2a>
 8000524:	2b02      	cmp	r3, #2
 8000526:	d02e      	beq.n	8000586 <Get_CRLH_Position+0x7e>
 8000528:	2b04      	cmp	r3, #4
 800052a:	d02e      	beq.n	800058a <Get_CRLH_Position+0x82>
 800052c:	2b01      	cmp	r3, #1
 800052e:	d028      	beq.n	8000582 <Get_CRLH_Position+0x7a>
 8000530:	e047      	b.n	80005c2 <Get_CRLH_Position+0xba>
 8000532:	2b20      	cmp	r3, #32
 8000534:	d02f      	beq.n	8000596 <Get_CRLH_Position+0x8e>
 8000536:	2b40      	cmp	r3, #64	; 0x40
 8000538:	d02f      	beq.n	800059a <Get_CRLH_Position+0x92>
 800053a:	2b10      	cmp	r3, #16
 800053c:	d029      	beq.n	8000592 <Get_CRLH_Position+0x8a>
 800053e:	e040      	b.n	80005c2 <Get_CRLH_Position+0xba>
 8000540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000544:	d033      	beq.n	80005ae <Get_CRLH_Position+0xa6>
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	dc09      	bgt.n	8000560 <Get_CRLH_Position+0x58>
 800054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000550:	d029      	beq.n	80005a6 <Get_CRLH_Position+0x9e>
 8000552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000556:	d028      	beq.n	80005aa <Get_CRLH_Position+0xa2>
 8000558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800055c:	d021      	beq.n	80005a2 <Get_CRLH_Position+0x9a>
 800055e:	e030      	b.n	80005c2 <Get_CRLH_Position+0xba>
 8000560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000564:	d027      	beq.n	80005b6 <Get_CRLH_Position+0xae>
 8000566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056a:	dc03      	bgt.n	8000574 <Get_CRLH_Position+0x6c>
 800056c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000570:	d01f      	beq.n	80005b2 <Get_CRLH_Position+0xaa>
 8000572:	e026      	b.n	80005c2 <Get_CRLH_Position+0xba>
 8000574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000578:	d01f      	beq.n	80005ba <Get_CRLH_Position+0xb2>
 800057a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800057e:	d01e      	beq.n	80005be <Get_CRLH_Position+0xb6>
 8000580:	e01f      	b.n	80005c2 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e01e      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000586:	2304      	movs	r3, #4
 8000588:	e01c      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800058a:	2308      	movs	r3, #8
 800058c:	e01a      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800058e:	230c      	movs	r3, #12
 8000590:	e018      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000592:	2310      	movs	r3, #16
 8000594:	e016      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000596:	2314      	movs	r3, #20
 8000598:	e014      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800059a:	2318      	movs	r3, #24
 800059c:	e012      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800059e:	231c      	movs	r3, #28
 80005a0:	e010      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e00e      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	e00c      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80005aa:	2308      	movs	r3, #8
 80005ac:	e00a      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80005ae:	230c      	movs	r3, #12
 80005b0:	e008      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80005b2:	2310      	movs	r3, #16
 80005b4:	e006      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80005b6:	2314      	movs	r3, #20
 80005b8:	e004      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80005ba:	2318      	movs	r3, #24
 80005bc:	e002      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80005be:	231c      	movs	r3, #28
 80005c0:	e000      	b.n	80005c4 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80005ce:	b590      	push	{r4, r7, lr}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	d801      	bhi.n	80005ec <MCAL_GPIO_Init+0x1e>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	e001      	b.n	80005f0 <MCAL_GPIO_Init+0x22>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff86 	bl	8000508 <Get_CRLH_Position>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	230f      	movs	r3, #15
 8000602:	4093      	lsls	r3, r2
 8000604:	43da      	mvns	r2, r3
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	401a      	ands	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b07      	cmp	r3, #7
 8000616:	d00b      	beq.n	8000630 <MCAL_GPIO_Init+0x62>
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d007      	beq.n	8000630 <MCAL_GPIO_Init+0x62>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	2b05      	cmp	r3, #5
 8000626:	d003      	beq.n	8000630 <MCAL_GPIO_Init+0x62>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d10e      	bne.n	800064e <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	3b04      	subs	r3, #4
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b25a      	sxtb	r2, r3
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e02c      	b.n	80006a8 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d003      	beq.n	800065e <MCAL_GPIO_Init+0x90>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e01c      	b.n	80006a8 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	2b08      	cmp	r3, #8
 8000674:	d102      	bne.n	800067c <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8000676:	2304      	movs	r3, #4
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e015      	b.n	80006a8 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 800067c:	2308      	movs	r3, #8
 800067e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	789b      	ldrb	r3, [r3, #2]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d107      	bne.n	8000698 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	431a      	orrs	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	e007      	b.n	80006a8 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	8812      	ldrh	r2, [r2, #0]
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006a8:	7bfc      	ldrb	r4, [r7, #15]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff2a 	bl	8000508 <Get_CRLH_Position>
 80006b4:	4603      	mov	r3, r0
 80006b6:	fa04 f203 	lsl.w	r2, r4, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	431a      	orrs	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	601a      	str	r2, [r3, #0]


}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}

080006cc <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
 80006d8:	4613      	mov	r3, r2
 80006da:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 80006dc:	787b      	ldrb	r3, [r7, #1]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80006e2:	887a      	ldrh	r2, [r7, #2]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80006e8:	e002      	b.n	80006f0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80006ea:	887a      	ldrh	r2, [r7, #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	615a      	str	r2, [r3, #20]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <MCAL_RCC_GetSYSCLKFreq>:
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: not applicable

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MCAL_RCC_GetSYSCLKFreq+0x30>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	089b      	lsrs	r3, r3, #2
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	2b01      	cmp	r3, #1
 800070c:	d006      	beq.n	800071c <MCAL_RCC_GetSYSCLKFreq+0x20>
 800070e:	2b01      	cmp	r3, #1
 8000710:	d302      	bcc.n	8000718 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 8000712:	2b02      	cmp	r3, #2
 8000714:	d004      	beq.n	8000720 <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000716:	e005      	b.n	8000724 <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 800071a:	e003      	b.n	8000724 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	case 1:
		// To do
		return HSE_RC_CLK;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 800071e:	e001      	b.n	8000724 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	case 2:
		// To do
		return 16000000;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000722:	e7ff      	b.n	8000724 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	}
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000
 8000730:	007a1200 	.word	0x007a1200
 8000734:	00f42400 	.word	0x00f42400

08000738 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return ( MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[((RCC->CFGR >> 4) & 0xF)] );
 800073c:	f7ff ffde 	bl	80006fc <MCAL_RCC_GetSYSCLKFreq>
 8000740:	4601      	mov	r1, r0
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	091b      	lsrs	r3, r3, #4
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <MCAL_RCC_GetHCLKFreq+0x24>)
 800074e:	5cd3      	ldrb	r3, [r2, r3]
 8000750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	08000f4c 	.word	0x08000f4c

08000760 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)] );
 8000764:	f7ff ffe8 	bl	8000738 <MCAL_RCC_GetHCLKFreq>
 8000768:	4601      	mov	r1, r0
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	f003 0307 	and.w	r3, r3, #7
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000776:	5cd3      	ldrb	r3, [r2, r3]
 8000778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	08000f44 	.word	0x08000f44

08000788 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 11) & 0b111)] );
 800078c:	f7ff ffd4 	bl	8000738 <MCAL_RCC_GetHCLKFreq>
 8000790:	4601      	mov	r1, r0
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	0adb      	lsrs	r3, r3, #11
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	4a03      	ldr	r2, [pc, #12]	; (80007ac <MCAL_RCC_GetPCLK2Freq+0x24>)
 800079e:	5cd3      	ldrb	r3, [r2, r3]
 80007a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	08000f44 	.word	0x08000f44

080007b0 <MCAL_SPI_Init>:
 * 						in case of master you have to configure pin and drive it
 */


void MCAL_SPI_Init(SPI_Typedef* SPIx, SPI_Config* SPI_Cfg)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	// Safety for registers
	// To prevent SPI from running before completing all configurations
	uint16_t tmpreg_CR1 = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	81bb      	strh	r3, [r7, #12]


	if(SPIx == SPI1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <MCAL_SPI_Init+0x108>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d109      	bne.n	80007de <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_INDEX] = SPI_Cfg;
 80007ca:	4a3c      	ldr	r2, [pc, #240]	; (80008bc <MCAL_SPI_Init+0x10c>)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80007d0:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <MCAL_SPI_Init+0x110>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <MCAL_SPI_Init+0x110>)
 80007d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	e00c      	b.n	80007f8 <MCAL_SPI_Init+0x48>
	}else if(SPIx == SPI2)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a38      	ldr	r2, [pc, #224]	; (80008c4 <MCAL_SPI_Init+0x114>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d108      	bne.n	80007f8 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_INDEX] = SPI_Cfg;
 80007e6:	4a35      	ldr	r2, [pc, #212]	; (80008bc <MCAL_SPI_Init+0x10c>)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MCAL_SPI_Init+0x110>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <MCAL_SPI_Init+0x110>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	61d3      	str	r3, [r2, #28]
	}


	// Enable SPI (CR1:6 SPE)
	tmpreg_CR1 |= (1<<6);
 80007f8:	89fb      	ldrh	r3, [r7, #14]
 80007fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fe:	81fb      	strh	r3, [r7, #14]


	// Master or slave
	tmpreg_CR1 |= SPI_Cfg->Device_Mode;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	89fb      	ldrh	r3, [r7, #14]
 8000806:	4313      	orrs	r3, r2
 8000808:	81fb      	strh	r3, [r7, #14]


	// SPI Communication mode
	tmpreg_CR1 |= SPI_Cfg->Communication_Mode;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	885a      	ldrh	r2, [r3, #2]
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	4313      	orrs	r3, r2
 8000812:	81fb      	strh	r3, [r7, #14]


	// SPI frame format
	tmpreg_CR1 |= SPI_Cfg->Frame_Format;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	889a      	ldrh	r2, [r3, #4]
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	4313      	orrs	r3, r2
 800081c:	81fb      	strh	r3, [r7, #14]


	// Data size
	tmpreg_CR1 |= SPI_Cfg->DataSize;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	88da      	ldrh	r2, [r3, #6]
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	4313      	orrs	r3, r2
 8000826:	81fb      	strh	r3, [r7, #14]


	// Clock polarity
	tmpreg_CR1 |= SPI_Cfg->CLKPolarity;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	891a      	ldrh	r2, [r3, #8]
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	4313      	orrs	r3, r2
 8000830:	81fb      	strh	r3, [r7, #14]


	// Clock phase
	tmpreg_CR1 |= SPI_Cfg->CLKPhase;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	895a      	ldrh	r2, [r3, #10]
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	4313      	orrs	r3, r2
 800083a:	81fb      	strh	r3, [r7, #14]


	// ===================== NSS ===================

	if(SPI_Cfg->NSS == SPI_NSS_HW_MASTER_Output_Enabled)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d105      	bne.n	8000850 <MCAL_SPI_Init+0xa0>
	{
		tmpreg_CR2 |= SPI_Cfg->NSS;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	899a      	ldrh	r2, [r3, #12]
 8000848:	89bb      	ldrh	r3, [r7, #12]
 800084a:	4313      	orrs	r3, r2
 800084c:	81bb      	strh	r3, [r7, #12]
 800084e:	e004      	b.n	800085a <MCAL_SPI_Init+0xaa>
	}else if(SPI_Cfg->NSS == SPI_NSS_HW_MASTER_Output_Disabled)
	{
		tmpreg_CR2 &= SPI_Cfg->NSS;
	}else
	{
		tmpreg_CR1 |= SPI_Cfg->NSS;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	899a      	ldrh	r2, [r3, #12]
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	4313      	orrs	r3, r2
 8000858:	81fb      	strh	r3, [r7, #14]
	}


	// SPI Baud rate
	tmpreg_CR1 |= SPI_Cfg->Baudrate_Prescalar;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	89da      	ldrh	r2, [r3, #14]
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	4313      	orrs	r3, r2
 8000862:	81fb      	strh	r3, [r7, #14]



	// ===================== IRQ ==================

	if(SPI_Cfg->IRQ_Enable != SPI_IRQ_NONE)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	8a1b      	ldrh	r3, [r3, #16]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d019      	beq.n	80008a0 <MCAL_SPI_Init+0xf0>
	{
		tmpreg_CR2 |= SPI_Cfg->IRQ_Enable;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	8a1a      	ldrh	r2, [r3, #16]
 8000870:	89bb      	ldrh	r3, [r7, #12]
 8000872:	4313      	orrs	r3, r2
 8000874:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <MCAL_SPI_Init+0x108>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <MCAL_SPI_Init+0xdc>
			NVIC_IRQ35_SPI1_Enable;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MCAL_SPI_Init+0x118>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <MCAL_SPI_Init+0x118>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e009      	b.n	80008a0 <MCAL_SPI_Init+0xf0>
		}else if(SPIx == SPI2){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <MCAL_SPI_Init+0x114>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d105      	bne.n	80008a0 <MCAL_SPI_Init+0xf0>
			NVIC_IRQ36_SPI2_Enable;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MCAL_SPI_Init+0x118>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <MCAL_SPI_Init+0x118>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
		}
	}
	SPIx->CR1 = tmpreg_CR1;
 80008a0:	89fa      	ldrh	r2, [r7, #14]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpreg_CR2;
 80008a6:	89ba      	ldrh	r2, [r7, #12]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40013000 	.word	0x40013000
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40003800 	.word	0x40003800
 80008c8:	e000e104 	.word	0xe000e104

080008cc <MCAL_SPI_TX_RX>:
 * Note					- None
 */


void MCAL_SPI_TX_RX(SPI_Typedef* SPIx, uint16_t *pTxBuffer, enum PollingMechanism PollingEn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	71fb      	strb	r3, [r7, #7]
	if(PollingEn == Polling_Enable)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d106      	bne.n	80008ee <MCAL_SPI_TX_RX+0x22>
		while(!((SPIx->SR) & SPI_SR_TXE));
 80008e0:	bf00      	nop
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *pTxBuffer;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	60da      	str	r2, [r3, #12]

	if(PollingEn == Polling_Enable)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d106      	bne.n	800090c <MCAL_SPI_TX_RX+0x40>
		while(!((SPIx->SR) & SPI_SR_RXNE));
 80008fe:	bf00      	nop
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0f9      	beq.n	8000900 <MCAL_SPI_TX_RX+0x34>
	*pTxBuffer = SPIx->DR;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	b29a      	uxth	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	801a      	strh	r2, [r3, #0]

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <MCAL_SPI_GPIO_Set_Pins>:
 * Note					- None
 */


void MCAL_SPI_GPIO_Set_Pins(SPI_Typedef* SPIx)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t GPIO_Cfg;


	if(SPIx == SPI1){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a73      	ldr	r2, [pc, #460]	; (8000af8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d169      	bne.n	8000a04 <MCAL_SPI_GPIO_Set_Pins+0xe4>
		// PA4 : NSS
		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_Master)
 8000930:	4b72      	ldr	r3, [pc, #456]	; (8000afc <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d134      	bne.n	80009a4 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{

			switch(Global_SPI_Config[SPI1_INDEX]->NSS){
 800093a:	4b70      	ldr	r3, [pc, #448]	; (8000afc <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	899b      	ldrh	r3, [r3, #12]
 8000940:	2b04      	cmp	r3, #4
 8000942:	d10c      	bne.n	800095e <MCAL_SPI_GPIO_Set_Pins+0x3e>
				GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_4;
				MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
				break;
			case SPI_NSS_HW_MASTER_Output_Enabled:
				// Hardware master/ NSS output enabled Alternate function push-pull
				GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000944:	2306      	movs	r3, #6
 8000946:	75bb      	strb	r3, [r7, #22]
				GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 8000948:	2310      	movs	r3, #16
 800094a:	82bb      	strh	r3, [r7, #20]
				GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800094c:	2301      	movs	r3, #1
 800094e:	75fb      	strb	r3, [r7, #23]
				MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	486a      	ldr	r0, [pc, #424]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000958:	f7ff fe39 	bl	80005ce <MCAL_GPIO_Init>
				break;
 800095c:	bf00      	nop
			}

			// PA5 : SCK
			// Master Alternate function push-pull
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800095e:	2306      	movs	r3, #6
 8000960:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_5;
 8000962:	2320      	movs	r3, #32
 8000964:	82bb      	strh	r3, [r7, #20]
			GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000966:	2301      	movs	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4863      	ldr	r0, [pc, #396]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000972:	f7ff fe2c 	bl	80005ce <MCAL_GPIO_Init>


			// PA6 : MISO
			// Full duplex / master Input floating
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000976:	2301      	movs	r3, #1
 8000978:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_6;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	485e      	ldr	r0, [pc, #376]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000986:	f7ff fe22 	bl	80005ce <MCAL_GPIO_Init>

			// PA7 : MOSI
			// Full duplex / master Alternate function push-pull
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800098a:	2306      	movs	r3, #6
 800098c:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_7;
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	82bb      	strh	r3, [r7, #20]
			GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4858      	ldr	r0, [pc, #352]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800099e:	f7ff fe16 	bl	80005ce <MCAL_GPIO_Init>

		}

	}

}
 80009a2:	e0a4      	b.n	8000aee <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_HW_SLAVE){
 80009a4:	4b55      	ldr	r3, [pc, #340]	; (8000afc <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	899b      	ldrh	r3, [r3, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d109      	bne.n	80009c2 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80009ae:	2301      	movs	r3, #1
 80009b0:	75bb      	strb	r3, [r7, #22]
				GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 80009b2:	2310      	movs	r3, #16
 80009b4:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4850      	ldr	r0, [pc, #320]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80009be:	f7ff fe06 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80009c2:	2301      	movs	r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_5;
 80009c6:	2320      	movs	r3, #32
 80009c8:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	484b      	ldr	r0, [pc, #300]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80009d2:	f7ff fdfc 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80009d6:	2306      	movs	r3, #6
 80009d8:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_6;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	82bb      	strh	r3, [r7, #20]
			GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4845      	ldr	r0, [pc, #276]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80009ea:	f7ff fdf0 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80009ee:	2301      	movs	r3, #1
 80009f0:	74bb      	strb	r3, [r7, #18]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_7;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	823b      	strh	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOA, &GPIO_Cfg);
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4619      	mov	r1, r3
 80009fc:	4840      	ldr	r0, [pc, #256]	; (8000b00 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80009fe:	f7ff fde6 	bl	80005ce <MCAL_GPIO_Init>
}
 8000a02:	e074      	b.n	8000aee <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	}else if(SPIx == SPI2){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3f      	ldr	r2, [pc, #252]	; (8000b04 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d170      	bne.n	8000aee <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_Master)
 8000a0c:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d138      	bne.n	8000a88 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI1_INDEX]->NSS){
 8000a16:	4b39      	ldr	r3, [pc, #228]	; (8000afc <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	899b      	ldrh	r3, [r3, #12]
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d10d      	bne.n	8000a3c <MCAL_SPI_GPIO_Set_Pins+0x11c>
				GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000a20:	2306      	movs	r3, #6
 8000a22:	75bb      	strb	r3, [r7, #22]
				GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	82bb      	strh	r3, [r7, #20]
				GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	75fb      	strb	r3, [r7, #23]
				MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4834      	ldr	r0, [pc, #208]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a36:	f7ff fdca 	bl	80005ce <MCAL_GPIO_Init>
				break;
 8000a3a:	bf00      	nop
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000a3c:	2306      	movs	r3, #6
 8000a3e:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	82bb      	strh	r3, [r7, #20]
			GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a46:	2301      	movs	r3, #1
 8000a48:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482d      	ldr	r0, [pc, #180]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a52:	f7ff fdbc 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000a56:	2301      	movs	r3, #1
 8000a58:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_14;
 8000a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a5e:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4828      	ldr	r0, [pc, #160]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a68:	f7ff fdb1 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_15;
 8000a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a74:	82bb      	strh	r3, [r7, #20]
			GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000a76:	2301      	movs	r3, #1
 8000a78:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4821      	ldr	r0, [pc, #132]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a82:	f7ff fda4 	bl	80005ce <MCAL_GPIO_Init>
}
 8000a86:	e032      	b.n	8000aee <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_HW_SLAVE){
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	899b      	ldrh	r3, [r3, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10a      	bne.n	8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x188>
				GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000a92:	2301      	movs	r3, #1
 8000a94:	75bb      	strb	r3, [r7, #22]
				GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4819      	ldr	r0, [pc, #100]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000aa4:	f7ff fd93 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_13;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000aba:	f7ff fd88 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	75bb      	strb	r3, [r7, #22]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_14;
 8000ac2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ac6:	82bb      	strh	r3, [r7, #20]
			GPIO_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000ad4:	f7ff fd7b 	bl	80005ce <MCAL_GPIO_Init>
			GPIO_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73bb      	strb	r3, [r7, #14]
			GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_15;
 8000adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae0:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_Cfg);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000aea:	f7ff fd70 	bl	80005ce <MCAL_GPIO_Init>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40013000 	.word	0x40013000
 8000afc:	2000001c 	.word	0x2000001c
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40003800 	.word	0x40003800
 8000b08:	40010c00 	.word	0x40010c00

08000b0c <SPI1_IRQHandler>:
 */



void SPI1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = (((SPI1->SR) & (1<<1)) >> 1);
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <SPI1_IRQHandler+0x54>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	793b      	ldrb	r3, [r7, #4]
 8000b20:	f362 0300 	bfi	r3, r2, #0, #1
 8000b24:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (((SPI1->SR) & (1<<0)) >> 0);
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <SPI1_IRQHandler+0x54>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	793b      	ldrb	r3, [r7, #4]
 8000b32:	f362 0341 	bfi	r3, r2, #1, #1
 8000b36:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (((SPI1->SR) & (1<<4)) >> 4);
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <SPI1_IRQHandler+0x54>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	793b      	ldrb	r3, [r7, #4]
 8000b46:	f362 0382 	bfi	r3, r2, #2, #1
 8000b4a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SPI1_IRQHandler+0x58>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	7938      	ldrb	r0, [r7, #4]
 8000b54:	4798      	blx	r3
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	2000001c 	.word	0x2000001c

08000b68 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = (((SPI2->SR) & (1<<1)) >> 1);
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <SPI2_IRQHandler+0x54>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	085b      	lsrs	r3, r3, #1
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	793b      	ldrb	r3, [r7, #4]
 8000b7c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b80:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (((SPI2->SR) & (1<<0)) >> 0);
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <SPI2_IRQHandler+0x54>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	793b      	ldrb	r3, [r7, #4]
 8000b8e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b92:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (((SPI2->SR) & (1<<4)) >> 4);
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <SPI2_IRQHandler+0x54>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	793b      	ldrb	r3, [r7, #4]
 8000ba2:	f362 0382 	bfi	r3, r2, #2, #1
 8000ba6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SPI2_IRQHandler+0x58>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	7938      	ldrb	r0, [r7, #4]
 8000bb0:	4798      	blx	r3
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40003800 	.word	0x40003800
 8000bc0:	2000001c 	.word	0x2000001c

08000bc4 <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	uint32_t Pclk,BRR;


	Global_UART_Config = UARTCfg;   // To have backup
 8000bce:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <MCAL_UART_Init+0x168>)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6013      	str	r3, [r2, #0]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a56      	ldr	r2, [pc, #344]	; (8000d30 <MCAL_UART_Init+0x16c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d106      	bne.n	8000bea <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000bdc:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <MCAL_UART_Init+0x170>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a54      	ldr	r2, [pc, #336]	; (8000d34 <MCAL_UART_Init+0x170>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	e014      	b.n	8000c14 <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a52      	ldr	r2, [pc, #328]	; (8000d38 <MCAL_UART_Init+0x174>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000bf2:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <MCAL_UART_Init+0x170>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a4f      	ldr	r2, [pc, #316]	; (8000d34 <MCAL_UART_Init+0x170>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	e009      	b.n	8000c14 <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <MCAL_UART_Init+0x178>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d105      	bne.n	8000c14 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000c08:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <MCAL_UART_Init+0x170>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	4a49      	ldr	r2, [pc, #292]	; (8000d34 <MCAL_UART_Init+0x170>)
 8000c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c12:	61d3      	str	r3, [r2, #28]


	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	7a12      	ldrb	r2, [r2, #8]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	7a52      	ldrb	r2, [r2, #9]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	7a92      	ldrb	r2, [r2, #10]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	7ad2      	ldrb	r2, [r2, #11]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	615a      	str	r2, [r3, #20]

	// Configuration of Baud rate (BRR register)
	// PCLK1 for USART2,3
	// PCLK2 for USART1

	if(USARTx == USART1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <MCAL_UART_Init+0x16c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d103      	bne.n	8000c76 <MCAL_UART_Init+0xb2>
	{
		Pclk = MCAL_RCC_GetPCLK2Freq();
 8000c6e:	f7ff fd8b 	bl	8000788 <MCAL_RCC_GetPCLK2Freq>
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	e002      	b.n	8000c7c <MCAL_UART_Init+0xb8>
	}else{
		Pclk = MCAL_RCC_GetPCLK1Freq();
 8000c76:	f7ff fd73 	bl	8000760 <MCAL_RCC_GetPCLK1Freq>
 8000c7a:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c88:	0119      	lsls	r1, r3, #4
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	009a      	lsls	r2, r3, #2
 8000c94:	441a      	add	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cac:	2064      	movs	r0, #100	; 0x64
 8000cae:	fb00 f303 	mul.w	r3, r0, r3
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <MCAL_UART_Init+0x17c>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	095b      	lsrs	r3, r3, #5
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	7b1b      	ldrb	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d026      	beq.n	8000d22 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	7b12      	ldrb	r2, [r2, #12]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MCAL_UART_Init+0x16c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d106      	bne.n	8000cf8 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MCAL_UART_Init+0x180>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <MCAL_UART_Init+0x180>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 8000cf6:	e014      	b.n	8000d22 <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <MCAL_UART_Init+0x174>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d106      	bne.n	8000d0e <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MCAL_UART_Init+0x180>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <MCAL_UART_Init+0x180>)
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	e009      	b.n	8000d22 <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <MCAL_UART_Init+0x178>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d105      	bne.n	8000d22 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MCAL_UART_Init+0x180>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <MCAL_UART_Init+0x180>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000024 	.word	0x20000024
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	51eb851f 	.word	0x51eb851f
 8000d44:	e000e104 	.word	0xe000e104

08000d48 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4613      	mov	r3, r2
 8000d54:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d106      	bne.n	8000d6a <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8000d5c:	bf00      	nop
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <MCAL_UART_SendData+0x16>
	if(Global_UART_Config->Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	605a      	str	r2, [r3, #4]
	}


}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
	...

08000d80 <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8000d94:	bf00      	nop
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f9      	beq.n	8000d96 <MCAL_UART_ReceiveData+0x16>
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config->Parity == UART_Parity_NONE)
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MCAL_UART_ReceiveData+0x58>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	7a5b      	ldrb	r3, [r3, #9]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d107      	bne.n	8000dbc <MCAL_UART_ReceiveData+0x3c>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8000dba:	e007      	b.n	8000dcc <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	801a      	strh	r2, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000024 	.word	0x20000024

08000ddc <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a2b      	ldr	r2, [pc, #172]	; (8000e94 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d118      	bne.n	8000e1e <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000df2:	2306      	movs	r3, #6
 8000df4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000e02:	f7ff fbe4 	bl	80005ce <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000e18:	f7ff fbd9 	bl	80005ce <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 8000e1c:	e036      	b.n	8000e8c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <MCAL_UART_GPIO_SetPins+0xc0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d116      	bne.n	8000e54 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000e26:	2304      	movs	r3, #4
 8000e28:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000e3a:	f7ff fbc8 	bl	80005ce <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000e42:	2308      	movs	r3, #8
 8000e44:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000e4e:	f7ff fbbe 	bl	80005ce <MCAL_GPIO_Init>
}
 8000e52:	e01b      	b.n	8000e8c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MCAL_UART_GPIO_SetPins+0xc4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d117      	bne.n	8000e8c <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8000e62:	2306      	movs	r3, #6
 8000e64:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000e72:	f7ff fbac 	bl	80005ce <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000e88:	f7ff fba1 	bl	80005ce <MCAL_GPIO_Init>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40013800 	.word	0x40013800
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <USART1_IRQHandler+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	4798      	blx	r3
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000024 	.word	0x20000024

08000ebc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	4798      	blx	r3
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000024 	.word	0x20000024

08000ed0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <USART3_IRQHandler+0x10>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	4798      	blx	r3
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000024 	.word	0x20000024

08000ee4 <__libc_init_array>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	4e0c      	ldr	r6, [pc, #48]	; (8000f1c <__libc_init_array+0x38>)
 8000eea:	4c0d      	ldr	r4, [pc, #52]	; (8000f20 <__libc_init_array+0x3c>)
 8000eec:	1ba4      	subs	r4, r4, r6
 8000eee:	10a4      	asrs	r4, r4, #2
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	d109      	bne.n	8000f08 <__libc_init_array+0x24>
 8000ef4:	f000 f81a 	bl	8000f2c <_init>
 8000ef8:	2500      	movs	r5, #0
 8000efa:	4e0a      	ldr	r6, [pc, #40]	; (8000f24 <__libc_init_array+0x40>)
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <__libc_init_array+0x44>)
 8000efe:	1ba4      	subs	r4, r4, r6
 8000f00:	10a4      	asrs	r4, r4, #2
 8000f02:	42a5      	cmp	r5, r4
 8000f04:	d105      	bne.n	8000f12 <__libc_init_array+0x2e>
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f0c:	4798      	blx	r3
 8000f0e:	3501      	adds	r5, #1
 8000f10:	e7ee      	b.n	8000ef0 <__libc_init_array+0xc>
 8000f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f16:	4798      	blx	r3
 8000f18:	3501      	adds	r5, #1
 8000f1a:	e7f2      	b.n	8000f02 <__libc_init_array+0x1e>
 8000f1c:	08000f5c 	.word	0x08000f5c
 8000f20:	08000f5c 	.word	0x08000f5c
 8000f24:	08000f5c 	.word	0x08000f5c
 8000f28:	08000f60 	.word	0x08000f60

08000f2c <_init>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	bf00      	nop
 8000f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f32:	bc08      	pop	{r3}
 8000f34:	469e      	mov	lr, r3
 8000f36:	4770      	bx	lr

08000f38 <_fini>:
 8000f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3a:	bf00      	nop
 8000f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3e:	bc08      	pop	{r3}
 8000f40:	469e      	mov	lr, r3
 8000f42:	4770      	bx	lr
