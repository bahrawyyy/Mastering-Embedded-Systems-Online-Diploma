
UART_Atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  000036e0  00003774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  00800102  00800102  00003816  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  00003816  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000654  00000000  00000000  00003b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034ce  00000000  00000000  000041ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001826  00000000  00000000  000076b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002afb  00000000  00000000  00008ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  0000b9dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c1a  00000000  00000000  0000bebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000cad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0000d364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_1>
       8:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_2>
       c:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 1a 	call	0x342e	; 0x342e <main>
      8a:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_Init>:
static u8 flag_send = 1;



void UART_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	// Baud rate
	UBRRL = 103;     // 16 MHz crystal
     ca6:	e9 e2       	ldi	r30, 0x29	; 41
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e6       	ldi	r24, 0x67	; 103
     cac:	80 83       	st	Z, r24
	// Normal mode
	CLR_BIT(UCSRA,U2X);
     cae:	ab e2       	ldi	r26, 0x2B	; 43
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	8c 93       	st	X, r24


	// Frame
	// In order to access UCSRC
	SET_BIT(UCSRC,URSEL);   // To write data on UCSRC
     cbc:	a0 e4       	ldi	r26, 0x40	; 64
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 68       	ori	r24, 0x80	; 128
     cc8:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UMSEL);   // Asynchronous
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7b       	andi	r24, 0xBF	; 191
     cd6:	8c 93       	st	X, r24
	// 8-bit data
	SET_BIT(UCSRC,UCSZ0);
     cd8:	a0 e4       	ldi	r26, 0x40	; 64
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e0 e4       	ldi	r30, 0x40	; 64
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e0 e4       	ldi	r30, 0x40	; 64
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	84 60       	ori	r24, 0x04	; 4
     cf2:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
     cf4:	aa e2       	ldi	r26, 0x2A	; 42
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ea e2       	ldi	r30, 0x2A	; 42
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8b 7f       	andi	r24, 0xFB	; 251
     d00:	8c 93       	st	X, r24


	// Enable
	SET_BIT(UCSRB,TXEN);
     d02:	aa e2       	ldi	r26, 0x2A	; 42
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ea e2       	ldi	r30, 0x2A	; 42
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 60       	ori	r24, 0x08	; 8
     d0e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     d10:	aa e2       	ldi	r26, 0x2A	; 42
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e2       	ldi	r30, 0x2A	; 42
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 61       	ori	r24, 0x10	; 16
     d1c:	8c 93       	st	X, r24


}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <UART_Send_Char>:

void UART_Send_Char(u8 data)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	89 83       	std	Y+1, r24	; 0x01
	// Busy wait
	while(!GET_BIT(UCSRA,UDRE));
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	82 95       	swap	r24
     d38:	86 95       	lsr	r24
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	90 70       	andi	r25, 0x00	; 0
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	a1 f3       	breq	.-24     	; 0xd30 <UART_Send_Char+0xc>
	UDR = data;
     d48:	ec e2       	ldi	r30, 0x2C	; 44
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 83       	st	Z, r24
}
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <UART_Receive_Char>:


u8 UART_Receive_Char(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	// The CPU is stucking here
	while(!GET_BIT(UCSRA,RXC));
     d60:	eb e2       	ldi	r30, 0x2B	; 43
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 23       	and	r24, r24
     d68:	dc f7       	brge	.-10     	; 0xd60 <UART_Receive_Char+0x8>
	return UDR;
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <UART_Send_String>:


void UART_Send_String(char* string)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <UART_Send_String+0x6>
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9b 83       	std	Y+3, r25	; 0x03
     d84:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <UART_Send_String+0x30>
	while(string[i] != '\0'){
		UART_Send_Char(string[i]);
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	fc 01       	movw	r30, r24
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	80 81       	ld	r24, Z
     d9c:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_Send_Char>
		i++;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	89 83       	std	Y+1, r24	; 0x01


void UART_Send_String(char* string)
{
	u8 i=0;
	while(string[i] != '\0'){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	fc 01       	movw	r30, r24
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	39 f7       	brne	.-50     	; 0xd8a <UART_Send_String+0x14>
		UART_Send_Char(string[i]);
		i++;
	}
	// Send (Enter) as a terminating char
	UART_Send_Char(DefaultStop);
     dbc:	8d e0       	ldi	r24, 0x0D	; 13
     dbe:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_Send_Char>
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <UART_Receive_String>:


void UART_Receive_String(char *Buffer)
{
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <UART_Receive_String+0xa>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <UART_Receive_String+0xc>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
     de2:	1a 82       	std	Y+2, r1	; 0x02
     de4:	19 82       	std	Y+1, r1	; 0x01

    Buffer[i] = UART_Receive_Char();
     de6:	29 81       	ldd	r18, Y+1	; 0x01
     de8:	3a 81       	ldd	r19, Y+2	; 0x02
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	8c 01       	movw	r16, r24
     df0:	02 0f       	add	r16, r18
     df2:	13 1f       	adc	r17, r19
     df4:	0e 94 ac 06 	call	0xd58	; 0xd58 <UART_Receive_Char>
     df8:	f8 01       	movw	r30, r16
     dfa:	80 83       	st	Z, r24
     dfc:	10 c0       	rjmp	.+32     	; 0xe1e <UART_Receive_String+0x50>
    while (Buffer[i] != DefaultStop) {
        i++;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
        Buffer[i] = UART_Receive_Char();
     e08:	29 81       	ldd	r18, Y+1	; 0x01
     e0a:	3a 81       	ldd	r19, Y+2	; 0x02
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	8c 01       	movw	r16, r24
     e12:	02 0f       	add	r16, r18
     e14:	13 1f       	adc	r17, r19
     e16:	0e 94 ac 06 	call	0xd58	; 0xd58 <UART_Receive_Char>
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 83       	st	Z, r24
void UART_Receive_String(char *Buffer)
{
    int i = 0;

    Buffer[i] = UART_Receive_Char();
    while (Buffer[i] != DefaultStop) {
     e1e:	29 81       	ldd	r18, Y+1	; 0x01
     e20:	3a 81       	ldd	r19, Y+2	; 0x02
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	fc 01       	movw	r30, r24
     e28:	e2 0f       	add	r30, r18
     e2a:	f3 1f       	adc	r31, r19
     e2c:	80 81       	ld	r24, Z
     e2e:	8d 30       	cpi	r24, 0x0D	; 13
     e30:	31 f7       	brne	.-52     	; 0xdfe <UART_Receive_String+0x30>
        i++;
        Buffer[i] = UART_Receive_Char();

    }

    Buffer[i] = '\0'; // Null-terminate the string
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	2b 81       	ldd	r18, Y+3	; 0x03
     e38:	3c 81       	ldd	r19, Y+4	; 0x04
     e3a:	f9 01       	movw	r30, r18
     e3c:	e8 0f       	add	r30, r24
     e3e:	f9 1f       	adc	r31, r25
     e40:	10 82       	st	Z, r1
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <UART_Receive_PeriodicCheck>:

// Some characters may not be read, if you entered them fast
u8 UART_Receive_PeriodicCheck(u8* pdata)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <UART_Receive_PeriodicCheck+0x6>
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,RXC))
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	4c f4       	brge	.+18     	; 0xe80 <UART_Receive_PeriodicCheck+0x2c>
	{
		*pdata = UDR;
     e6e:	ec e2       	ldi	r30, 0x2C	; 44
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	80 83       	st	Z, r24
		return 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <UART_Receive_PeriodicCheck+0x2e>
	}
	return 0;
     e80:	1b 82       	std	Y+3, r1	; 0x03
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <UART_SendNoBlock>:


void UART_SendNoBlock(u8 data)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     e9c:	ec e2       	ldi	r30, 0x2C	; 44
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 83       	st	Z, r24
}
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     eb4:	ec e2       	ldi	r30, 0x2C	; 44
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <UART_RX_InterruptEnable>:

// Receive complete
void UART_RX_InterruptEnable(void)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
     ec8:	aa e2       	ldi	r26, 0x2A	; 42
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ea e2       	ldi	r30, 0x2A	; 42
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <UART_TX_InterruptEnable>:

// Transmission complete
void UART_TX_InterruptEnable(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
     ee4:	aa e2       	ldi	r26, 0x2A	; 42
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ea e2       	ldi	r30, 0x2A	; 42
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 64       	ori	r24, 0x40	; 64
     ef0:	8c 93       	st	X, r24
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <UART_RX_InterruptDisable>:


// Receive complete
void UART_RX_InterruptDisable(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
     f00:	aa e2       	ldi	r26, 0x2A	; 42
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e2       	ldi	r30, 0x2A	; 42
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8c 93       	st	X, r24
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <UART_TX_InterruptDisable>:

// Transmission complete
void UART_TX_InterruptDisable(void)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,TXCIE);
     f1c:	aa e2       	ldi	r26, 0x2A	; 42
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ea e2       	ldi	r30, 0x2A	; 42
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 7b       	andi	r24, 0xBF	; 191
     f28:	8c 93       	st	X, r24
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <UART_SendString_ASYNCH>:



// Function Asynchronous to send string
void UART_SendString_ASYNCH(u8* str)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <UART_SendString_ASYNCH+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
	// To prevent data over run
	// When I'm sending this string, I'll continue till I finish it
	if(flag_send == 1){
     f3e:	80 91 87 00 	lds	r24, 0x0087
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	79 f4       	brne	.+30     	; 0xf64 <UART_SendString_ASYNCH+0x34>
		UART_TX_InterruptEnable();
     f46:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_TX_InterruptEnable>
		UART_SendNoBlock(str[0]);
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	80 81       	ld	r24, Z
     f50:	0e 94 48 07 	call	0xe90	; 0xe90 <UART_SendNoBlock>
		TX_Str = str;   // To know where I'm stopping out of this function
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	90 93 03 01 	sts	0x0103, r25
     f5c:	80 93 02 01 	sts	0x0102, r24
		flag_send = 0;
     f60:	10 92 87 00 	sts	0x0087, r1
	}
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <__vector_15>:




ISR(USART_TXC_vect)
{
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	static u8 i = 1;
	if(TX_Str[i]!= 0)
     f98:	20 91 02 01 	lds	r18, 0x0102
     f9c:	30 91 03 01 	lds	r19, 0x0103
     fa0:	80 91 88 00 	lds	r24, 0x0088
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	f9 01       	movw	r30, r18
     faa:	e8 0f       	add	r30, r24
     fac:	f9 1f       	adc	r31, r25
     fae:	80 81       	ld	r24, Z
     fb0:	88 23       	and	r24, r24
     fb2:	a1 f0       	breq	.+40     	; 0xfdc <__vector_15+0x6e>
	{
		UART_SendNoBlock(TX_Str[i]);
     fb4:	20 91 02 01 	lds	r18, 0x0102
     fb8:	30 91 03 01 	lds	r19, 0x0103
     fbc:	80 91 88 00 	lds	r24, 0x0088
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	f9 01       	movw	r30, r18
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	80 81       	ld	r24, Z
     fcc:	0e 94 48 07 	call	0xe90	; 0xe90 <UART_SendNoBlock>
		i++;
     fd0:	80 91 88 00 	lds	r24, 0x0088
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 88 00 	sts	0x0088, r24
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <__vector_15+0x7a>
	}else{
		i=1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 88 00 	sts	0x0088, r24
		flag_send=1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 87 00 	sts	0x0087, r24
	}
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <Timer0_Init>:
#define NULLPTR   ((void*)0)

static void (*Timer0_OVF_Fptr)(void) = NULLPTR;

void Timer0_Init(Timer0Mode_type Mode, Timer0_Prescalar Prescalar,OC0Mode_type Oc0_Mode)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	27 97       	sbiw	r28, 0x07	; 7
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	6a 83       	std	Y+2, r22	; 0x02
    1026:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3f 83       	std	Y+7, r19	; 0x07
    1030:	2e 83       	std	Y+6, r18	; 0x06
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	9f 81       	ldd	r25, Y+7	; 0x07
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	21 f1       	breq	.+72     	; 0x1084 <Timer0_Init+0x76>
    103c:	2e 81       	ldd	r18, Y+6	; 0x06
    103e:	3f 81       	ldd	r19, Y+7	; 0x07
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <Timer0_Init+0x42>
    1046:	8e 81       	ldd	r24, Y+6	; 0x06
    1048:	9f 81       	ldd	r25, Y+7	; 0x07
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	61 f0       	breq	.+24     	; 0x1066 <Timer0_Init+0x58>
    104e:	46 c0       	rjmp	.+140    	; 0x10dc <Timer0_Init+0xce>
    1050:	2e 81       	ldd	r18, Y+6	; 0x06
    1052:	3f 81       	ldd	r19, Y+7	; 0x07
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	21 f1       	breq	.+72     	; 0x10a2 <Timer0_Init+0x94>
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	71 f1       	breq	.+92     	; 0x10c0 <Timer0_Init+0xb2>
    1064:	3b c0       	rjmp	.+118    	; 0x10dc <Timer0_Init+0xce>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7b       	andi	r24, 0xBF	; 191
    1072:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    1074:	a3 e5       	ldi	r26, 0x53	; 83
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e3 e5       	ldi	r30, 0x53	; 83
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	87 7f       	andi	r24, 0xF7	; 247
    1080:	8c 93       	st	X, r24
    1082:	2c c0       	rjmp	.+88     	; 0x10dc <Timer0_Init+0xce>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    1084:	a3 e5       	ldi	r26, 0x53	; 83
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e3 e5       	ldi	r30, 0x53	; 83
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    1092:	a3 e5       	ldi	r26, 0x53	; 83
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e3 e5       	ldi	r30, 0x53	; 83
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	8c 93       	st	X, r24
    10a0:	1d c0       	rjmp	.+58     	; 0x10dc <Timer0_Init+0xce>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
    10a2:	a3 e5       	ldi	r26, 0x53	; 83
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e3 e5       	ldi	r30, 0x53	; 83
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    10b0:	a3 e5       	ldi	r26, 0x53	; 83
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e3 e5       	ldi	r30, 0x53	; 83
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	88 60       	ori	r24, 0x08	; 8
    10bc:	8c 93       	st	X, r24
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <Timer0_Init+0xce>
		break;
	case TIMER0_FAST_PWM_MODE:
		SET_BIT(TCCR0,WGM00);
    10c0:	a3 e5       	ldi	r26, 0x53	; 83
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e3 e5       	ldi	r30, 0x53	; 83
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    10ce:	a3 e5       	ldi	r26, 0x53	; 83
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e3 e5       	ldi	r30, 0x53	; 83
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	8c 93       	st	X, r24
		break;
	}

	// To make sure the first three pins are zero
	// in case of old data written
	TCCR0 = TCCR0 & 0xf8;   // 11111000
    10dc:	a3 e5       	ldi	r26, 0x53	; 83
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e3 e5       	ldi	r30, 0x53	; 83
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 7f       	andi	r24, 0xF8	; 248
    10e8:	8c 93       	st	X, r24
	TCCR0 = TCCR0 | Prescalar;
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	90 81       	ld	r25, Z
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	89 2b       	or	r24, r25
    10f8:	8c 93       	st	X, r24


	// Hardware pin from OCU (Output compare unit) to output something
	// when there is matching between OCR and TCNT

	switch(Oc0_Mode)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	21 f1       	breq	.+72     	; 0x1156 <Timer0_Init+0x148>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <Timer0_Init+0x114>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <Timer0_Init+0x12a>
    1120:	46 c0       	rjmp	.+140    	; 0x11ae <Timer0_Init+0x1a0>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	21 f1       	breq	.+72     	; 0x1174 <Timer0_Init+0x166>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	71 f1       	breq	.+92     	; 0x1192 <Timer0_Init+0x184>
    1136:	3b c0       	rjmp	.+118    	; 0x11ae <Timer0_Init+0x1a0>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7e       	andi	r24, 0xEF	; 239
    1144:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	8c 93       	st	X, r24
    1154:	2c c0       	rjmp	.+88     	; 0x11ae <Timer0_Init+0x1a0>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0,COM00);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7d       	andi	r24, 0xDF	; 223
    1170:	8c 93       	st	X, r24
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <Timer0_Init+0x1a0>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7e       	andi	r24, 0xEF	; 239
    1180:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	8c 93       	st	X, r24
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <Timer0_Init+0x1a0>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0,COM00);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 61       	ori	r24, 0x10	; 16
    119e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 62       	ori	r24, 0x20	; 32
    11ac:	8c 93       	st	X, r24
		break;
	}


}
    11ae:	27 96       	adiw	r28, 0x07	; 7
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <Timer0_OVInterrupt_Enable>:

// Separately, in case you want to run the timer
// without interrupt
void Timer0_OVInterrupt_Enable(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    11c8:	a9 e5       	ldi	r26, 0x59	; 89
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e9 e5       	ldi	r30, 0x59	; 89
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	81 60       	ori	r24, 0x01	; 1
    11d4:	8c 93       	st	X, r24
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    11e4:	a9 e5       	ldi	r26, 0x59	; 89
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e9 e5       	ldi	r30, 0x59	; 89
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8e 7f       	andi	r24, 0xFE	; 254
    11f0:	8c 93       	st	X, r24
}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <Timer0_OVF_SetCallBack>:

void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <Timer0_OVF_SetCallBack+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	90 93 05 01 	sts	0x0105, r25
    120e:	80 93 04 01 	sts	0x0104, r24
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <__vector_11>:


// used in delay
ISR(TIMER0_OVF_vect)
{
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	2f 93       	push	r18
    1228:	3f 93       	push	r19
    122a:	4f 93       	push	r20
    122c:	5f 93       	push	r21
    122e:	6f 93       	push	r22
    1230:	7f 93       	push	r23
    1232:	8f 93       	push	r24
    1234:	9f 93       	push	r25
    1236:	af 93       	push	r26
    1238:	bf 93       	push	r27
    123a:	ef 93       	push	r30
    123c:	ff 93       	push	r31
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULLPTR)
    1246:	80 91 04 01 	lds	r24, 0x0104
    124a:	90 91 05 01 	lds	r25, 0x0105
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	29 f0       	breq	.+10     	; 0x125c <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    1252:	e0 91 04 01 	lds	r30, 0x0104
    1256:	f0 91 05 01 	lds	r31, 0x0105
    125a:	09 95       	icall
	}
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <EXI_Set_CallBack+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <EXI_Set_CallBack+0x8>
    128a:	0f 92       	push	r0
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	7b 83       	std	Y+3, r23	; 0x03
    1294:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3d 83       	std	Y+5, r19	; 0x05
    129e:	2c 83       	std	Y+4, r18	; 0x04
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	81 f0       	breq	.+32     	; 0x12ca <EXI_Set_CallBack+0x48>
    12aa:	2c 81       	ldd	r18, Y+4	; 0x04
    12ac:	3d 81       	ldd	r19, Y+5	; 0x05
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	91 f0       	breq	.+36     	; 0x12d8 <EXI_Set_CallBack+0x56>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	a1 f4       	brne	.+40     	; 0x12e4 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	9b 81       	ldd	r25, Y+3	; 0x03
    12c0:	90 93 07 01 	sts	0x0107, r25
    12c4:	80 93 06 01 	sts	0x0106, r24
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	90 93 09 01 	sts	0x0109, r25
    12d2:	80 93 08 01 	sts	0x0108, r24
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	9b 81       	ldd	r25, Y+3	; 0x03
    12dc:	90 93 0b 01 	sts	0x010B, r25
    12e0:	80 93 0a 01 	sts	0x010A, r24
		break;
	}
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <EXI_ENABLE+0x6>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3b 83       	std	Y+3, r19	; 0x03
    130a:	2a 83       	std	Y+2, r18	; 0x02
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	89 f0       	breq	.+34     	; 0x1338 <EXI_ENABLE+0x44>
    1316:	2a 81       	ldd	r18, Y+2	; 0x02
    1318:	3b 81       	ldd	r19, Y+3	; 0x03
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	a1 f0       	breq	.+40     	; 0x1348 <EXI_ENABLE+0x54>
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	b9 f4       	brne	.+46     	; 0x1356 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1328:	ab e5       	ldi	r26, 0x5B	; 91
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e5       	ldi	r30, 0x5B	; 91
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 64       	ori	r24, 0x40	; 64
    1334:	8c 93       	st	X, r24
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    1338:	ab e5       	ldi	r26, 0x5B	; 91
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e5       	ldi	r30, 0x5B	; 91
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	80 68       	ori	r24, 0x80	; 128
    1344:	8c 93       	st	X, r24
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    1348:	ab e5       	ldi	r26, 0x5B	; 91
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	eb e5       	ldi	r30, 0x5B	; 91
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 62       	ori	r24, 0x20	; 32
    1354:	8c 93       	st	X, r24
		break;
	}
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <EXI_DISABLE+0x6>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3b 83       	std	Y+3, r19	; 0x03
    1378:	2a 83       	std	Y+2, r18	; 0x02
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	89 f0       	breq	.+34     	; 0x13a6 <EXI_DISABLE+0x44>
    1384:	2a 81       	ldd	r18, Y+2	; 0x02
    1386:	3b 81       	ldd	r19, Y+3	; 0x03
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <EXI_DISABLE+0x54>
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	b9 f4       	brne	.+46     	; 0x13c4 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    1396:	ab e5       	ldi	r26, 0x5B	; 91
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e5       	ldi	r30, 0x5B	; 91
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8f 7b       	andi	r24, 0xBF	; 191
    13a2:	8c 93       	st	X, r24
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    13a6:	ab e5       	ldi	r26, 0x5B	; 91
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb e5       	ldi	r30, 0x5B	; 91
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8f 77       	andi	r24, 0x7F	; 127
    13b2:	8c 93       	st	X, r24
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    13b6:	ab e5       	ldi	r26, 0x5B	; 91
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	eb e5       	ldi	r30, 0x5B	; 91
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8f 7d       	andi	r24, 0xDF	; 223
    13c2:	8c 93       	st	X, r24
		break;
	}
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	2a 97       	sbiw	r28, 0x0a	; 10
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3a 87       	std	Y+10, r19	; 0x0a
    13f0:	29 87       	std	Y+9, r18	; 0x09
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <EXI_TriggerEdge+0x2e>
    13fc:	66 c0       	rjmp	.+204    	; 0x14ca <EXI_TriggerEdge+0xfa>
    13fe:	29 85       	ldd	r18, Y+9	; 0x09
    1400:	3a 85       	ldd	r19, Y+10	; 0x0a
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <EXI_TriggerEdge+0x3a>
    1408:	bb c0       	rjmp	.+374    	; 0x1580 <EXI_TriggerEdge+0x1b0>
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	09 f0       	breq	.+2      	; 0x1414 <EXI_TriggerEdge+0x44>
    1412:	dd c0       	rjmp	.+442    	; 0x15ce <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	38 87       	std	Y+8, r19	; 0x08
    141c:	2f 83       	std	Y+7, r18	; 0x07
    141e:	8f 81       	ldd	r24, Y+7	; 0x07
    1420:	98 85       	ldd	r25, Y+8	; 0x08
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	21 f1       	breq	.+72     	; 0x1470 <EXI_TriggerEdge+0xa0>
    1428:	2f 81       	ldd	r18, Y+7	; 0x07
    142a:	38 85       	ldd	r19, Y+8	; 0x08
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <EXI_TriggerEdge+0x6c>
    1432:	8f 81       	ldd	r24, Y+7	; 0x07
    1434:	98 85       	ldd	r25, Y+8	; 0x08
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 f0       	breq	.+24     	; 0x1452 <EXI_TriggerEdge+0x82>
    143a:	c9 c0       	rjmp	.+402    	; 0x15ce <EXI_TriggerEdge+0x1fe>
    143c:	2f 81       	ldd	r18, Y+7	; 0x07
    143e:	38 85       	ldd	r19, Y+8	; 0x08
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	21 f1       	breq	.+72     	; 0x148e <EXI_TriggerEdge+0xbe>
    1446:	8f 81       	ldd	r24, Y+7	; 0x07
    1448:	98 85       	ldd	r25, Y+8	; 0x08
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	71 f1       	breq	.+92     	; 0x14ac <EXI_TriggerEdge+0xdc>
    1450:	be c0       	rjmp	.+380    	; 0x15ce <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    1452:	a5 e5       	ldi	r26, 0x55	; 85
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e5       	ldi	r30, 0x55	; 85
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8e 7f       	andi	r24, 0xFE	; 254
    145e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1460:	a5 e5       	ldi	r26, 0x55	; 85
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e5       	ldi	r30, 0x55	; 85
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	8c 93       	st	X, r24
    146e:	af c0       	rjmp	.+350    	; 0x15ce <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1470:	a5 e5       	ldi	r26, 0x55	; 85
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e5       	ldi	r30, 0x55	; 85
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	81 60       	ori	r24, 0x01	; 1
    147c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	8c 93       	st	X, r24
    148c:	a0 c0       	rjmp	.+320    	; 0x15ce <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    148e:	a5 e5       	ldi	r26, 0x55	; 85
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e5       	ldi	r30, 0x55	; 85
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	8c 93       	st	X, r24
    14aa:	91 c0       	rjmp	.+290    	; 0x15ce <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	81 60       	ori	r24, 0x01	; 1
    14b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	82 60       	ori	r24, 0x02	; 2
    14c6:	8c 93       	st	X, r24
    14c8:	82 c0       	rjmp	.+260    	; 0x15ce <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3e 83       	std	Y+6, r19	; 0x06
    14d2:	2d 83       	std	Y+5, r18	; 0x05
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	21 f1       	breq	.+72     	; 0x1526 <EXI_TriggerEdge+0x156>
    14de:	2d 81       	ldd	r18, Y+5	; 0x05
    14e0:	3e 81       	ldd	r19, Y+6	; 0x06
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <EXI_TriggerEdge+0x122>
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <EXI_TriggerEdge+0x138>
    14f0:	6e c0       	rjmp	.+220    	; 0x15ce <EXI_TriggerEdge+0x1fe>
    14f2:	2d 81       	ldd	r18, Y+5	; 0x05
    14f4:	3e 81       	ldd	r19, Y+6	; 0x06
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	21 f1       	breq	.+72     	; 0x1544 <EXI_TriggerEdge+0x174>
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	71 f1       	breq	.+92     	; 0x1562 <EXI_TriggerEdge+0x192>
    1506:	63 c0       	rjmp	.+198    	; 0x15ce <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1508:	a5 e5       	ldi	r26, 0x55	; 85
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e5       	ldi	r30, 0x55	; 85
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8b 7f       	andi	r24, 0xFB	; 251
    1514:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1516:	a5 e5       	ldi	r26, 0x55	; 85
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e5       	ldi	r30, 0x55	; 85
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	87 7f       	andi	r24, 0xF7	; 247
    1522:	8c 93       	st	X, r24
    1524:	54 c0       	rjmp	.+168    	; 0x15ce <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	84 60       	ori	r24, 0x04	; 4
    1532:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1534:	a5 e5       	ldi	r26, 0x55	; 85
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e5       	ldi	r30, 0x55	; 85
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	8c 93       	st	X, r24
    1542:	45 c0       	rjmp	.+138    	; 0x15ce <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    1544:	a5 e5       	ldi	r26, 0x55	; 85
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e5       	ldi	r30, 0x55	; 85
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8b 7f       	andi	r24, 0xFB	; 251
    1550:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1552:	a5 e5       	ldi	r26, 0x55	; 85
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e5       	ldi	r30, 0x55	; 85
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	8c 93       	st	X, r24
    1560:	36 c0       	rjmp	.+108    	; 0x15ce <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	84 60       	ori	r24, 0x04	; 4
    156e:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1570:	a5 e5       	ldi	r26, 0x55	; 85
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e5 e5       	ldi	r30, 0x55	; 85
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	88 60       	ori	r24, 0x08	; 8
    157c:	8c 93       	st	X, r24
    157e:	27 c0       	rjmp	.+78     	; 0x15ce <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	91 05       	cpc	r25, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <EXI_TriggerEdge+0x1d0>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	23 30       	cpi	r18, 0x03	; 3
    159a:	31 05       	cpc	r19, r1
    159c:	49 f0       	breq	.+18     	; 0x15b0 <EXI_TriggerEdge+0x1e0>
    159e:	10 c0       	rjmp	.+32     	; 0x15c0 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    15a0:	a4 e5       	ldi	r26, 0x54	; 84
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e4 e5       	ldi	r30, 0x54	; 84
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 7b       	andi	r24, 0xBF	; 191
    15ac:	8c 93       	st	X, r24
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    15b0:	a4 e5       	ldi	r26, 0x54	; 84
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e4 e5       	ldi	r30, 0x54	; 84
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	8c 93       	st	X, r24
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    15c0:	a4 e5       	ldi	r26, 0x54	; 84
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e4 e5       	ldi	r30, 0x54	; 84
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7b       	andi	r24, 0xBF	; 191
    15cc:	8c 93       	st	X, r24
				}
				break;
	}
}
    15ce:	2a 96       	adiw	r28, 0x0a	; 10
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    160a:	80 91 06 01 	lds	r24, 0x0106
    160e:	90 91 07 01 	lds	r25, 0x0107
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	29 f0       	breq	.+10     	; 0x1620 <__vector_1+0x40>
		INT0_Fptr();
    1616:	e0 91 06 01 	lds	r30, 0x0106
    161a:	f0 91 07 01 	lds	r31, 0x0107
    161e:	09 95       	icall
	}
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_2>:

ISR(INT1_vect){
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1670:	80 91 08 01 	lds	r24, 0x0108
    1674:	90 91 09 01 	lds	r25, 0x0109
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	29 f0       	breq	.+10     	; 0x1686 <__vector_2+0x40>
		INT1_Fptr();
    167c:	e0 91 08 01 	lds	r30, 0x0108
    1680:	f0 91 09 01 	lds	r31, 0x0109
    1684:	09 95       	icall
	}
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <__vector_3>:

ISR(INT2_vect){
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    16d6:	80 91 0a 01 	lds	r24, 0x010A
    16da:	90 91 0b 01 	lds	r25, 0x010B
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	29 f0       	breq	.+10     	; 0x16ec <__vector_3+0x40>
		INT2_Fptr();
    16e2:	e0 91 0a 01 	lds	r30, 0x010A
    16e6:	f0 91 0b 01 	lds	r31, 0x010B
    16ea:	09 95       	icall
	}
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <DIO_ES_tSetPinDirection+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <DIO_ES_tSetPinDirection+0x8>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	6a 83       	std	Y+2, r22	; 0x02
    1722:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	88 30       	cpi	r24, 0x08	; 8
    1728:	18 f0       	brcs	.+6      	; 0x1730 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	8c 83       	std	Y+4, r24	; 0x04
    172e:	d8 c0       	rjmp	.+432    	; 0x18e0 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	88 23       	and	r24, r24
    1734:	91 f5       	brne	.+100    	; 0x179a <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	a1 f4       	brne	.+40     	; 0x1764 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    173c:	aa e3       	ldi	r26, 0x3A	; 58
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ea e3       	ldi	r30, 0x3A	; 58
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_ES_tSetPinDirection+0x48>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_ES_tSetPinDirection+0x44>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	bd c0       	rjmp	.+378    	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	88 23       	and	r24, r24
    1768:	a9 f4       	brne	.+42     	; 0x1794 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    176a:	aa e3       	ldi	r26, 0x3A	; 58
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	ea e3       	ldi	r30, 0x3A	; 58
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_ES_tSetPinDirection+0x76>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_ES_tSetPinDirection+0x72>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	a5 c0       	rjmp	.+330    	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	8c 83       	std	Y+4, r24	; 0x04
    1798:	a3 c0       	rjmp	.+326    	; 0x18e0 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 f5       	brne	.+100    	; 0x1804 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    17a6:	a7 e3       	ldi	r26, 0x37	; 55
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e7 e3       	ldi	r30, 0x37	; 55
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_ES_tSetPinDirection+0xb2>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_ES_tSetPinDirection+0xae>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	88 c0       	rjmp	.+272    	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 23       	and	r24, r24
    17d2:	a9 f4       	brne	.+42     	; 0x17fe <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    17d4:	a7 e3       	ldi	r26, 0x37	; 55
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e7 e3       	ldi	r30, 0x37	; 55
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_ES_tSetPinDirection+0xe0>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_ES_tSetPinDirection+0xdc>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	70 c0       	rjmp	.+224    	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	8c 83       	std	Y+4, r24	; 0x04
    1802:	6e c0       	rjmp	.+220    	; 0x18e0 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	91 f5       	brne	.+100    	; 0x186e <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1810:	a4 e3       	ldi	r26, 0x34	; 52
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e4 e3       	ldi	r30, 0x34	; 52
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_ES_tSetPinDirection+0x11c>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_ES_tSetPinDirection+0x118>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	53 c0       	rjmp	.+166    	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 23       	and	r24, r24
    183c:	a9 f4       	brne	.+42     	; 0x1868 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    183e:	a4 e3       	ldi	r26, 0x34	; 52
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e4 e3       	ldi	r30, 0x34	; 52
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_ES_tSetPinDirection+0x14a>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_ES_tSetPinDirection+0x146>
    1860:	80 95       	com	r24
    1862:	84 23       	and	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	3b c0       	rjmp	.+118    	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	8c 83       	std	Y+4, r24	; 0x04
    186c:	39 c0       	rjmp	.+114    	; 0x18e0 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 f5       	brne	.+100    	; 0x18d8 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    187a:	a1 e3       	ldi	r26, 0x31	; 49
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e1 e3       	ldi	r30, 0x31	; 49
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_ES_tSetPinDirection+0x186>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_ES_tSetPinDirection+0x182>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	1e c0       	rjmp	.+60     	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 23       	and	r24, r24
    18a6:	a9 f4       	brne	.+42     	; 0x18d2 <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    18a8:	a1 e3       	ldi	r26, 0x31	; 49
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e1 e3       	ldi	r30, 0x31	; 49
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_ES_tSetPinDirection+0x1b4>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_ES_tSetPinDirection+0x1b0>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	8c 83       	std	Y+4, r24	; 0x04
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	8c 83       	std	Y+4, r24	; 0x04
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    18de:	1c 82       	std	Y+4, r1	; 0x04
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <DIO_ES_tSetPinValue+0x6>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <DIO_ES_tSetPinValue+0x8>
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	6a 83       	std	Y+2, r22	; 0x02
    1900:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	18 f0       	brcs	.+6      	; 0x190e <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	8c 83       	std	Y+4, r24	; 0x04
    190c:	d8 c0       	rjmp	.+432    	; 0x1abe <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	88 23       	and	r24, r24
    1912:	91 f5       	brne	.+100    	; 0x1978 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	a1 f4       	brne	.+40     	; 0x1942 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    191a:	ab e3       	ldi	r26, 0x3B	; 59
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	eb e3       	ldi	r30, 0x3B	; 59
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_ES_tSetPinValue+0x48>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_ES_tSetPinValue+0x44>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	bd c0       	rjmp	.+378    	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	88 23       	and	r24, r24
    1946:	a9 f4       	brne	.+42     	; 0x1972 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1948:	ab e3       	ldi	r26, 0x3B	; 59
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	eb e3       	ldi	r30, 0x3B	; 59
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_ES_tSetPinValue+0x76>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_ES_tSetPinValue+0x72>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	a5 c0       	rjmp	.+330    	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	8c 83       	std	Y+4, r24	; 0x04
    1976:	a3 c0       	rjmp	.+326    	; 0x1abe <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 f5       	brne	.+100    	; 0x19e2 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	a1 f4       	brne	.+40     	; 0x19ac <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1984:	a8 e3       	ldi	r26, 0x38	; 56
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e8 e3       	ldi	r30, 0x38	; 56
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_ES_tSetPinValue+0xb2>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <DIO_ES_tSetPinValue+0xae>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	88 c0       	rjmp	.+272    	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 23       	and	r24, r24
    19b0:	a9 f4       	brne	.+42     	; 0x19dc <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    19b2:	a8 e3       	ldi	r26, 0x38	; 56
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e8 e3       	ldi	r30, 0x38	; 56
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_ES_tSetPinValue+0xe0>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_ES_tSetPinValue+0xdc>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	70 c0       	rjmp	.+224    	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	8c 83       	std	Y+4, r24	; 0x04
    19e0:	6e c0       	rjmp	.+220    	; 0x1abe <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	91 f5       	brne	.+100    	; 0x1a4c <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	a1 f4       	brne	.+40     	; 0x1a16 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    19ee:	a5 e3       	ldi	r26, 0x35	; 53
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e5 e3       	ldi	r30, 0x35	; 53
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_ES_tSetPinValue+0x11c>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_ES_tSetPinValue+0x118>
    1a10:	84 2b       	or	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	53 c0       	rjmp	.+166    	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	88 23       	and	r24, r24
    1a1a:	a9 f4       	brne	.+42     	; 0x1a46 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1a1c:	a5 e3       	ldi	r26, 0x35	; 53
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e3       	ldi	r30, 0x35	; 53
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <DIO_ES_tSetPinValue+0x14a>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <DIO_ES_tSetPinValue+0x146>
    1a3e:	80 95       	com	r24
    1a40:	84 23       	and	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	3b c0       	rjmp	.+118    	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	8c 83       	std	Y+4, r24	; 0x04
    1a4a:	39 c0       	rjmp	.+114    	; 0x1abe <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	83 30       	cpi	r24, 0x03	; 3
    1a50:	91 f5       	brne	.+100    	; 0x1ab6 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	a1 f4       	brne	.+40     	; 0x1a80 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1a58:	a2 e3       	ldi	r26, 0x32	; 50
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_ES_tSetPinValue+0x186>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_ES_tSetPinValue+0x182>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	1e c0       	rjmp	.+60     	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 23       	and	r24, r24
    1a84:	a9 f4       	brne	.+42     	; 0x1ab0 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1a86:	a2 e3       	ldi	r26, 0x32	; 50
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e2 e3       	ldi	r30, 0x32	; 50
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_ES_tSetPinValue+0x1b4>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_ES_tSetPinValue+0x1b0>
    1aa8:	80 95       	com	r24
    1aaa:	84 23       	and	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	06 c0       	rjmp	.+12     	; 0x1abc <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	8c 83       	std	Y+4, r24	; 0x04
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	8c 83       	std	Y+4, r24	; 0x04
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1abc:	1c 82       	std	Y+4, r1	; 0x04
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <DIO_ES_tGetPinValue+0x6>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <DIO_ES_tGetPinValue+0x8>
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	6a 83       	std	Y+2, r22	; 0x02
    1ae0:	5c 83       	std	Y+4, r21	; 0x04
    1ae2:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	88 30       	cpi	r24, 0x08	; 8
    1ae8:	18 f0       	brcs	.+6      	; 0x1af0 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	4d 83       	std	Y+5, r20	; 0x05
    1aee:	60 c0       	rjmp	.+192    	; 0x1bb0 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	88 23       	and	r24, r24
    1af4:	a1 f4       	brne	.+40     	; 0x1b1e <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1af6:	e9 e3       	ldi	r30, 0x39	; 57
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a9 01       	movw	r20, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_ES_tGetPinValue+0x40>
    1b0a:	55 95       	asr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_ES_tGetPinValue+0x3c>
    1b12:	ca 01       	movw	r24, r20
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	eb 81       	ldd	r30, Y+3	; 0x03
    1b18:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1a:	80 83       	st	Z, r24
    1b1c:	48 c0       	rjmp	.+144    	; 0x1bae <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	a1 f4       	brne	.+40     	; 0x1b4c <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1b24:	e6 e3       	ldi	r30, 0x36	; 54
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_ES_tGetPinValue+0x6e>
    1b38:	55 95       	asr	r21
    1b3a:	47 95       	ror	r20
    1b3c:	8a 95       	dec	r24
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_ES_tGetPinValue+0x6a>
    1b40:	ca 01       	movw	r24, r20
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	eb 81       	ldd	r30, Y+3	; 0x03
    1b46:	fc 81       	ldd	r31, Y+4	; 0x04
    1b48:	80 83       	st	Z, r24
    1b4a:	31 c0       	rjmp	.+98     	; 0x1bae <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    1b52:	e3 e3       	ldi	r30, 0x33	; 51
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	88 2f       	mov	r24, r24
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a9 01       	movw	r20, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <DIO_ES_tGetPinValue+0x9c>
    1b66:	55 95       	asr	r21
    1b68:	47 95       	ror	r20
    1b6a:	8a 95       	dec	r24
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <DIO_ES_tGetPinValue+0x98>
    1b6e:	ca 01       	movw	r24, r20
    1b70:	81 70       	andi	r24, 0x01	; 1
    1b72:	eb 81       	ldd	r30, Y+3	; 0x03
    1b74:	fc 81       	ldd	r31, Y+4	; 0x04
    1b76:	80 83       	st	Z, r24
    1b78:	1a c0       	rjmp	.+52     	; 0x1bae <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    1b80:	e0 e3       	ldi	r30, 0x30	; 48
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_ES_tGetPinValue+0xca>
    1b94:	55 95       	asr	r21
    1b96:	47 95       	ror	r20
    1b98:	8a 95       	dec	r24
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_ES_tGetPinValue+0xc6>
    1b9c:	ca 01       	movw	r24, r20
    1b9e:	81 70       	andi	r24, 0x01	; 1
    1ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba4:	80 83       	st	Z, r24
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1ba8:	51 e0       	ldi	r21, 0x01	; 1
    1baa:	5d 83       	std	Y+5, r21	; 0x05
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    1bae:	1d 82       	std	Y+5, r1	; 0x05
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <DIO_ES_tSetPortDirection+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <DIO_ES_tSetPortDirection+0x8>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	31 f0       	breq	.+12     	; 0x1be6 <DIO_ES_tSetPortDirection+0x24>
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    1be0:	21 e0       	ldi	r18, 0x01	; 1
    1be2:	2d 83       	std	Y+5, r18	; 0x05
    1be4:	53 c0       	rjmp	.+166    	; 0x1c8c <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3c 83       	std	Y+4, r19	; 0x04
    1bee:	2b 83       	std	Y+3, r18	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f1       	breq	.+66     	; 0x1c3c <DIO_ES_tSetPortDirection+0x7a>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <DIO_ES_tSetPortDirection+0x4c>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <DIO_ES_tSetPortDirection+0x62>
    1c0c:	3b c0       	rjmp	.+118    	; 0x1c84 <DIO_ES_tSetPortDirection+0xc2>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	f1 f0       	breq	.+60     	; 0x1c54 <DIO_ES_tSetPortDirection+0x92>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	29 f1       	breq	.+74     	; 0x1c6c <DIO_ES_tSetPortDirection+0xaa>
    1c22:	30 c0       	rjmp	.+96     	; 0x1c84 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	29 f4       	brne	.+10     	; 0x1c34 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    1c2a:	ea e3       	ldi	r30, 0x3A	; 58
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	80 83       	st	Z, r24
    1c32:	2b c0       	rjmp	.+86     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    1c34:	ea e3       	ldi	r30, 0x3A	; 58
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	10 82       	st	Z, r1
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	29 f4       	brne	.+10     	; 0x1c4c <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    1c42:	e7 e3       	ldi	r30, 0x37	; 55
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	80 83       	st	Z, r24
    1c4a:	1f c0       	rjmp	.+62     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    1c4c:	e7 e3       	ldi	r30, 0x37	; 55
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	10 82       	st	Z, r1
    1c52:	1b c0       	rjmp	.+54     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    1c5a:	e4 e3       	ldi	r30, 0x34	; 52
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	80 83       	st	Z, r24
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    1c64:	e4 e3       	ldi	r30, 0x34	; 52
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	10 82       	st	Z, r1
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	29 f4       	brne	.+10     	; 0x1c7c <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    1c72:	e1 e3       	ldi	r30, 0x31	; 49
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	80 83       	st	Z, r24
    1c7a:	07 c0       	rjmp	.+14     	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1c7c:	e1 e3       	ldi	r30, 0x31	; 49
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	10 82       	st	Z, r1
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	9d 83       	std	Y+5, r25	; 0x05
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1c8a:	1d 82       	std	Y+5, r1	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <DIO_ES_tSetPortValue+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <DIO_ES_tSetPortValue+0x8>
    1ca6:	0f 92       	push	r0
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <DIO_ES_tSetPortValue+0x24>
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	88 23       	and	r24, r24
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	2d 83       	std	Y+5, r18	; 0x05
    1cc0:	53 c0       	rjmp	.+166    	; 0x1d68 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3c 83       	std	Y+4, r19	; 0x04
    1cca:	2b 83       	std	Y+3, r18	; 0x03
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	09 f1       	breq	.+66     	; 0x1d18 <DIO_ES_tSetPortValue+0x7a>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	2c f4       	brge	.+10     	; 0x1cea <DIO_ES_tSetPortValue+0x4c>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <DIO_ES_tSetPortValue+0x62>
    1ce8:	3b c0       	rjmp	.+118    	; 0x1d60 <DIO_ES_tSetPortValue+0xc2>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	f1 f0       	breq	.+60     	; 0x1d30 <DIO_ES_tSetPortValue+0x92>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	29 f1       	breq	.+74     	; 0x1d48 <DIO_ES_tSetPortValue+0xaa>
    1cfe:	30 c0       	rjmp	.+96     	; 0x1d60 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	29 f4       	brne	.+10     	; 0x1d10 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1d06:	eb e3       	ldi	r30, 0x3B	; 59
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	80 83       	st	Z, r24
    1d0e:	2b c0       	rjmp	.+86     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    1d10:	eb e3       	ldi	r30, 0x3B	; 59
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	10 82       	st	Z, r1
    1d16:	27 c0       	rjmp	.+78     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	29 f4       	brne	.+10     	; 0x1d28 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    1d1e:	e8 e3       	ldi	r30, 0x38	; 56
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	8f ef       	ldi	r24, 0xFF	; 255
    1d24:	80 83       	st	Z, r24
    1d26:	1f c0       	rjmp	.+62     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    1d28:	e8 e3       	ldi	r30, 0x38	; 56
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	10 82       	st	Z, r1
    1d2e:	1b c0       	rjmp	.+54     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	29 f4       	brne	.+10     	; 0x1d40 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    1d36:	e5 e3       	ldi	r30, 0x35	; 53
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	80 83       	st	Z, r24
    1d3e:	13 c0       	rjmp	.+38     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    1d40:	e5 e3       	ldi	r30, 0x35	; 53
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	10 82       	st	Z, r1
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	29 f4       	brne	.+10     	; 0x1d58 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    1d4e:	e2 e3       	ldi	r30, 0x32	; 50
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	80 83       	st	Z, r24
    1d56:	07 c0       	rjmp	.+14     	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	10 82       	st	Z, r1
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	9d 83       	std	Y+5, r25	; 0x05
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1d66:	1d 82       	std	Y+5, r1	; 0x05
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <DIO_ES_tTOGPin+0x6>
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	88 30       	cpi	r24, 0x08	; 8
    1d8e:	18 f0       	brcs	.+6      	; 0x1d96 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	8b 83       	std	Y+3, r24	; 0x03
    1d94:	60 c0       	rjmp	.+192    	; 0x1e56 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	88 23       	and	r24, r24
    1d9a:	a1 f4       	brne	.+40     	; 0x1dc4 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_ES_tTOGPin+0x40>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_ES_tTOGPin+0x3c>
    1dbe:	84 27       	eor	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	48 c0       	rjmp	.+144    	; 0x1e54 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	a1 f4       	brne	.+40     	; 0x1df2 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    1dca:	a8 e3       	ldi	r26, 0x38	; 56
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_ES_tTOGPin+0x6e>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_ES_tTOGPin+0x6a>
    1dec:	84 27       	eor	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	31 c0       	rjmp	.+98     	; 0x1e54 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	a1 f4       	brne	.+40     	; 0x1e20 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1df8:	a5 e3       	ldi	r26, 0x35	; 53
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e3       	ldi	r30, 0x35	; 53
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	48 2f       	mov	r20, r24
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	02 2e       	mov	r0, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <DIO_ES_tTOGPin+0x9c>
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	0a 94       	dec	r0
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <DIO_ES_tTOGPin+0x98>
    1e1a:	84 27       	eor	r24, r20
    1e1c:	8c 93       	st	X, r24
    1e1e:	1a c0       	rjmp	.+52     	; 0x1e54 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	a1 f4       	brne	.+40     	; 0x1e4e <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    1e26:	a2 e3       	ldi	r26, 0x32	; 50
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e2 e3       	ldi	r30, 0x32	; 50
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_ES_tTOGPin+0xca>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_ES_tTOGPin+0xc6>
    1e48:	84 27       	eor	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	03 c0       	rjmp	.+6      	; 0x1e54 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1e54:	1b 82       	std	Y+3, r1	; 0x03
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_ES_tInit+0x6>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    1e6e:	1a 82       	std	Y+2, r1	; 0x02
    1e70:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    1e72:	1a 82       	std	Y+2, r1	; 0x02
    1e74:	19 82       	std	Y+1, r1	; 0x01
    1e76:	a3 c2       	rjmp	.+1350   	; 0x23be <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	fc 01       	movw	r30, r24
    1e86:	e7 57       	subi	r30, 0x77	; 119
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 23       	and	r24, r24
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <DIO_ES_tInit+0x2e>
    1e90:	9b c0       	rjmp	.+310    	; 0x1fc8 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e7 57       	subi	r30, 0x77	; 119
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	e9 f4       	brne	.+58     	; 0x1ee6 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1eac:	aa e3       	ldi	r26, 0x3A	; 58
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ea e3       	ldi	r30, 0x3A	; 58
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e6 57       	subi	r30, 0x76	; 118
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_ES_tInit+0x78>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <DIO_ES_tInit+0x74>
    1ee0:	84 2b       	or	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	67 c2       	rjmp	.+1230   	; 0x23b4 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1ee6:	aa e3       	ldi	r26, 0x3A	; 58
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	ea e3       	ldi	r30, 0x3A	; 58
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	fc 01       	movw	r30, r24
    1f00:	e6 57       	subi	r30, 0x76	; 118
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_ES_tInit+0xb2>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_ES_tInit+0xae>
    1f1a:	80 95       	com	r24
    1f1c:	84 23       	and	r24, r20
    1f1e:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	e4 57       	subi	r30, 0x74	; 116
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	e9 f4       	brne	.+58     	; 0x1f72 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1f38:	ab e3       	ldi	r26, 0x3B	; 59
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	eb e3       	ldi	r30, 0x3B	; 59
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	fc 01       	movw	r30, r24
    1f52:	e6 57       	subi	r30, 0x76	; 118
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <DIO_ES_tInit+0x104>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <DIO_ES_tInit+0x100>
    1f6c:	84 2b       	or	r24, r20
    1f6e:	8c 93       	st	X, r24
    1f70:	21 c2       	rjmp	.+1090   	; 0x23b4 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e4 57       	subi	r30, 0x74	; 116
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	88 23       	and	r24, r24
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <DIO_ES_tInit+0x128>
    1f8a:	14 c2       	rjmp	.+1064   	; 0x23b4 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1f8c:	ab e3       	ldi	r26, 0x3B	; 59
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	eb e3       	ldi	r30, 0x3B	; 59
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e6 57       	subi	r30, 0x76	; 118
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <DIO_ES_tInit+0x158>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <DIO_ES_tInit+0x154>
    1fc0:	80 95       	com	r24
    1fc2:	84 23       	and	r24, r20
    1fc4:	8c 93       	st	X, r24
    1fc6:	f6 c1       	rjmp	.+1004   	; 0x23b4 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e7 57       	subi	r30, 0x77	; 119
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <DIO_ES_tInit+0x17e>
    1fe0:	9b c0       	rjmp	.+310    	; 0x2118 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	e7 57       	subi	r30, 0x77	; 119
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	e9 f4       	brne	.+58     	; 0x2036 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1ffc:	a7 e3       	ldi	r26, 0x37	; 55
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e7 e3       	ldi	r30, 0x37	; 55
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	fc 01       	movw	r30, r24
    2016:	e6 57       	subi	r30, 0x76	; 118
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 2e       	mov	r0, r18
    2026:	02 c0       	rjmp	.+4      	; 0x202c <DIO_ES_tInit+0x1c8>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <DIO_ES_tInit+0x1c4>
    2030:	84 2b       	or	r24, r20
    2032:	8c 93       	st	X, r24
    2034:	bf c1       	rjmp	.+894    	; 0x23b4 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2036:	a7 e3       	ldi	r26, 0x37	; 55
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e7 e3       	ldi	r30, 0x37	; 55
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	48 2f       	mov	r20, r24
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	fc 01       	movw	r30, r24
    2050:	e6 57       	subi	r30, 0x76	; 118
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <DIO_ES_tInit+0x202>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <DIO_ES_tInit+0x1fe>
    206a:	80 95       	com	r24
    206c:	84 23       	and	r24, r20
    206e:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	fc 01       	movw	r30, r24
    207e:	e4 57       	subi	r30, 0x74	; 116
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	e9 f4       	brne	.+58     	; 0x20c2 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    2088:	a8 e3       	ldi	r26, 0x38	; 56
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e8 e3       	ldi	r30, 0x38	; 56
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	48 2f       	mov	r20, r24
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	fc 01       	movw	r30, r24
    20a2:	e6 57       	subi	r30, 0x76	; 118
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 2e       	mov	r0, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_ES_tInit+0x254>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_ES_tInit+0x250>
    20bc:	84 2b       	or	r24, r20
    20be:	8c 93       	st	X, r24
    20c0:	79 c1       	rjmp	.+754    	; 0x23b4 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	fc 01       	movw	r30, r24
    20d0:	e4 57       	subi	r30, 0x74	; 116
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	88 23       	and	r24, r24
    20d8:	09 f0       	breq	.+2      	; 0x20dc <DIO_ES_tInit+0x278>
    20da:	6c c1       	rjmp	.+728    	; 0x23b4 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    20dc:	ab e3       	ldi	r26, 0x3B	; 59
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	eb e3       	ldi	r30, 0x3B	; 59
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	fc 01       	movw	r30, r24
    20f6:	e6 57       	subi	r30, 0x76	; 118
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	02 2e       	mov	r0, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_ES_tInit+0x2a8>
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	0a 94       	dec	r0
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_ES_tInit+0x2a4>
    2110:	80 95       	com	r24
    2112:	84 23       	and	r24, r20
    2114:	8c 93       	st	X, r24
    2116:	4e c1       	rjmp	.+668    	; 0x23b4 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	fc 01       	movw	r30, r24
    2126:	e7 57       	subi	r30, 0x77	; 119
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	82 30       	cpi	r24, 0x02	; 2
    212e:	09 f0       	breq	.+2      	; 0x2132 <DIO_ES_tInit+0x2ce>
    2130:	9b c0       	rjmp	.+310    	; 0x2268 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	fc 01       	movw	r30, r24
    2142:	e7 57       	subi	r30, 0x77	; 119
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	e9 f4       	brne	.+58     	; 0x2186 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    214c:	a4 e3       	ldi	r26, 0x34	; 52
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e4 e3       	ldi	r30, 0x34	; 52
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	48 2f       	mov	r20, r24
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	fc 01       	movw	r30, r24
    2166:	e6 57       	subi	r30, 0x76	; 118
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <DIO_ES_tInit+0x318>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <DIO_ES_tInit+0x314>
    2180:	84 2b       	or	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	17 c1       	rjmp	.+558    	; 0x23b4 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2186:	a4 e3       	ldi	r26, 0x34	; 52
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e4 e3       	ldi	r30, 0x34	; 52
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	fc 01       	movw	r30, r24
    21a0:	e6 57       	subi	r30, 0x76	; 118
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <DIO_ES_tInit+0x352>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <DIO_ES_tInit+0x34e>
    21ba:	80 95       	com	r24
    21bc:	84 23       	and	r24, r20
    21be:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	fc 01       	movw	r30, r24
    21ce:	e4 57       	subi	r30, 0x74	; 116
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 81       	ld	r24, Z
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	e9 f4       	brne	.+58     	; 0x2212 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    21d8:	a5 e3       	ldi	r26, 0x35	; 53
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e5 e3       	ldi	r30, 0x35	; 53
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	fc 01       	movw	r30, r24
    21f2:	e6 57       	subi	r30, 0x76	; 118
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_ES_tInit+0x3a4>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_ES_tInit+0x3a0>
    220c:	84 2b       	or	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	d1 c0       	rjmp	.+418    	; 0x23b4 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	fc 01       	movw	r30, r24
    2220:	e4 57       	subi	r30, 0x74	; 116
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	88 23       	and	r24, r24
    2228:	09 f0       	breq	.+2      	; 0x222c <DIO_ES_tInit+0x3c8>
    222a:	c4 c0       	rjmp	.+392    	; 0x23b4 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    222c:	ab e3       	ldi	r26, 0x3B	; 59
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e3       	ldi	r30, 0x3B	; 59
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	fc 01       	movw	r30, r24
    2246:	e6 57       	subi	r30, 0x76	; 118
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <DIO_ES_tInit+0x3f8>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <DIO_ES_tInit+0x3f4>
    2260:	80 95       	com	r24
    2262:	84 23       	and	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	a6 c0       	rjmp	.+332    	; 0x23b4 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	fc 01       	movw	r30, r24
    2276:	e7 57       	subi	r30, 0x77	; 119
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	83 30       	cpi	r24, 0x03	; 3
    227e:	09 f0       	breq	.+2      	; 0x2282 <DIO_ES_tInit+0x41e>
    2280:	99 c0       	rjmp	.+306    	; 0x23b4 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	fc 01       	movw	r30, r24
    2292:	e7 57       	subi	r30, 0x77	; 119
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	e9 f4       	brne	.+58     	; 0x22d6 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    229c:	a1 e3       	ldi	r26, 0x31	; 49
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e1 e3       	ldi	r30, 0x31	; 49
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	fc 01       	movw	r30, r24
    22b6:	e6 57       	subi	r30, 0x76	; 118
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 2e       	mov	r0, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_ES_tInit+0x468>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	0a 94       	dec	r0
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_ES_tInit+0x464>
    22d0:	84 2b       	or	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	6f c0       	rjmp	.+222    	; 0x23b4 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    22d6:	a1 e3       	ldi	r26, 0x31	; 49
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e1 e3       	ldi	r30, 0x31	; 49
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	48 2f       	mov	r20, r24
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	fc 01       	movw	r30, r24
    22f0:	e6 57       	subi	r30, 0x76	; 118
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	02 2e       	mov	r0, r18
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <DIO_ES_tInit+0x4a2>
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	0a 94       	dec	r0
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <DIO_ES_tInit+0x49e>
    230a:	80 95       	com	r24
    230c:	84 23       	and	r24, r20
    230e:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	fc 01       	movw	r30, r24
    231e:	e4 57       	subi	r30, 0x74	; 116
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	e9 f4       	brne	.+58     	; 0x2362 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2328:	a2 e3       	ldi	r26, 0x32	; 50
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e2 e3       	ldi	r30, 0x32	; 50
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	fc 01       	movw	r30, r24
    2342:	e6 57       	subi	r30, 0x76	; 118
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <DIO_ES_tInit+0x4f4>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <DIO_ES_tInit+0x4f0>
    235c:	84 2b       	or	r24, r20
    235e:	8c 93       	st	X, r24
    2360:	29 c0       	rjmp	.+82     	; 0x23b4 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	fc 01       	movw	r30, r24
    2370:	e4 57       	subi	r30, 0x74	; 116
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	88 23       	and	r24, r24
    2378:	e9 f4       	brne	.+58     	; 0x23b4 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    237a:	ab e3       	ldi	r26, 0x3B	; 59
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	eb e3       	ldi	r30, 0x3B	; 59
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	fc 01       	movw	r30, r24
    2394:	e6 57       	subi	r30, 0x76	; 118
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_ES_tInit+0x546>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_ES_tInit+0x542>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	88 31       	cpi	r24, 0x18	; 24
    23c4:	91 05       	cpc	r25, r1
    23c6:	0c f4       	brge	.+2      	; 0x23ca <DIO_ES_tInit+0x566>
    23c8:	57 cd       	rjmp	.-1362   	; 0x1e78 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    23ca:	80 e0       	ldi	r24, 0x00	; 0
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	e0 97       	sbiw	r28, 0x30	; 48
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	62 e0       	ldi	r22, 0x02	; 2
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e2       	ldi	r26, 0x20	; 32
    23fa:	b1 e4       	ldi	r27, 0x41	; 65
    23fc:	8d a7       	std	Y+45, r24	; 0x2d
    23fe:	9e a7       	std	Y+46, r25	; 0x2e
    2400:	af a7       	std	Y+47, r26	; 0x2f
    2402:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2404:	6d a5       	ldd	r22, Y+45	; 0x2d
    2406:	7e a5       	ldd	r23, Y+46	; 0x2e
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	2b ea       	ldi	r18, 0xAB	; 171
    240e:	3a ea       	ldi	r19, 0xAA	; 170
    2410:	4a ea       	ldi	r20, 0xAA	; 170
    2412:	50 e4       	ldi	r21, 0x40	; 64
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	89 a7       	std	Y+41, r24	; 0x29
    241e:	9a a7       	std	Y+42, r25	; 0x2a
    2420:	ab a7       	std	Y+43, r26	; 0x2b
    2422:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2424:	69 a5       	ldd	r22, Y+41	; 0x29
    2426:	7a a5       	ldd	r23, Y+42	; 0x2a
    2428:	8b a5       	ldd	r24, Y+43	; 0x2b
    242a:	9c a5       	ldd	r25, Y+44	; 0x2c
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	1c f4       	brge	.+6      	; 0x2442 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	88 a7       	std	Y+40, r24	; 0x28
    2440:	91 c0       	rjmp	.+290    	; 0x2564 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    2442:	69 a5       	ldd	r22, Y+41	; 0x29
    2444:	7a a5       	ldd	r23, Y+42	; 0x2a
    2446:	8b a5       	ldd	r24, Y+43	; 0x2b
    2448:	9c a5       	ldd	r25, Y+44	; 0x2c
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	53 e4       	ldi	r21, 0x43	; 67
    2452:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	0c f0       	brlt	.+2      	; 0x245c <LCD_ES_tTrigger_Enable+0x86>
    245a:	7b c0       	rjmp	.+246    	; 0x2552 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    245c:	6d a5       	ldd	r22, Y+45	; 0x2d
    245e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	54 e4       	ldi	r21, 0x44	; 68
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	8c a3       	std	Y+36, r24	; 0x24
    2476:	9d a3       	std	Y+37, r25	; 0x25
    2478:	ae a3       	std	Y+38, r26	; 0x26
    247a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	6c a1       	ldd	r22, Y+36	; 0x24
    247e:	7d a1       	ldd	r23, Y+37	; 0x25
    2480:	8e a1       	ldd	r24, Y+38	; 0x26
    2482:	9f a1       	ldd	r25, Y+39	; 0x27
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a e7       	ldi	r20, 0x7A	; 122
    248a:	55 e4       	ldi	r21, 0x45	; 69
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	88 a3       	std	Y+32, r24	; 0x20
    2496:	99 a3       	std	Y+33, r25	; 0x21
    2498:	aa a3       	std	Y+34, r26	; 0x22
    249a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    249c:	68 a1       	ldd	r22, Y+32	; 0x20
    249e:	79 a1       	ldd	r23, Y+33	; 0x21
    24a0:	8a a1       	ldd	r24, Y+34	; 0x22
    24a2:	9b a1       	ldd	r25, Y+35	; 0x23
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9f 8f       	std	Y+31, r25	; 0x1f
    24ba:	8e 8f       	std	Y+30, r24	; 0x1e
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    24be:	68 a1       	ldd	r22, Y+32	; 0x20
    24c0:	79 a1       	ldd	r23, Y+33	; 0x21
    24c2:	8a a1       	ldd	r24, Y+34	; 0x22
    24c4:	9b a1       	ldd	r25, Y+35	; 0x23
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	6c a1       	ldd	r22, Y+36	; 0x24
    24d8:	7d a1       	ldd	r23, Y+37	; 0x25
    24da:	8e a1       	ldd	r24, Y+38	; 0x26
    24dc:	9f a1       	ldd	r25, Y+39	; 0x27
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9f 8f       	std	Y+31, r25	; 0x1f
    24fc:	8e 8f       	std	Y+30, r24	; 0x1e
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_ES_tTrigger_Enable+0x148>
    2500:	80 e9       	ldi	r24, 0x90	; 144
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	9d 8f       	std	Y+29, r25	; 0x1d
    2506:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2508:	8c 8d       	ldd	r24, Y+28	; 0x1c
    250a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_ES_tTrigger_Enable+0x136>
    2510:	9d 8f       	std	Y+29, r25	; 0x1d
    2512:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2516:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9f 8f       	std	Y+31, r25	; 0x1f
    251c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2520:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <LCD_ES_tTrigger_Enable+0x12a>
    2526:	24 c0       	rjmp	.+72     	; 0x2570 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	68 a1       	ldd	r22, Y+32	; 0x20
    252a:	79 a1       	ldd	r23, Y+33	; 0x21
    252c:	8a a1       	ldd	r24, Y+34	; 0x22
    252e:	9b a1       	ldd	r25, Y+35	; 0x23
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9f 8f       	std	Y+31, r25	; 0x1f
    253a:	8e 8f       	std	Y+30, r24	; 0x1e
    253c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    253e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2540:	9b 8f       	std	Y+27, r25	; 0x1b
    2542:	8a 8f       	std	Y+26, r24	; 0x1a
    2544:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2546:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_ES_tTrigger_Enable+0x172>
    254c:	9b 8f       	std	Y+27, r25	; 0x1b
    254e:	8a 8f       	std	Y+26, r24	; 0x1a
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2552:	69 a5       	ldd	r22, Y+41	; 0x29
    2554:	7a a5       	ldd	r23, Y+42	; 0x2a
    2556:	8b a5       	ldd	r24, Y+43	; 0x2b
    2558:	9c a5       	ldd	r25, Y+44	; 0x2c
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	88 a7       	std	Y+40, r24	; 0x28
    2564:	88 a5       	ldd	r24, Y+40	; 0x28
    2566:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2568:	89 8d       	ldd	r24, Y+25	; 0x19
    256a:	8a 95       	dec	r24
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_ES_tTrigger_Enable+0x194>
    256e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	62 e0       	ldi	r22, 0x02	; 2
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	aa ef       	ldi	r26, 0xFA	; 250
    2580:	b4 e4       	ldi	r27, 0x44	; 68
    2582:	8d 8b       	std	Y+21, r24	; 0x15
    2584:	9e 8b       	std	Y+22, r25	; 0x16
    2586:	af 8b       	std	Y+23, r26	; 0x17
    2588:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    258a:	6d 89       	ldd	r22, Y+21	; 0x15
    258c:	7e 89       	ldd	r23, Y+22	; 0x16
    258e:	8f 89       	ldd	r24, Y+23	; 0x17
    2590:	98 8d       	ldd	r25, Y+24	; 0x18
    2592:	2b ea       	ldi	r18, 0xAB	; 171
    2594:	3a ea       	ldi	r19, 0xAA	; 170
    2596:	4a ea       	ldi	r20, 0xAA	; 170
    2598:	50 e4       	ldi	r21, 0x40	; 64
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	89 8b       	std	Y+17, r24	; 0x11
    25a4:	9a 8b       	std	Y+18, r25	; 0x12
    25a6:	ab 8b       	std	Y+19, r26	; 0x13
    25a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25aa:	69 89       	ldd	r22, Y+17	; 0x11
    25ac:	7a 89       	ldd	r23, Y+18	; 0x12
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	1c f4       	brge	.+6      	; 0x25c8 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	88 8b       	std	Y+16, r24	; 0x10
    25c6:	91 c0       	rjmp	.+290    	; 0x26ea <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    25c8:	69 89       	ldd	r22, Y+17	; 0x11
    25ca:	7a 89       	ldd	r23, Y+18	; 0x12
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	53 e4       	ldi	r21, 0x43	; 67
    25d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25dc:	18 16       	cp	r1, r24
    25de:	0c f0       	brlt	.+2      	; 0x25e2 <LCD_ES_tTrigger_Enable+0x20c>
    25e0:	7b c0       	rjmp	.+246    	; 0x26d8 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    25e2:	6d 89       	ldd	r22, Y+21	; 0x15
    25e4:	7e 89       	ldd	r23, Y+22	; 0x16
    25e6:	8f 89       	ldd	r24, Y+23	; 0x17
    25e8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a e7       	ldi	r20, 0x7A	; 122
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8c 87       	std	Y+12, r24	; 0x0c
    25fc:	9d 87       	std	Y+13, r25	; 0x0d
    25fe:	ae 87       	std	Y+14, r26	; 0x0e
    2600:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6c 85       	ldd	r22, Y+12	; 0x0c
    2604:	7d 85       	ldd	r23, Y+13	; 0x0d
    2606:	8e 85       	ldd	r24, Y+14	; 0x0e
    2608:	9f 85       	ldd	r25, Y+15	; 0x0f
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a e7       	ldi	r20, 0x7A	; 122
    2610:	55 e4       	ldi	r21, 0x45	; 69
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	88 87       	std	Y+8, r24	; 0x08
    261c:	99 87       	std	Y+9, r25	; 0x09
    261e:	aa 87       	std	Y+10, r26	; 0x0a
    2620:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2622:	68 85       	ldd	r22, Y+8	; 0x08
    2624:	79 85       	ldd	r23, Y+9	; 0x09
    2626:	8a 85       	ldd	r24, Y+10	; 0x0a
    2628:	9b 85       	ldd	r25, Y+11	; 0x0b
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9f 83       	std	Y+7, r25	; 0x07
    2640:	8e 83       	std	Y+6, r24	; 0x06
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    2644:	68 85       	ldd	r22, Y+8	; 0x08
    2646:	79 85       	ldd	r23, Y+9	; 0x09
    2648:	8a 85       	ldd	r24, Y+10	; 0x0a
    264a:	9b 85       	ldd	r25, Y+11	; 0x0b
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6c 85       	ldd	r22, Y+12	; 0x0c
    265e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2660:	8e 85       	ldd	r24, Y+14	; 0x0e
    2662:	9f 85       	ldd	r25, Y+15	; 0x0f
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9f 83       	std	Y+7, r25	; 0x07
    2682:	8e 83       	std	Y+6, r24	; 0x06
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <LCD_ES_tTrigger_Enable+0x2ce>
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	9d 83       	std	Y+5, r25	; 0x05
    268c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <LCD_ES_tTrigger_Enable+0x2bc>
    2696:	9d 83       	std	Y+5, r25	; 0x05
    2698:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	9f 81       	ldd	r25, Y+7	; 0x07
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9f 83       	std	Y+7, r25	; 0x07
    26a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8e 81       	ldd	r24, Y+6	; 0x06
    26a6:	9f 81       	ldd	r25, Y+7	; 0x07
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <LCD_ES_tTrigger_Enable+0x2b0>
    26ac:	24 c0       	rjmp	.+72     	; 0x26f6 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	68 85       	ldd	r22, Y+8	; 0x08
    26b0:	79 85       	ldd	r23, Y+9	; 0x09
    26b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9f 83       	std	Y+7, r25	; 0x07
    26c0:	8e 83       	std	Y+6, r24	; 0x06
    26c2:	8e 81       	ldd	r24, Y+6	; 0x06
    26c4:	9f 81       	ldd	r25, Y+7	; 0x07
    26c6:	9b 83       	std	Y+3, r25	; 0x03
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	9b 81       	ldd	r25, Y+3	; 0x03
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_ES_tTrigger_Enable+0x2f8>
    26d2:	9b 83       	std	Y+3, r25	; 0x03
    26d4:	8a 83       	std	Y+2, r24	; 0x02
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26d8:	69 89       	ldd	r22, Y+17	; 0x11
    26da:	7a 89       	ldd	r23, Y+18	; 0x12
    26dc:	8b 89       	ldd	r24, Y+19	; 0x13
    26de:	9c 89       	ldd	r25, Y+20	; 0x14
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	88 8b       	std	Y+16, r24	; 0x10
    26ea:	88 89       	ldd	r24, Y+16	; 0x10
    26ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8a 95       	dec	r24
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_ES_tTrigger_Enable+0x31a>
    26f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    26f6:	80 e0       	ldi	r24, 0x00	; 0
}
    26f8:	e0 96       	adiw	r28, 0x30	; 48
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2718:	88 e2       	ldi	r24, 0x28	; 40
    271a:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    271e:	8e e0       	ldi	r24, 0x0E	; 14
    2720:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2724:	86 e0       	ldi	r24, 0x06	; 6
    2726:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
	return ES_OK;
    2730:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	2e 97       	sbiw	r28, 0x0e	; 14
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e0       	ldi	r26, 0x00	; 0
    2758:	b0 e4       	ldi	r27, 0x40	; 64
    275a:	8b 87       	std	Y+11, r24	; 0x0b
    275c:	9c 87       	std	Y+12, r25	; 0x0c
    275e:	ad 87       	std	Y+13, r26	; 0x0d
    2760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	6b 85       	ldd	r22, Y+11	; 0x0b
    2764:	7c 85       	ldd	r23, Y+12	; 0x0c
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a e7       	ldi	r20, 0x7A	; 122
    2770:	55 e4       	ldi	r21, 0x45	; 69
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	8f 83       	std	Y+7, r24	; 0x07
    277c:	98 87       	std	Y+8, r25	; 0x08
    277e:	a9 87       	std	Y+9, r26	; 0x09
    2780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	2c f4       	brge	.+10     	; 0x27a4 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    27a4:	6f 81       	ldd	r22, Y+7	; 0x07
    27a6:	78 85       	ldd	r23, Y+8	; 0x08
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f5       	brge	.+82     	; 0x280e <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27be:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <lcd_ES_tclear+0xcc>
    27e6:	80 e9       	ldi	r24, 0x90	; 144
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <lcd_ES_tclear+0xba>
    27f6:	9c 83       	std	Y+4, r25	; 0x04
    27f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <lcd_ES_tclear+0xae>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <lcd_ES_tclear+0xf6>
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2836:	80 e0       	ldi	r24, 0x00	; 0
}
    2838:	2e 96       	adiw	r28, 0x0e	; 14
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	0f 92       	push	r0
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	88 23       	and	r24, r24
    286e:	34 f4       	brge	.+12     	; 0x287c <Lcd_ES_tsendCmd+0x32>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	66 e0       	ldi	r22, 0x06	; 6
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    287a:	05 c0       	rjmp	.+10     	; 0x2886 <Lcd_ES_tsendCmd+0x3c>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	66 e0       	ldi	r22, 0x06	; 6
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	82 95       	swap	r24
    288a:	86 95       	lsr	r24
    288c:	86 95       	lsr	r24
    288e:	83 70       	andi	r24, 0x03	; 3
    2890:	88 2f       	mov	r24, r24
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	81 70       	andi	r24, 0x01	; 1
    2896:	90 70       	andi	r25, 0x00	; 0
    2898:	88 23       	and	r24, r24
    289a:	31 f0       	breq	.+12     	; 0x28a8 <Lcd_ES_tsendCmd+0x5e>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	65 e0       	ldi	r22, 0x05	; 5
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    28a6:	05 c0       	rjmp	.+10     	; 0x28b2 <Lcd_ES_tsendCmd+0x68>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	82 95       	swap	r24
    28b6:	86 95       	lsr	r24
    28b8:	87 70       	andi	r24, 0x07	; 7
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	81 70       	andi	r24, 0x01	; 1
    28c0:	90 70       	andi	r25, 0x00	; 0
    28c2:	88 23       	and	r24, r24
    28c4:	31 f0       	breq	.+12     	; 0x28d2 <Lcd_ES_tsendCmd+0x88>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	64 e0       	ldi	r22, 0x04	; 4
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    28d0:	05 c0       	rjmp	.+10     	; 0x28dc <Lcd_ES_tsendCmd+0x92>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	64 e0       	ldi	r22, 0x04	; 4
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	82 95       	swap	r24
    28e0:	8f 70       	andi	r24, 0x0F	; 15
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	81 70       	andi	r24, 0x01	; 1
    28e8:	90 70       	andi	r25, 0x00	; 0
    28ea:	88 23       	and	r24, r24
    28ec:	31 f0       	breq	.+12     	; 0x28fa <Lcd_ES_tsendCmd+0xb0>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	63 e0       	ldi	r22, 0x03	; 3
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    28f8:	05 c0       	rjmp	.+10     	; 0x2904 <Lcd_ES_tsendCmd+0xba>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	63 e0       	ldi	r22, 0x03	; 3
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2904:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	86 95       	lsr	r24
    290c:	86 95       	lsr	r24
    290e:	86 95       	lsr	r24
    2910:	88 2f       	mov	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	81 70       	andi	r24, 0x01	; 1
    2916:	90 70       	andi	r25, 0x00	; 0
    2918:	88 23       	and	r24, r24
    291a:	31 f0       	breq	.+12     	; 0x2928 <Lcd_ES_tsendCmd+0xde>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	66 e0       	ldi	r22, 0x06	; 6
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2926:	05 c0       	rjmp	.+10     	; 0x2932 <Lcd_ES_tsendCmd+0xe8>
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	66 e0       	ldi	r22, 0x06	; 6
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	86 95       	lsr	r24
    2936:	86 95       	lsr	r24
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	81 70       	andi	r24, 0x01	; 1
    293e:	90 70       	andi	r25, 0x00	; 0
    2940:	88 23       	and	r24, r24
    2942:	31 f0       	breq	.+12     	; 0x2950 <Lcd_ES_tsendCmd+0x106>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	65 e0       	ldi	r22, 0x05	; 5
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    294e:	05 c0       	rjmp	.+10     	; 0x295a <Lcd_ES_tsendCmd+0x110>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	65 e0       	ldi	r22, 0x05	; 5
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	86 95       	lsr	r24
    295e:	88 2f       	mov	r24, r24
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	81 70       	andi	r24, 0x01	; 1
    2964:	90 70       	andi	r25, 0x00	; 0
    2966:	88 23       	and	r24, r24
    2968:	31 f0       	breq	.+12     	; 0x2976 <Lcd_ES_tsendCmd+0x12c>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	64 e0       	ldi	r22, 0x04	; 4
    296e:	41 e0       	ldi	r20, 0x01	; 1
    2970:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <Lcd_ES_tsendCmd+0x136>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	64 e0       	ldi	r22, 0x04	; 4
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	81 70       	andi	r24, 0x01	; 1
    2988:	90 70       	andi	r25, 0x00	; 0
    298a:	88 23       	and	r24, r24
    298c:	31 f0       	breq	.+12     	; 0x299a <Lcd_ES_tsendCmd+0x150>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	63 e0       	ldi	r22, 0x03	; 3
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2998:	05 c0       	rjmp	.+10     	; 0x29a4 <Lcd_ES_tsendCmd+0x15a>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	63 e0       	ldi	r22, 0x03	; 3
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    29a4:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    29a8:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    29aa:	0f 90       	pop	r0
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	08 95       	ret

000029b2 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    29b2:	df 93       	push	r29
    29b4:	cf 93       	push	r28
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	88 23       	and	r24, r24
    29d6:	34 f4       	brge	.+12     	; 0x29e4 <Lcd_ES_tsendChar+0x32>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	66 e0       	ldi	r22, 0x06	; 6
    29dc:	41 e0       	ldi	r20, 0x01	; 1
    29de:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    29e2:	05 c0       	rjmp	.+10     	; 0x29ee <Lcd_ES_tsendChar+0x3c>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	66 e0       	ldi	r22, 0x06	; 6
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	82 95       	swap	r24
    29f2:	86 95       	lsr	r24
    29f4:	86 95       	lsr	r24
    29f6:	83 70       	andi	r24, 0x03	; 3
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	81 70       	andi	r24, 0x01	; 1
    29fe:	90 70       	andi	r25, 0x00	; 0
    2a00:	88 23       	and	r24, r24
    2a02:	31 f0       	breq	.+12     	; 0x2a10 <Lcd_ES_tsendChar+0x5e>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	65 e0       	ldi	r22, 0x05	; 5
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <Lcd_ES_tsendChar+0x68>
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	65 e0       	ldi	r22, 0x05	; 5
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	82 95       	swap	r24
    2a1e:	86 95       	lsr	r24
    2a20:	87 70       	andi	r24, 0x07	; 7
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	81 70       	andi	r24, 0x01	; 1
    2a28:	90 70       	andi	r25, 0x00	; 0
    2a2a:	88 23       	and	r24, r24
    2a2c:	31 f0       	breq	.+12     	; 0x2a3a <Lcd_ES_tsendChar+0x88>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	64 e0       	ldi	r22, 0x04	; 4
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2a38:	05 c0       	rjmp	.+10     	; 0x2a44 <Lcd_ES_tsendChar+0x92>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	64 e0       	ldi	r22, 0x04	; 4
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	82 95       	swap	r24
    2a48:	8f 70       	andi	r24, 0x0F	; 15
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	81 70       	andi	r24, 0x01	; 1
    2a50:	90 70       	andi	r25, 0x00	; 0
    2a52:	88 23       	and	r24, r24
    2a54:	31 f0       	breq	.+12     	; 0x2a62 <Lcd_ES_tsendChar+0xb0>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	63 e0       	ldi	r22, 0x03	; 3
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2a60:	05 c0       	rjmp	.+10     	; 0x2a6c <Lcd_ES_tsendChar+0xba>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	63 e0       	ldi	r22, 0x03	; 3
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2a6c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	86 95       	lsr	r24
    2a74:	86 95       	lsr	r24
    2a76:	86 95       	lsr	r24
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	81 70       	andi	r24, 0x01	; 1
    2a7e:	90 70       	andi	r25, 0x00	; 0
    2a80:	88 23       	and	r24, r24
    2a82:	31 f0       	breq	.+12     	; 0x2a90 <Lcd_ES_tsendChar+0xde>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	66 e0       	ldi	r22, 0x06	; 6
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2a8e:	05 c0       	rjmp	.+10     	; 0x2a9a <Lcd_ES_tsendChar+0xe8>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	66 e0       	ldi	r22, 0x06	; 6
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	86 95       	lsr	r24
    2a9e:	86 95       	lsr	r24
    2aa0:	88 2f       	mov	r24, r24
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	81 70       	andi	r24, 0x01	; 1
    2aa6:	90 70       	andi	r25, 0x00	; 0
    2aa8:	88 23       	and	r24, r24
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <Lcd_ES_tsendChar+0x106>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	65 e0       	ldi	r22, 0x05	; 5
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2ab6:	05 c0       	rjmp	.+10     	; 0x2ac2 <Lcd_ES_tsendChar+0x110>
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	65 e0       	ldi	r22, 0x05	; 5
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	86 95       	lsr	r24
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	81 70       	andi	r24, 0x01	; 1
    2acc:	90 70       	andi	r25, 0x00	; 0
    2ace:	88 23       	and	r24, r24
    2ad0:	31 f0       	breq	.+12     	; 0x2ade <Lcd_ES_tsendChar+0x12c>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	64 e0       	ldi	r22, 0x04	; 4
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2adc:	05 c0       	rjmp	.+10     	; 0x2ae8 <Lcd_ES_tsendChar+0x136>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	64 e0       	ldi	r22, 0x04	; 4
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	81 70       	andi	r24, 0x01	; 1
    2af0:	90 70       	andi	r25, 0x00	; 0
    2af2:	88 23       	and	r24, r24
    2af4:	31 f0       	breq	.+12     	; 0x2b02 <Lcd_ES_tsendChar+0x150>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	63 e0       	ldi	r22, 0x03	; 3
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
    2b00:	05 c0       	rjmp	.+10     	; 0x2b0c <Lcd_ES_tsendChar+0x15a>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	63 e0       	ldi	r22, 0x03	; 3
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2b0c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2b10:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <Lcd_ES_tsendString+0x6>
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	9b 83       	std	Y+3, r25	; 0x03
    2b28:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	61 e0       	ldi	r22, 0x01	; 1
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	0e c0       	rjmp	.+28     	; 0x2b5e <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e2 0f       	add	r30, r18
    2b50:	f3 1f       	adc	r31, r19
    2b52:	80 81       	ld	r24, Z
    2b54:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <Lcd_ES_tsendChar>
		i++;
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	8f 5f       	subi	r24, 0xFF	; 255
    2b5c:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	9b 81       	ldd	r25, Y+3	; 0x03
    2b68:	fc 01       	movw	r30, r24
    2b6a:	e2 0f       	add	r30, r18
    2b6c:	f3 1f       	adc	r31, r19
    2b6e:	80 81       	ld	r24, Z
    2b70:	88 23       	and	r24, r24
    2b72:	39 f7       	brne	.-50     	; 0x2b42 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    2b74:	80 e0       	ldi	r24, 0x00	; 0
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <Lcd_ES_tsendString_xy+0x6>
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <Lcd_ES_tsendString_xy+0x8>
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	6b 83       	std	Y+3, r22	; 0x03
    2b94:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	41 e0       	ldi	r20, 0x01	; 1
    2b9c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	6c 81       	ldd	r22, Y+4	; 0x04
    2bae:	0e 94 ac 18 	call	0x3158	; 0x3158 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Lcd_ES_tsendString>
	return ES_OK;
    2bba:	80 e0       	ldi	r24, 0x00	; 0

}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	2e 97       	sbiw	r28, 0x0e	; 14
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	9e 87       	std	Y+14, r25	; 0x0e
    2be0:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	61 e0       	ldi	r22, 0x01	; 1
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2bf6:	1a 82       	std	Y+2, r1	; 0x02
    2bf8:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	11 f5       	brne	.+68     	; 0x2c46 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    2c02:	80 e3       	ldi	r24, 0x30	; 48
    2c04:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <Lcd_ES_tsendChar>
    2c08:	39 c0       	rjmp	.+114    	; 0x2c7c <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	e8 2f       	mov	r30, r24
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c14:	2a e0       	ldi	r18, 0x0A	; 10
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	b9 01       	movw	r22, r18
    2c1a:	0e 94 23 1b 	call	0x3646	; 0x3646 <__udivmodhi4>
    2c1e:	28 2f       	mov	r18, r24
    2c20:	20 5d       	subi	r18, 0xD0	; 208
    2c22:	ce 01       	movw	r24, r28
    2c24:	03 96       	adiw	r24, 0x03	; 3
    2c26:	e8 0f       	add	r30, r24
    2c28:	f9 1f       	adc	r31, r25
    2c2a:	20 83       	st	Z, r18
			num /= 10;
    2c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c30:	2a e0       	ldi	r18, 0x0A	; 10
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	b9 01       	movw	r22, r18
    2c36:	0e 94 23 1b 	call	0x3646	; 0x3646 <__udivmodhi4>
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9e 87       	std	Y+14, r25	; 0x0e
    2c3e:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	8f 5f       	subi	r24, 0xFF	; 255
    2c44:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	f1 f6       	brne	.-68     	; 0x2c0a <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	11 c0       	rjmp	.+34     	; 0x2c76 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	88 2f       	mov	r24, r24
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9c 01       	movw	r18, r24
    2c5c:	21 50       	subi	r18, 0x01	; 1
    2c5e:	30 40       	sbci	r19, 0x00	; 0
    2c60:	ce 01       	movw	r24, r28
    2c62:	03 96       	adiw	r24, 0x03	; 3
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 0f       	add	r30, r18
    2c68:	f3 1f       	adc	r31, r19
    2c6a:	80 81       	ld	r24, Z
    2c6c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	81 50       	subi	r24, 0x01	; 1
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	88 23       	and	r24, r24
    2c7a:	61 f7       	brne	.-40     	; 0x2c54 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
}
    2c7e:	2e 96       	adiw	r28, 0x0e	; 14
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	a3 97       	sbiw	r28, 0x23	; 35
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	98 a3       	std	Y+32, r25	; 0x20
    2ca6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ca8:	69 a3       	std	Y+33, r22	; 0x21
    2caa:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	41 e0       	ldi	r20, 0x01	; 1
    2cb2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>


	if(row == 1){
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <Lcd_ES_tdisplayNum_xy+0x38>
    2cc6:	76 c0       	rjmp	.+236    	; 0x2db4 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    2cc8:	80 e8       	ldi	r24, 0x80	; 128
    2cca:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a0 e8       	ldi	r26, 0x80	; 128
    2cd4:	bf e3       	ldi	r27, 0x3F	; 63
    2cd6:	89 8f       	std	Y+25, r24	; 0x19
    2cd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2cda:	ab 8f       	std	Y+27, r26	; 0x1b
    2cdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a e7       	ldi	r20, 0x7A	; 122
    2cec:	55 e4       	ldi	r21, 0x45	; 69
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8d 8b       	std	Y+21, r24	; 0x15
    2cf8:	9e 8b       	std	Y+22, r25	; 0x16
    2cfa:	af 8b       	std	Y+23, r26	; 0x17
    2cfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9c 8b       	std	Y+20, r25	; 0x14
    2d1c:	8b 8b       	std	Y+19, r24	; 0x13
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    2d20:	6d 89       	ldd	r22, Y+21	; 0x15
    2d22:	7e 89       	ldd	r23, Y+22	; 0x16
    2d24:	8f 89       	ldd	r24, Y+23	; 0x17
    2d26:	98 8d       	ldd	r25, Y+24	; 0x18
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	4c f5       	brge	.+82     	; 0x2d8a <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e2       	ldi	r20, 0x20	; 32
    2d46:	51 e4       	ldi	r21, 0x41	; 65
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9c 8b       	std	Y+20, r25	; 0x14
    2d5e:	8b 8b       	std	Y+19, r24	; 0x13
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <Lcd_ES_tdisplayNum_xy+0xf0>
    2d62:	80 e9       	ldi	r24, 0x90	; 144
    2d64:	91 e0       	ldi	r25, 0x01	; 1
    2d66:	9a 8b       	std	Y+18, r25	; 0x12
    2d68:	89 8b       	std	Y+17, r24	; 0x11
    2d6a:	89 89       	ldd	r24, Y+17	; 0x11
    2d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <Lcd_ES_tdisplayNum_xy+0xde>
    2d72:	9a 8b       	std	Y+18, r25	; 0x12
    2d74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d76:	8b 89       	ldd	r24, Y+19	; 0x13
    2d78:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	9c 8b       	std	Y+20, r25	; 0x14
    2d7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	8b 89       	ldd	r24, Y+19	; 0x13
    2d82:	9c 89       	ldd	r25, Y+20	; 0x14
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <Lcd_ES_tdisplayNum_xy+0xd2>
    2d88:	92 c0       	rjmp	.+292    	; 0x2eae <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	98 8d       	ldd	r25, Y+24	; 0x18
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9c 8b       	std	Y+20, r25	; 0x14
    2d9c:	8b 8b       	std	Y+19, r24	; 0x13
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	9c 89       	ldd	r25, Y+20	; 0x14
    2da2:	98 8b       	std	Y+16, r25	; 0x10
    2da4:	8f 87       	std	Y+15, r24	; 0x0f
    2da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da8:	98 89       	ldd	r25, Y+16	; 0x10
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <Lcd_ES_tdisplayNum_xy+0x11a>
    2dae:	98 8b       	std	Y+16, r25	; 0x10
    2db0:	8f 87       	std	Y+15, r24	; 0x0f
    2db2:	7d c0       	rjmp	.+250    	; 0x2eae <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    2db4:	89 a1       	ldd	r24, Y+33	; 0x21
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <Lcd_ES_tdisplayNum_xy+0x12c>
    2dba:	76 c0       	rjmp	.+236    	; 0x2ea8 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    2dbc:	80 ec       	ldi	r24, 0xC0	; 192
    2dbe:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a0 e2       	ldi	r26, 0x20	; 32
    2dc8:	b1 e4       	ldi	r27, 0x41	; 65
    2dca:	8b 87       	std	Y+11, r24	; 0x0b
    2dcc:	9c 87       	std	Y+12, r25	; 0x0c
    2dce:	ad 87       	std	Y+13, r26	; 0x0d
    2dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4a e7       	ldi	r20, 0x7A	; 122
    2de0:	55 e4       	ldi	r21, 0x45	; 69
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	8f 83       	std	Y+7, r24	; 0x07
    2dec:	98 87       	std	Y+8, r25	; 0x08
    2dee:	a9 87       	std	Y+9, r26	; 0x09
    2df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	2c f4       	brge	.+10     	; 0x2e14 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
    2e12:	3f c0       	rjmp	.+126    	; 0x2e92 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    2e14:	6f 81       	ldd	r22, Y+7	; 0x07
    2e16:	78 85       	ldd	r23, Y+8	; 0x08
    2e18:	89 85       	ldd	r24, Y+9	; 0x09
    2e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	4c f5       	brge	.+82     	; 0x2e7e <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e2       	ldi	r20, 0x20	; 32
    2e3a:	51 e4       	ldi	r21, 0x41	; 65
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <Lcd_ES_tdisplayNum_xy+0x1e4>
    2e56:	80 e9       	ldi	r24, 0x90	; 144
    2e58:	91 e0       	ldi	r25, 0x01	; 1
    2e5a:	9c 83       	std	Y+4, r25	; 0x04
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <Lcd_ES_tdisplayNum_xy+0x1d2>
    2e66:	9c 83       	std	Y+4, r25	; 0x04
    2e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	69 f7       	brne	.-38     	; 0x2e56 <Lcd_ES_tdisplayNum_xy+0x1c6>
    2e7c:	18 c0       	rjmp	.+48     	; 0x2eae <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e80:	78 85       	ldd	r23, Y+8	; 0x08
    2e82:	89 85       	ldd	r24, Y+9	; 0x09
    2e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <Lcd_ES_tdisplayNum_xy+0x20e>
    2ea2:	9a 83       	std	Y+2, r25	; 0x02
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	8b a3       	std	Y+35, r24	; 0x23
    2eac:	1a c0       	rjmp	.+52     	; 0x2ee2 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    2eb4:	8d 8f       	std	Y+29, r24	; 0x1d
    2eb6:	08 c0       	rjmp	.+16     	; 0x2ec8 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    2eb8:	8c e1       	ldi	r24, 0x1C	; 28
    2eba:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    2ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec8:	8a a1       	ldd	r24, Y+34	; 0x22
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ed2:	28 17       	cp	r18, r24
    2ed4:	39 07       	cpc	r19, r25
    2ed6:	84 f7       	brge	.-32     	; 0x2eb8 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eda:	98 a1       	ldd	r25, Y+32	; 0x20
    2edc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <Lcd_ES_tdisplayNum>
	return ES_OK;
    2ee0:	1b a2       	std	Y+35, r1	; 0x23
    2ee2:	8b a1       	ldd	r24, Y+35	; 0x23

}
    2ee4:	a3 96       	adiw	r28, 0x23	; 35
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
    2efe:	a2 97       	sbiw	r28, 0x22	; 34
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f0c:	68 a3       	std	Y+32, r22	; 0x20
    2f0e:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	61 e0       	ldi	r22, 0x01	; 1
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>


	if(row == 1){
    2f24:	88 a1       	ldd	r24, Y+32	; 0x20
    2f26:	81 30       	cpi	r24, 0x01	; 1
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <Lcd_ES_tsendChar_xy+0x36>
    2f2a:	76 c0       	rjmp	.+236    	; 0x3018 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    2f2c:	80 e8       	ldi	r24, 0x80	; 128
    2f2e:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a0 e8       	ldi	r26, 0x80	; 128
    2f38:	bf e3       	ldi	r27, 0x3F	; 63
    2f3a:	89 8f       	std	Y+25, r24	; 0x19
    2f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f42:	69 8d       	ldd	r22, Y+25	; 0x19
    2f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a e7       	ldi	r20, 0x7A	; 122
    2f50:	55 e4       	ldi	r21, 0x45	; 69
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8d 8b       	std	Y+21, r24	; 0x15
    2f5c:	9e 8b       	std	Y+22, r25	; 0x16
    2f5e:	af 8b       	std	Y+23, r26	; 0x17
    2f60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f62:	6d 89       	ldd	r22, Y+21	; 0x15
    2f64:	7e 89       	ldd	r23, Y+22	; 0x16
    2f66:	8f 89       	ldd	r24, Y+23	; 0x17
    2f68:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e8       	ldi	r20, 0x80	; 128
    2f70:	5f e3       	ldi	r21, 0x3F	; 63
    2f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f76:	88 23       	and	r24, r24
    2f78:	2c f4       	brge	.+10     	; 0x2f84 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9c 8b       	std	Y+20, r25	; 0x14
    2f80:	8b 8b       	std	Y+19, r24	; 0x13
    2f82:	3f c0       	rjmp	.+126    	; 0x3002 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2f84:	6d 89       	ldd	r22, Y+21	; 0x15
    2f86:	7e 89       	ldd	r23, Y+22	; 0x16
    2f88:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	4c f5       	brge	.+82     	; 0x2fee <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	51 e4       	ldi	r21, 0x41	; 65
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9c 8b       	std	Y+20, r25	; 0x14
    2fc2:	8b 8b       	std	Y+19, r24	; 0x13
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <Lcd_ES_tsendChar_xy+0xee>
    2fc6:	80 e9       	ldi	r24, 0x90	; 144
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	9a 8b       	std	Y+18, r25	; 0x12
    2fcc:	89 8b       	std	Y+17, r24	; 0x11
    2fce:	89 89       	ldd	r24, Y+17	; 0x11
    2fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <Lcd_ES_tsendChar_xy+0xdc>
    2fd6:	9a 8b       	std	Y+18, r25	; 0x12
    2fd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	8b 89       	ldd	r24, Y+19	; 0x13
    2fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9c 8b       	std	Y+20, r25	; 0x14
    2fe2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <Lcd_ES_tsendChar_xy+0xd0>
    2fec:	92 c0       	rjmp	.+292    	; 0x3112 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9c 8b       	std	Y+20, r25	; 0x14
    3000:	8b 8b       	std	Y+19, r24	; 0x13
    3002:	8b 89       	ldd	r24, Y+19	; 0x13
    3004:	9c 89       	ldd	r25, Y+20	; 0x14
    3006:	98 8b       	std	Y+16, r25	; 0x10
    3008:	8f 87       	std	Y+15, r24	; 0x0f
    300a:	8f 85       	ldd	r24, Y+15	; 0x0f
    300c:	98 89       	ldd	r25, Y+16	; 0x10
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <Lcd_ES_tsendChar_xy+0x118>
    3012:	98 8b       	std	Y+16, r25	; 0x10
    3014:	8f 87       	std	Y+15, r24	; 0x0f
    3016:	7d c0       	rjmp	.+250    	; 0x3112 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    3018:	88 a1       	ldd	r24, Y+32	; 0x20
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	09 f0       	breq	.+2      	; 0x3020 <Lcd_ES_tsendChar_xy+0x12a>
    301e:	76 c0       	rjmp	.+236    	; 0x310c <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    3020:	80 ec       	ldi	r24, 0xC0	; 192
    3022:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e2       	ldi	r26, 0x20	; 32
    302c:	b1 e4       	ldi	r27, 0x41	; 65
    302e:	8b 87       	std	Y+11, r24	; 0x0b
    3030:	9c 87       	std	Y+12, r25	; 0x0c
    3032:	ad 87       	std	Y+13, r26	; 0x0d
    3034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6b 85       	ldd	r22, Y+11	; 0x0b
    3038:	7c 85       	ldd	r23, Y+12	; 0x0c
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	55 e4       	ldi	r21, 0x45	; 69
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8f 83       	std	Y+7, r24	; 0x07
    3050:	98 87       	std	Y+8, r25	; 0x08
    3052:	a9 87       	std	Y+9, r26	; 0x09
    3054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    3078:	6f 81       	ldd	r22, Y+7	; 0x07
    307a:	78 85       	ldd	r23, Y+8	; 0x08
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6b 85       	ldd	r22, Y+11	; 0x0b
    3092:	7c 85       	ldd	r23, Y+12	; 0x0c
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <Lcd_ES_tsendChar_xy+0x1e2>
    30ba:	80 e9       	ldi	r24, 0x90	; 144
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <Lcd_ES_tsendChar_xy+0x1d0>
    30ca:	9c 83       	std	Y+4, r25	; 0x04
    30cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <Lcd_ES_tsendChar_xy+0x1c4>
    30e0:	18 c0       	rjmp	.+48     	; 0x3112 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <Lcd_ES_tsendChar_xy+0x20c>
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	8a a3       	std	Y+34, r24	; 0x22
    3110:	19 c0       	rjmp	.+50     	; 0x3144 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9e 8f       	std	Y+30, r25	; 0x1e
    3118:	8d 8f       	std	Y+29, r24	; 0x1d
    311a:	08 c0       	rjmp	.+16     	; 0x312c <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    311c:	8c e1       	ldi	r24, 0x1C	; 28
    311e:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	9e 8f       	std	Y+30, r25	; 0x1e
    312a:	8d 8f       	std	Y+29, r24	; 0x1d
    312c:	89 a1       	ldd	r24, Y+33	; 0x21
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3134:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3136:	28 17       	cp	r18, r24
    3138:	39 07       	cpc	r19, r25
    313a:	84 f7       	brge	.-32     	; 0x311c <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    313c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    313e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <Lcd_ES_tsendChar>
	return ES_OK;
    3142:	1a a2       	std	Y+34, r1	; 0x22
    3144:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3146:	a2 96       	adiw	r28, 0x22	; 34
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	00 d0       	rcall	.+0      	; 0x315e <LCD_ES_tSet_Cursor_Pos+0x6>
    315e:	00 d0       	rcall	.+0      	; 0x3160 <LCD_ES_tSet_Cursor_Pos+0x8>
    3160:	0f 92       	push	r0
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	81 50       	subi	r24, 0x01	; 1
    316e:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	3d 83       	std	Y+5, r19	; 0x05
    3178:	2c 83       	std	Y+4, r18	; 0x04
    317a:	8c 81       	ldd	r24, Y+4	; 0x04
    317c:	9d 81       	ldd	r25, Y+5	; 0x05
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	91 05       	cpc	r25, r1
    3182:	31 f0       	breq	.+12     	; 0x3190 <LCD_ES_tSet_Cursor_Pos+0x38>
    3184:	2c 81       	ldd	r18, Y+4	; 0x04
    3186:	3d 81       	ldd	r19, Y+5	; 0x05
    3188:	22 30       	cpi	r18, 0x02	; 2
    318a:	31 05       	cpc	r19, r1
    318c:	31 f0       	breq	.+12     	; 0x319a <LCD_ES_tSet_Cursor_Pos+0x42>
    318e:	0a c0       	rjmp	.+20     	; 0x31a4 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	80 58       	subi	r24, 0x80	; 128
    3194:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    3198:	08 c0       	rjmp	.+16     	; 0x31aa <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	80 54       	subi	r24, 0x40	; 64
    319e:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    31a2:	03 c0       	rjmp	.+6      	; 0x31aa <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    31a4:	31 e0       	ldi	r19, 0x01	; 1
    31a6:	3b 83       	std	Y+3, r19	; 0x03
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    31aa:	1b 82       	std	Y+3, r1	; 0x03
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <LCD_ES_tGoTo+0x6>
    31c4:	0f 92       	push	r0
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	89 83       	std	Y+1, r24	; 0x01
    31cc:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	88 23       	and	r24, r24
    31d2:	41 f4       	brne	.+16     	; 0x31e4 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	80 31       	cpi	r24, 0x10	; 16
    31d8:	98 f4       	brcc	.+38     	; 0x3200 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	80 58       	subi	r24, 0x80	; 128
    31de:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    31e2:	0e c0       	rjmp	.+28     	; 0x3200 <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	41 f4       	brne	.+16     	; 0x31fa <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	80 31       	cpi	r24, 0x10	; 16
    31ee:	40 f4       	brcc	.+16     	; 0x3200 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	80 54       	subi	r24, 0x40	; 64
    31f4:	0e 94 25 14 	call	0x284a	; 0x284a <Lcd_ES_tsendCmd>
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	01 c0       	rjmp	.+2      	; 0x3202 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    3200:	1b 82       	std	Y+3, r1	; 0x03
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	65 97       	sbiw	r28, 0x15	; 21
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	9c 8b       	std	Y+20, r25	; 0x14
    3226:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3228:	eb 89       	ldd	r30, Y+19	; 0x13
    322a:	fc 89       	ldd	r31, Y+20	; 0x14
    322c:	8f ef       	ldi	r24, 0xFF	; 255
    322e:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    3230:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	09 f4       	brne	.+2      	; 0x323c <KPD_ES_tGetKeyPressed+0x2c>
    323a:	ed c0       	rjmp	.+474    	; 0x3416 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    323c:	19 8a       	std	Y+17, r1	; 0x11
    323e:	e5 c0       	rjmp	.+458    	; 0x340a <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    3240:	89 89       	ldd	r24, Y+17	; 0x11
    3242:	88 2f       	mov	r24, r24
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	fc 01       	movw	r30, r24
    3248:	e7 50       	subi	r30, 0x07	; 7
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	90 81       	ld	r25, Z
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	69 2f       	mov	r22, r25
    3252:	40 e0       	ldi	r20, 0x00	; 0
    3254:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3258:	18 8a       	std	Y+16, r1	; 0x10
    325a:	c1 c0       	rjmp	.+386    	; 0x33de <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    325c:	88 89       	ldd	r24, Y+16	; 0x10
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	fc 01       	movw	r30, r24
    3264:	e3 50       	subi	r30, 0x03	; 3
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	90 81       	ld	r25, Z
    326a:	9e 01       	movw	r18, r28
    326c:	2e 5e       	subi	r18, 0xEE	; 238
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	83 e0       	ldi	r24, 0x03	; 3
    3272:	69 2f       	mov	r22, r25
    3274:	a9 01       	movw	r20, r18
    3276:	0e 94 67 0d 	call	0x1ace	; 0x1ace <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    327a:	8a 89       	ldd	r24, Y+18	; 0x12
    327c:	88 23       	and	r24, r24
    327e:	09 f0       	breq	.+2      	; 0x3282 <KPD_ES_tGetKeyPressed+0x72>
    3280:	ab c0       	rjmp	.+342    	; 0x33d8 <KPD_ES_tGetKeyPressed+0x1c8>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	a0 ea       	ldi	r26, 0xA0	; 160
    3288:	b1 e4       	ldi	r27, 0x41	; 65
    328a:	8b 87       	std	Y+11, r24	; 0x0b
    328c:	9c 87       	std	Y+12, r25	; 0x0c
    328e:	ad 87       	std	Y+13, r26	; 0x0d
    3290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3292:	6b 85       	ldd	r22, Y+11	; 0x0b
    3294:	7c 85       	ldd	r23, Y+12	; 0x0c
    3296:	8d 85       	ldd	r24, Y+13	; 0x0d
    3298:	9e 85       	ldd	r25, Y+14	; 0x0e
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	4a e7       	ldi	r20, 0x7A	; 122
    32a0:	55 e4       	ldi	r21, 0x45	; 69
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	8f 83       	std	Y+7, r24	; 0x07
    32ac:	98 87       	std	Y+8, r25	; 0x08
    32ae:	a9 87       	std	Y+9, r26	; 0x09
    32b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b2:	6f 81       	ldd	r22, Y+7	; 0x07
    32b4:	78 85       	ldd	r23, Y+8	; 0x08
    32b6:	89 85       	ldd	r24, Y+9	; 0x09
    32b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e8       	ldi	r20, 0x80	; 128
    32c0:	5f e3       	ldi	r21, 0x3F	; 63
    32c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c6:	88 23       	and	r24, r24
    32c8:	2c f4       	brge	.+10     	; 0x32d4 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	3f c0       	rjmp	.+126    	; 0x3352 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    32d4:	6f 81       	ldd	r22, Y+7	; 0x07
    32d6:	78 85       	ldd	r23, Y+8	; 0x08
    32d8:	89 85       	ldd	r24, Y+9	; 0x09
    32da:	9a 85       	ldd	r25, Y+10	; 0x0a
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	3f ef       	ldi	r19, 0xFF	; 255
    32e0:	4f e7       	ldi	r20, 0x7F	; 127
    32e2:	57 e4       	ldi	r21, 0x47	; 71
    32e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e8:	18 16       	cp	r1, r24
    32ea:	4c f5       	brge	.+82     	; 0x333e <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e2       	ldi	r20, 0x20	; 32
    32fa:	51 e4       	ldi	r21, 0x41	; 65
    32fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	bc 01       	movw	r22, r24
    3306:	cd 01       	movw	r24, r26
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	0f c0       	rjmp	.+30     	; 0x3334 <KPD_ES_tGetKeyPressed+0x124>
    3316:	80 e9       	ldi	r24, 0x90	; 144
    3318:	91 e0       	ldi	r25, 0x01	; 1
    331a:	9c 83       	std	Y+4, r25	; 0x04
    331c:	8b 83       	std	Y+3, r24	; 0x03
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	9c 81       	ldd	r25, Y+4	; 0x04
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	f1 f7       	brne	.-4      	; 0x3322 <KPD_ES_tGetKeyPressed+0x112>
    3326:	9c 83       	std	Y+4, r25	; 0x04
    3328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332a:	8d 81       	ldd	r24, Y+5	; 0x05
    332c:	9e 81       	ldd	r25, Y+6	; 0x06
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	9e 83       	std	Y+6, r25	; 0x06
    3332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3334:	8d 81       	ldd	r24, Y+5	; 0x05
    3336:	9e 81       	ldd	r25, Y+6	; 0x06
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	69 f7       	brne	.-38     	; 0x3316 <KPD_ES_tGetKeyPressed+0x106>
    333c:	14 c0       	rjmp	.+40     	; 0x3366 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333e:	6f 81       	ldd	r22, Y+7	; 0x07
    3340:	78 85       	ldd	r23, Y+8	; 0x08
    3342:	89 85       	ldd	r24, Y+9	; 0x09
    3344:	9a 85       	ldd	r25, Y+10	; 0x0a
    3346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	8d 83       	std	Y+5, r24	; 0x05
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	9a 81       	ldd	r25, Y+2	; 0x02
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <KPD_ES_tGetKeyPressed+0x14e>
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3366:	88 89       	ldd	r24, Y+16	; 0x10
    3368:	88 2f       	mov	r24, r24
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	fc 01       	movw	r30, r24
    336e:	e3 50       	subi	r30, 0x03	; 3
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	90 81       	ld	r25, Z
    3374:	9e 01       	movw	r18, r28
    3376:	2e 5e       	subi	r18, 0xEE	; 238
    3378:	3f 4f       	sbci	r19, 0xFF	; 255
    337a:	83 e0       	ldi	r24, 0x03	; 3
    337c:	69 2f       	mov	r22, r25
    337e:	a9 01       	movw	r20, r18
    3380:	0e 94 67 0d 	call	0x1ace	; 0x1ace <DIO_ES_tGetPinValue>
    3384:	0f c0       	rjmp	.+30     	; 0x33a4 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3386:	88 89       	ldd	r24, Y+16	; 0x10
    3388:	88 2f       	mov	r24, r24
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	fc 01       	movw	r30, r24
    338e:	e3 50       	subi	r30, 0x03	; 3
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	90 81       	ld	r25, Z
    3394:	9e 01       	movw	r18, r28
    3396:	2e 5e       	subi	r18, 0xEE	; 238
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	69 2f       	mov	r22, r25
    339e:	a9 01       	movw	r20, r18
    33a0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    33a4:	8a 89       	ldd	r24, Y+18	; 0x12
    33a6:	88 23       	and	r24, r24
    33a8:	71 f3       	breq	.-36     	; 0x3386 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    33aa:	89 89       	ldd	r24, Y+17	; 0x11
    33ac:	48 2f       	mov	r20, r24
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	88 89       	ldd	r24, Y+16	; 0x10
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	ca 01       	movw	r24, r20
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	82 0f       	add	r24, r18
    33c2:	93 1f       	adc	r25, r19
    33c4:	fc 01       	movw	r30, r24
    33c6:	e7 51       	subi	r30, 0x17	; 23
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 81       	ld	r24, Z
    33cc:	eb 89       	ldd	r30, Y+19	; 0x13
    33ce:	fc 89       	ldd	r31, Y+20	; 0x14
    33d0:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	8f 87       	std	Y+15, r24	; 0x0f
    33d6:	07 c0       	rjmp	.+14     	; 0x33e6 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    33d8:	88 89       	ldd	r24, Y+16	; 0x10
    33da:	8f 5f       	subi	r24, 0xFF	; 255
    33dc:	88 8b       	std	Y+16, r24	; 0x10
    33de:	88 89       	ldd	r24, Y+16	; 0x10
    33e0:	84 30       	cpi	r24, 0x04	; 4
    33e2:	08 f4       	brcc	.+2      	; 0x33e6 <KPD_ES_tGetKeyPressed+0x1d6>
    33e4:	3b cf       	rjmp	.-394    	; 0x325c <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    33e6:	89 89       	ldd	r24, Y+17	; 0x11
    33e8:	88 2f       	mov	r24, r24
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	fc 01       	movw	r30, r24
    33ee:	e7 50       	subi	r30, 0x07	; 7
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	90 81       	ld	r25, Z
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	69 2f       	mov	r22, r25
    33f8:	41 e0       	ldi	r20, 0x01	; 1
    33fa:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    33fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3400:	81 30       	cpi	r24, 0x01	; 1
    3402:	39 f0       	breq	.+14     	; 0x3412 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3404:	89 89       	ldd	r24, Y+17	; 0x11
    3406:	8f 5f       	subi	r24, 0xFF	; 255
    3408:	89 8b       	std	Y+17, r24	; 0x11
    340a:	89 89       	ldd	r24, Y+17	; 0x11
    340c:	84 30       	cpi	r24, 0x04	; 4
    340e:	08 f4       	brcc	.+2      	; 0x3412 <KPD_ES_tGetKeyPressed+0x202>
    3410:	17 cf       	rjmp	.-466    	; 0x3240 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3412:	1d 8a       	std	Y+21, r1	; 0x15
    3414:	02 c0       	rjmp	.+4      	; 0x341a <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	8d 8b       	std	Y+21, r24	; 0x15
    341a:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    341c:	65 96       	adiw	r28, 0x15	; 21
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <main>:
char received_string[100];
u8 y,x;


int main()
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	6c 97       	sbiw	r28, 0x1c	; 28
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    3442:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tInit>
	Lcd_ES_tInit();
    3446:	0e 94 85 13 	call	0x270a	; 0x270a <Lcd_ES_tInit>
	UART_Init();
    344a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_Init>
	sei();
    344e:	78 94       	sei


	Lcd_ES_tsendString("UART");
    3450:	80 e6       	ldi	r24, 0x60	; 96
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 0);
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	0e 94 df 18 	call	0x31be	; 0x31be <LCD_ES_tGoTo>
	Lcd_ES_tsendString("Testing !");
    3460:	85 e6       	ldi	r24, 0x65	; 101
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Lcd_ES_tsendString>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	aa ef       	ldi	r26, 0xFA	; 250
    346e:	b3 e4       	ldi	r27, 0x43	; 67
    3470:	89 8f       	std	Y+25, r24	; 0x19
    3472:	9a 8f       	std	Y+26, r25	; 0x1a
    3474:	ab 8f       	std	Y+27, r26	; 0x1b
    3476:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3478:	69 8d       	ldd	r22, Y+25	; 0x19
    347a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    347c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4a e7       	ldi	r20, 0x7A	; 122
    3486:	55 e4       	ldi	r21, 0x45	; 69
    3488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	8d 8b       	std	Y+21, r24	; 0x15
    3492:	9e 8b       	std	Y+22, r25	; 0x16
    3494:	af 8b       	std	Y+23, r26	; 0x17
    3496:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3498:	6d 89       	ldd	r22, Y+21	; 0x15
    349a:	7e 89       	ldd	r23, Y+22	; 0x16
    349c:	8f 89       	ldd	r24, Y+23	; 0x17
    349e:	98 8d       	ldd	r25, Y+24	; 0x18
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e8       	ldi	r20, 0x80	; 128
    34a6:	5f e3       	ldi	r21, 0x3F	; 63
    34a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ac:	88 23       	and	r24, r24
    34ae:	2c f4       	brge	.+10     	; 0x34ba <main+0x8c>
		__ticks = 1;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	9c 8b       	std	Y+20, r25	; 0x14
    34b6:	8b 8b       	std	Y+19, r24	; 0x13
    34b8:	3f c0       	rjmp	.+126    	; 0x3538 <main+0x10a>
	else if (__tmp > 65535)
    34ba:	6d 89       	ldd	r22, Y+21	; 0x15
    34bc:	7e 89       	ldd	r23, Y+22	; 0x16
    34be:	8f 89       	ldd	r24, Y+23	; 0x17
    34c0:	98 8d       	ldd	r25, Y+24	; 0x18
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	3f ef       	ldi	r19, 0xFF	; 255
    34c6:	4f e7       	ldi	r20, 0x7F	; 127
    34c8:	57 e4       	ldi	r21, 0x47	; 71
    34ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ce:	18 16       	cp	r1, r24
    34d0:	4c f5       	brge	.+82     	; 0x3524 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d2:	69 8d       	ldd	r22, Y+25	; 0x19
    34d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e2       	ldi	r20, 0x20	; 32
    34e0:	51 e4       	ldi	r21, 0x41	; 65
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	9c 8b       	std	Y+20, r25	; 0x14
    34f8:	8b 8b       	std	Y+19, r24	; 0x13
    34fa:	0f c0       	rjmp	.+30     	; 0x351a <main+0xec>
    34fc:	80 e9       	ldi	r24, 0x90	; 144
    34fe:	91 e0       	ldi	r25, 0x01	; 1
    3500:	9a 8b       	std	Y+18, r25	; 0x12
    3502:	89 8b       	std	Y+17, r24	; 0x11
    3504:	89 89       	ldd	r24, Y+17	; 0x11
    3506:	9a 89       	ldd	r25, Y+18	; 0x12
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <main+0xda>
    350c:	9a 8b       	std	Y+18, r25	; 0x12
    350e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3510:	8b 89       	ldd	r24, Y+19	; 0x13
    3512:	9c 89       	ldd	r25, Y+20	; 0x14
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	9c 8b       	std	Y+20, r25	; 0x14
    3518:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351a:	8b 89       	ldd	r24, Y+19	; 0x13
    351c:	9c 89       	ldd	r25, Y+20	; 0x14
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	69 f7       	brne	.-38     	; 0x34fc <main+0xce>
    3522:	14 c0       	rjmp	.+40     	; 0x354c <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3524:	6d 89       	ldd	r22, Y+21	; 0x15
    3526:	7e 89       	ldd	r23, Y+22	; 0x16
    3528:	8f 89       	ldd	r24, Y+23	; 0x17
    352a:	98 8d       	ldd	r25, Y+24	; 0x18
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9c 8b       	std	Y+20, r25	; 0x14
    3536:	8b 8b       	std	Y+19, r24	; 0x13
    3538:	8b 89       	ldd	r24, Y+19	; 0x13
    353a:	9c 89       	ldd	r25, Y+20	; 0x14
    353c:	98 8b       	std	Y+16, r25	; 0x10
    353e:	8f 87       	std	Y+15, r24	; 0x0f
    3540:	8f 85       	ldd	r24, Y+15	; 0x0f
    3542:	98 89       	ldd	r25, Y+16	; 0x10
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <main+0x116>
    3548:	98 8b       	std	Y+16, r25	; 0x10
    354a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	lcd_ES_tclear();
    354c:	0e 94 9c 13 	call	0x2738	; 0x2738 <lcd_ES_tclear>



	UART_SendString_ASYNCH("Abdalla");
    3550:	8f e6       	ldi	r24, 0x6F	; 111
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 98 07 	call	0xf30	; 0xf30 <UART_SendString_ASYNCH>
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	a0 e2       	ldi	r26, 0x20	; 32
    355e:	b1 e4       	ldi	r27, 0x41	; 65
    3560:	8b 87       	std	Y+11, r24	; 0x0b
    3562:	9c 87       	std	Y+12, r25	; 0x0c
    3564:	ad 87       	std	Y+13, r26	; 0x0d
    3566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3568:	6b 85       	ldd	r22, Y+11	; 0x0b
    356a:	7c 85       	ldd	r23, Y+12	; 0x0c
    356c:	8d 85       	ldd	r24, Y+13	; 0x0d
    356e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	4a e7       	ldi	r20, 0x7A	; 122
    3576:	55 e4       	ldi	r21, 0x45	; 69
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	8f 83       	std	Y+7, r24	; 0x07
    3582:	98 87       	std	Y+8, r25	; 0x08
    3584:	a9 87       	std	Y+9, r26	; 0x09
    3586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e8       	ldi	r20, 0x80	; 128
    3596:	5f e3       	ldi	r21, 0x3F	; 63
    3598:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    359c:	88 23       	and	r24, r24
    359e:	2c f4       	brge	.+10     	; 0x35aa <main+0x17c>
		__ticks = 1;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	8d 83       	std	Y+5, r24	; 0x05
    35a8:	3f c0       	rjmp	.+126    	; 0x3628 <main+0x1fa>
	else if (__tmp > 65535)
    35aa:	6f 81       	ldd	r22, Y+7	; 0x07
    35ac:	78 85       	ldd	r23, Y+8	; 0x08
    35ae:	89 85       	ldd	r24, Y+9	; 0x09
    35b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	3f ef       	ldi	r19, 0xFF	; 255
    35b6:	4f e7       	ldi	r20, 0x7F	; 127
    35b8:	57 e4       	ldi	r21, 0x47	; 71
    35ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35be:	18 16       	cp	r1, r24
    35c0:	4c f5       	brge	.+82     	; 0x3614 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e2       	ldi	r20, 0x20	; 32
    35d0:	51 e4       	ldi	r21, 0x41	; 65
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	0f c0       	rjmp	.+30     	; 0x360a <main+0x1dc>
    35ec:	80 e9       	ldi	r24, 0x90	; 144
    35ee:	91 e0       	ldi	r25, 0x01	; 1
    35f0:	9c 83       	std	Y+4, r25	; 0x04
    35f2:	8b 83       	std	Y+3, r24	; 0x03
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	9c 81       	ldd	r25, Y+4	; 0x04
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <main+0x1ca>
    35fc:	9c 83       	std	Y+4, r25	; 0x04
    35fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	9e 83       	std	Y+6, r25	; 0x06
    3608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	69 f7       	brne	.-38     	; 0x35ec <main+0x1be>
    3612:	14 c0       	rjmp	.+40     	; 0x363c <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3614:	6f 81       	ldd	r22, Y+7	; 0x07
    3616:	78 85       	ldd	r23, Y+8	; 0x08
    3618:	89 85       	ldd	r24, Y+9	; 0x09
    361a:	9a 85       	ldd	r25, Y+10	; 0x0a
    361c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	9e 83       	std	Y+6, r25	; 0x06
    3626:	8d 83       	std	Y+5, r24	; 0x05
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	9e 81       	ldd	r25, Y+6	; 0x06
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <main+0x206>
    3638:	9a 83       	std	Y+2, r25	; 0x02
    363a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_SendString_ASYNCH("Bahrawy");
    363c:	87 e7       	ldi	r24, 0x77	; 119
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 98 07 	call	0xf30	; 0xf30 <UART_SendString_ASYNCH>
    3644:	ff cf       	rjmp	.-2      	; 0x3644 <main+0x216>

00003646 <__udivmodhi4>:
    3646:	aa 1b       	sub	r26, r26
    3648:	bb 1b       	sub	r27, r27
    364a:	51 e1       	ldi	r21, 0x11	; 17
    364c:	07 c0       	rjmp	.+14     	; 0x365c <__udivmodhi4_ep>

0000364e <__udivmodhi4_loop>:
    364e:	aa 1f       	adc	r26, r26
    3650:	bb 1f       	adc	r27, r27
    3652:	a6 17       	cp	r26, r22
    3654:	b7 07       	cpc	r27, r23
    3656:	10 f0       	brcs	.+4      	; 0x365c <__udivmodhi4_ep>
    3658:	a6 1b       	sub	r26, r22
    365a:	b7 0b       	sbc	r27, r23

0000365c <__udivmodhi4_ep>:
    365c:	88 1f       	adc	r24, r24
    365e:	99 1f       	adc	r25, r25
    3660:	5a 95       	dec	r21
    3662:	a9 f7       	brne	.-22     	; 0x364e <__udivmodhi4_loop>
    3664:	80 95       	com	r24
    3666:	90 95       	com	r25
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	08 95       	ret

0000366e <__prologue_saves__>:
    366e:	2f 92       	push	r2
    3670:	3f 92       	push	r3
    3672:	4f 92       	push	r4
    3674:	5f 92       	push	r5
    3676:	6f 92       	push	r6
    3678:	7f 92       	push	r7
    367a:	8f 92       	push	r8
    367c:	9f 92       	push	r9
    367e:	af 92       	push	r10
    3680:	bf 92       	push	r11
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	ca 1b       	sub	r28, r26
    3698:	db 0b       	sbc	r29, r27
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	09 94       	ijmp

000036a6 <__epilogue_restores__>:
    36a6:	2a 88       	ldd	r2, Y+18	; 0x12
    36a8:	39 88       	ldd	r3, Y+17	; 0x11
    36aa:	48 88       	ldd	r4, Y+16	; 0x10
    36ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    36ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    36b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    36b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    36b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    36b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    36b8:	b9 84       	ldd	r11, Y+9	; 0x09
    36ba:	c8 84       	ldd	r12, Y+8	; 0x08
    36bc:	df 80       	ldd	r13, Y+7	; 0x07
    36be:	ee 80       	ldd	r14, Y+6	; 0x06
    36c0:	fd 80       	ldd	r15, Y+5	; 0x05
    36c2:	0c 81       	ldd	r16, Y+4	; 0x04
    36c4:	1b 81       	ldd	r17, Y+3	; 0x03
    36c6:	aa 81       	ldd	r26, Y+2	; 0x02
    36c8:	b9 81       	ldd	r27, Y+1	; 0x01
    36ca:	ce 0f       	add	r28, r30
    36cc:	d1 1d       	adc	r29, r1
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	ed 01       	movw	r28, r26
    36da:	08 95       	ret

000036dc <_exit>:
    36dc:	f8 94       	cli

000036de <__stop_program>:
    36de:	ff cf       	rjmp	.-2      	; 0x36de <__stop_program>
