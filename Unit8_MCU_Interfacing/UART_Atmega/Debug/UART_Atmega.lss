
UART_Atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00003514  000035a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  008000f8  008000f8  00003640  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00003640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f09  00000000  00000000  00006940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008849  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000089a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ab7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cc00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_1>
       8:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_2>
       c:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 19 	call	0x3244	; 0x3244 <main>
      8a:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_Init>:
#include "../../HAL/Lcd/Lcd.h"

#define NULL ((void *)0)

void UART_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	// Baud rate
	UBRRL = 103;     // 16 MHz crystal
     ca6:	e9 e2       	ldi	r30, 0x29	; 41
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e6       	ldi	r24, 0x67	; 103
     cac:	80 83       	st	Z, r24
	// Normal mode
	CLR_BIT(UCSRA,U2X);
     cae:	ab e2       	ldi	r26, 0x2B	; 43
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	8c 93       	st	X, r24


	// Frame
	// In order to access UCSRC
	SET_BIT(UCSRC,URSEL);   // To write data on UCSRC
     cbc:	a0 e4       	ldi	r26, 0x40	; 64
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 68       	ori	r24, 0x80	; 128
     cc8:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UMSEL);   // Asynchronous
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7b       	andi	r24, 0xBF	; 191
     cd6:	8c 93       	st	X, r24
	// 8-bit data
	SET_BIT(UCSRC,UCSZ0);
     cd8:	a0 e4       	ldi	r26, 0x40	; 64
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e0 e4       	ldi	r30, 0x40	; 64
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e0 e4       	ldi	r30, 0x40	; 64
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	84 60       	ori	r24, 0x04	; 4
     cf2:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSZ2);
     cf4:	aa e2       	ldi	r26, 0x2A	; 42
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ea e2       	ldi	r30, 0x2A	; 42
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8b 7f       	andi	r24, 0xFB	; 251
     d00:	8c 93       	st	X, r24


	// Enable
	SET_BIT(UCSRB,TXEN);
     d02:	aa e2       	ldi	r26, 0x2A	; 42
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ea e2       	ldi	r30, 0x2A	; 42
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 60       	ori	r24, 0x08	; 8
     d0e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     d10:	aa e2       	ldi	r26, 0x2A	; 42
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e2       	ldi	r30, 0x2A	; 42
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 61       	ori	r24, 0x10	; 16
     d1c:	8c 93       	st	X, r24


}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <UART_Send_Char>:

void UART_Send_Char(u8 data)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	89 83       	std	Y+1, r24	; 0x01
	// Busy wait
	while(!GET_BIT(UCSRA,UDRE));
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	82 95       	swap	r24
     d38:	86 95       	lsr	r24
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	90 70       	andi	r25, 0x00	; 0
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	a1 f3       	breq	.-24     	; 0xd30 <UART_Send_Char+0xc>
	UDR = data;
     d48:	ec e2       	ldi	r30, 0x2C	; 44
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 83       	st	Z, r24
}
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <UART_Receive_Char>:
u8 UART_Receive_Char(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
     d60:	eb e2       	ldi	r30, 0x2B	; 43
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 23       	and	r24, r24
     d68:	dc f7       	brge	.-10     	; 0xd60 <UART_Receive_Char+0x8>
	return UDR;
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <UART_Send_String>:


void UART_Send_String(char* string)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <UART_Send_String+0x6>
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9b 83       	std	Y+3, r25	; 0x03
     d84:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <UART_Send_String+0x30>
	while(string[i] != '\0'){
		UART_Send_Char(string[i]);
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	fc 01       	movw	r30, r24
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	80 81       	ld	r24, Z
     d9c:	0e 94 92 06 	call	0xd24	; 0xd24 <UART_Send_Char>
		i++;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	89 83       	std	Y+1, r24	; 0x01


void UART_Send_String(char* string)
{
	u8 i=0;
	while(string[i] != '\0'){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	fc 01       	movw	r30, r24
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	39 f7       	brne	.-50     	; 0xd8a <UART_Send_String+0x14>
		UART_Send_Char(string[i]);
		i++;
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <UART_Receive_String>:


#define MAX_STRING_LENGTH 100

char* UART_Receive_String(void)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <UART_Receive_String+0x6>
     dce:	0f 92       	push	r0
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
    static char string[MAX_STRING_LENGTH];
    int i = 0;
     dd4:	1b 82       	std	Y+3, r1	; 0x03
     dd6:	1a 82       	std	Y+2, r1	; 0x02
     dd8:	11 c0       	rjmp	.+34     	; 0xdfc <UART_Receive_String+0x34>
    char received_char;

    while ((received_char = UART_Receive_Char()) != '#') {
        string[i] = received_char;
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	9b 81       	ldd	r25, Y+3	; 0x03
     dde:	fc 01       	movw	r30, r24
     de0:	e8 50       	subi	r30, 0x08	; 8
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	80 83       	st	Z, r24
        i++;
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	8a 83       	std	Y+2, r24	; 0x02

        // Add a check for string length to prevent buffer overflow
        if (i >= MAX_STRING_LENGTH - 1) {
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	83 36       	cpi	r24, 0x63	; 99
     df8:	91 05       	cpc	r25, r1
     dfa:	34 f4       	brge	.+12     	; 0xe08 <UART_Receive_String+0x40>
{
    static char string[MAX_STRING_LENGTH];
    int i = 0;
    char received_char;

    while ((received_char = UART_Receive_Char()) != '#') {
     dfc:	0e 94 ac 06 	call	0xd58	; 0xd58 <UART_Receive_Char>
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	83 32       	cpi	r24, 0x23	; 35
     e06:	49 f7       	brne	.-46     	; 0xdda <UART_Receive_String+0x12>
        if (i >= MAX_STRING_LENGTH - 1) {
            break; // Exit loop to prevent exceeding the buffer size (leave space for null-termination)
        }
    }

    string[i] = '\0'; // Null-terminate the string
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	9b 81       	ldd	r25, Y+3	; 0x03
     e0c:	fc 01       	movw	r30, r24
     e0e:	e8 50       	subi	r30, 0x08	; 8
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	10 82       	st	Z, r1

    return string;
     e14:	88 ef       	ldi	r24, 0xF8	; 248
     e16:	90 e0       	ldi	r25, 0x00	; 0
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <Timer0_Init>:
#define NULLPTR   ((void*)0)

static void (*Timer0_OVF_Fptr)(void) = NULLPTR;

void Timer0_Init(Timer0Mode_type Mode, Timer0_Prescalar Prescalar,OC0Mode_type Oc0_Mode)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	27 97       	sbiw	r28, 0x07	; 7
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	6a 83       	std	Y+2, r22	; 0x02
     e3c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	3f 83       	std	Y+7, r19	; 0x07
     e46:	2e 83       	std	Y+6, r18	; 0x06
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 05       	cpc	r25, r1
     e50:	21 f1       	breq	.+72     	; 0xe9a <Timer0_Init+0x76>
     e52:	2e 81       	ldd	r18, Y+6	; 0x06
     e54:	3f 81       	ldd	r19, Y+7	; 0x07
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <Timer0_Init+0x42>
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	61 f0       	breq	.+24     	; 0xe7c <Timer0_Init+0x58>
     e64:	46 c0       	rjmp	.+140    	; 0xef2 <Timer0_Init+0xce>
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	21 f1       	breq	.+72     	; 0xeb8 <Timer0_Init+0x94>
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	9f 81       	ldd	r25, Y+7	; 0x07
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	91 05       	cpc	r25, r1
     e78:	71 f1       	breq	.+92     	; 0xed6 <Timer0_Init+0xb2>
     e7a:	3b c0       	rjmp	.+118    	; 0xef2 <Timer0_Init+0xce>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7b       	andi	r24, 0xBF	; 191
     e88:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	87 7f       	andi	r24, 0xF7	; 247
     e96:	8c 93       	st	X, r24
     e98:	2c c0       	rjmp	.+88     	; 0xef2 <Timer0_Init+0xce>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e5       	ldi	r30, 0x53	; 83
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	87 7f       	andi	r24, 0xF7	; 247
     eb4:	8c 93       	st	X, r24
     eb6:	1d c0       	rjmp	.+58     	; 0xef2 <Timer0_Init+0xce>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7b       	andi	r24, 0xBF	; 191
     ec4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     ec6:	a3 e5       	ldi	r26, 0x53	; 83
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e3 e5       	ldi	r30, 0x53	; 83
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	88 60       	ori	r24, 0x08	; 8
     ed2:	8c 93       	st	X, r24
     ed4:	0e c0       	rjmp	.+28     	; 0xef2 <Timer0_Init+0xce>
		break;
	case TIMER0_FAST_PWM_MODE:
		SET_BIT(TCCR0,WGM00);
     ed6:	a3 e5       	ldi	r26, 0x53	; 83
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e3 e5       	ldi	r30, 0x53	; 83
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 64       	ori	r24, 0x40	; 64
     ee2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     ee4:	a3 e5       	ldi	r26, 0x53	; 83
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e3 e5       	ldi	r30, 0x53	; 83
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	8c 93       	st	X, r24
		break;
	}

	// To make sure the first three pins are zero
	// in case of old data written
	TCCR0 = TCCR0 & 0xf8;   // 11111000
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 7f       	andi	r24, 0xF8	; 248
     efe:	8c 93       	st	X, r24
	TCCR0 = TCCR0 | Prescalar;
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	90 81       	ld	r25, Z
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	89 2b       	or	r24, r25
     f0e:	8c 93       	st	X, r24


	// Hardware pin from OCU (Output compare unit) to output something
	// when there is matching between OCR and TCNT

	switch(Oc0_Mode)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	21 f1       	breq	.+72     	; 0xf6c <Timer0_Init+0x148>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	2c f4       	brge	.+10     	; 0xf38 <Timer0_Init+0x114>
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	61 f0       	breq	.+24     	; 0xf4e <Timer0_Init+0x12a>
     f36:	46 c0       	rjmp	.+140    	; 0xfc4 <Timer0_Init+0x1a0>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	21 f1       	breq	.+72     	; 0xf8a <Timer0_Init+0x166>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	71 f1       	breq	.+92     	; 0xfa8 <Timer0_Init+0x184>
     f4c:	3b c0       	rjmp	.+118    	; 0xfc4 <Timer0_Init+0x1a0>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
     f4e:	a3 e5       	ldi	r26, 0x53	; 83
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e3 e5       	ldi	r30, 0x53	; 83
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 7e       	andi	r24, 0xEF	; 239
     f5a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
     f5c:	a3 e5       	ldi	r26, 0x53	; 83
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e3 e5       	ldi	r30, 0x53	; 83
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7d       	andi	r24, 0xDF	; 223
     f68:	8c 93       	st	X, r24
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <Timer0_Init+0x1a0>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0,COM00);
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 61       	ori	r24, 0x10	; 16
     f78:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
     f7a:	a3 e5       	ldi	r26, 0x53	; 83
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 e5       	ldi	r30, 0x53	; 83
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 7d       	andi	r24, 0xDF	; 223
     f86:	8c 93       	st	X, r24
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <Timer0_Init+0x1a0>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
     f8a:	a3 e5       	ldi	r26, 0x53	; 83
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e3 e5       	ldi	r30, 0x53	; 83
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 7e       	andi	r24, 0xEF	; 239
     f96:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     f98:	a3 e5       	ldi	r26, 0x53	; 83
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e3 e5       	ldi	r30, 0x53	; 83
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	8c 93       	st	X, r24
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <Timer0_Init+0x1a0>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0,COM00);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
     fb6:	a3 e5       	ldi	r26, 0x53	; 83
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e3 e5       	ldi	r30, 0x53	; 83
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 62       	ori	r24, 0x20	; 32
     fc2:	8c 93       	st	X, r24
		break;
	}


}
     fc4:	27 96       	adiw	r28, 0x07	; 7
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <Timer0_OVInterrupt_Enable>:

// Separately, in case you want to run the timer
// without interrupt
void Timer0_OVInterrupt_Enable(void)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
     fde:	a9 e5       	ldi	r26, 0x59	; 89
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e9 e5       	ldi	r30, 0x59	; 89
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	8c 93       	st	X, r24
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
     ffa:	a9 e5       	ldi	r26, 0x59	; 89
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e9 e5       	ldi	r30, 0x59	; 89
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	8c 93       	st	X, r24
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <Timer0_OVF_SetCallBack>:

void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <Timer0_OVF_SetCallBack+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	90 93 5d 01 	sts	0x015D, r25
    1024:	80 93 5c 01 	sts	0x015C, r24
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <__vector_11>:


// used in delay
ISR(TIMER0_OVF_vect)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULLPTR)
    105c:	80 91 5c 01 	lds	r24, 0x015C
    1060:	90 91 5d 01 	lds	r25, 0x015D
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	29 f0       	breq	.+10     	; 0x1072 <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    1068:	e0 91 5c 01 	lds	r30, 0x015C
    106c:	f0 91 5d 01 	lds	r31, 0x015D
    1070:	09 95       	icall
	}
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <EXI_Set_CallBack+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <EXI_Set_CallBack+0x8>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	7b 83       	std	Y+3, r23	; 0x03
    10aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3d 83       	std	Y+5, r19	; 0x05
    10b4:	2c 83       	std	Y+4, r18	; 0x04
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	81 f0       	breq	.+32     	; 0x10e0 <EXI_Set_CallBack+0x48>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	91 f0       	breq	.+36     	; 0x10ee <EXI_Set_CallBack+0x56>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	90 93 5f 01 	sts	0x015F, r25
    10da:	80 93 5e 01 	sts	0x015E, r24
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	90 93 61 01 	sts	0x0161, r25
    10e8:	80 93 60 01 	sts	0x0160, r24
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	9b 81       	ldd	r25, Y+3	; 0x03
    10f2:	90 93 63 01 	sts	0x0163, r25
    10f6:	80 93 62 01 	sts	0x0162, r24
		break;
	}
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <EXI_ENABLE+0x6>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3b 83       	std	Y+3, r19	; 0x03
    1120:	2a 83       	std	Y+2, r18	; 0x02
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	89 f0       	breq	.+34     	; 0x114e <EXI_ENABLE+0x44>
    112c:	2a 81       	ldd	r18, Y+2	; 0x02
    112e:	3b 81       	ldd	r19, Y+3	; 0x03
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	a1 f0       	breq	.+40     	; 0x115e <EXI_ENABLE+0x54>
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	9b 81       	ldd	r25, Y+3	; 0x03
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	b9 f4       	brne	.+46     	; 0x116c <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    113e:	ab e5       	ldi	r26, 0x5B	; 91
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e5       	ldi	r30, 0x5B	; 91
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
    114c:	0f c0       	rjmp	.+30     	; 0x116c <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	8c 93       	st	X, r24
    115c:	07 c0       	rjmp	.+14     	; 0x116c <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    115e:	ab e5       	ldi	r26, 0x5B	; 91
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	eb e5       	ldi	r30, 0x5B	; 91
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	8c 93       	st	X, r24
		break;
	}
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <EXI_DISABLE+0x6>
    117e:	0f 92       	push	r0
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3b 83       	std	Y+3, r19	; 0x03
    118e:	2a 83       	std	Y+2, r18	; 0x02
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	89 f0       	breq	.+34     	; 0x11bc <EXI_DISABLE+0x44>
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	a1 f0       	breq	.+40     	; 0x11cc <EXI_DISABLE+0x54>
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	b9 f4       	brne	.+46     	; 0x11da <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    11ac:	ab e5       	ldi	r26, 0x5B	; 91
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e5       	ldi	r30, 0x5B	; 91
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 7b       	andi	r24, 0xBF	; 191
    11b8:	8c 93       	st	X, r24
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    11bc:	ab e5       	ldi	r26, 0x5B	; 91
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e5       	ldi	r30, 0x5B	; 91
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 77       	andi	r24, 0x7F	; 127
    11c8:	8c 93       	st	X, r24
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    11cc:	ab e5       	ldi	r26, 0x5B	; 91
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb e5       	ldi	r30, 0x5B	; 91
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 7d       	andi	r24, 0xDF	; 223
    11d8:	8c 93       	st	X, r24
		break;
	}
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	2a 97       	sbiw	r28, 0x0a	; 10
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3a 87       	std	Y+10, r19	; 0x0a
    1206:	29 87       	std	Y+9, r18	; 0x09
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <EXI_TriggerEdge+0x2e>
    1212:	66 c0       	rjmp	.+204    	; 0x12e0 <EXI_TriggerEdge+0xfa>
    1214:	29 85       	ldd	r18, Y+9	; 0x09
    1216:	3a 85       	ldd	r19, Y+10	; 0x0a
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <EXI_TriggerEdge+0x3a>
    121e:	bb c0       	rjmp	.+374    	; 0x1396 <EXI_TriggerEdge+0x1b0>
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	09 f0       	breq	.+2      	; 0x122a <EXI_TriggerEdge+0x44>
    1228:	dd c0       	rjmp	.+442    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	38 87       	std	Y+8, r19	; 0x08
    1232:	2f 83       	std	Y+7, r18	; 0x07
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	21 f1       	breq	.+72     	; 0x1286 <EXI_TriggerEdge+0xa0>
    123e:	2f 81       	ldd	r18, Y+7	; 0x07
    1240:	38 85       	ldd	r19, Y+8	; 0x08
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <EXI_TriggerEdge+0x6c>
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	98 85       	ldd	r25, Y+8	; 0x08
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <EXI_TriggerEdge+0x82>
    1250:	c9 c0       	rjmp	.+402    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
    1252:	2f 81       	ldd	r18, Y+7	; 0x07
    1254:	38 85       	ldd	r19, Y+8	; 0x08
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	21 f1       	breq	.+72     	; 0x12a4 <EXI_TriggerEdge+0xbe>
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	98 85       	ldd	r25, Y+8	; 0x08
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	71 f1       	breq	.+92     	; 0x12c2 <EXI_TriggerEdge+0xdc>
    1266:	be c0       	rjmp	.+380    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    1268:	a5 e5       	ldi	r26, 0x55	; 85
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e5       	ldi	r30, 0x55	; 85
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8d 7f       	andi	r24, 0xFD	; 253
    1282:	8c 93       	st	X, r24
    1284:	af c0       	rjmp	.+350    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1286:	a5 e5       	ldi	r26, 0x55	; 85
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e5       	ldi	r30, 0x55	; 85
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1294:	a5 e5       	ldi	r26, 0x55	; 85
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e5       	ldi	r30, 0x55	; 85
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8d 7f       	andi	r24, 0xFD	; 253
    12a0:	8c 93       	st	X, r24
    12a2:	a0 c0       	rjmp	.+320    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    12a4:	a5 e5       	ldi	r26, 0x55	; 85
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e5       	ldi	r30, 0x55	; 85
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    12b2:	a5 e5       	ldi	r26, 0x55	; 85
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	8c 93       	st	X, r24
    12c0:	91 c0       	rjmp	.+290    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    12c2:	a5 e5       	ldi	r26, 0x55	; 85
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e5       	ldi	r30, 0x55	; 85
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    12d0:	a5 e5       	ldi	r26, 0x55	; 85
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e5 e5       	ldi	r30, 0x55	; 85
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	8c 93       	st	X, r24
    12de:	82 c0       	rjmp	.+260    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	3e 83       	std	Y+6, r19	; 0x06
    12e8:	2d 83       	std	Y+5, r18	; 0x05
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 05       	cpc	r25, r1
    12f2:	21 f1       	breq	.+72     	; 0x133c <EXI_TriggerEdge+0x156>
    12f4:	2d 81       	ldd	r18, Y+5	; 0x05
    12f6:	3e 81       	ldd	r19, Y+6	; 0x06
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	2c f4       	brge	.+10     	; 0x1308 <EXI_TriggerEdge+0x122>
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	61 f0       	breq	.+24     	; 0x131e <EXI_TriggerEdge+0x138>
    1306:	6e c0       	rjmp	.+220    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
    1308:	2d 81       	ldd	r18, Y+5	; 0x05
    130a:	3e 81       	ldd	r19, Y+6	; 0x06
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	21 f1       	breq	.+72     	; 0x135a <EXI_TriggerEdge+0x174>
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	71 f1       	breq	.+92     	; 0x1378 <EXI_TriggerEdge+0x192>
    131c:	63 c0       	rjmp	.+198    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    131e:	a5 e5       	ldi	r26, 0x55	; 85
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e5       	ldi	r30, 0x55	; 85
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8b 7f       	andi	r24, 0xFB	; 251
    132a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    132c:	a5 e5       	ldi	r26, 0x55	; 85
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e5       	ldi	r30, 0x55	; 85
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	87 7f       	andi	r24, 0xF7	; 247
    1338:	8c 93       	st	X, r24
    133a:	54 c0       	rjmp	.+168    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    133c:	a5 e5       	ldi	r26, 0x55	; 85
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e5 e5       	ldi	r30, 0x55	; 85
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	84 60       	ori	r24, 0x04	; 4
    1348:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    134a:	a5 e5       	ldi	r26, 0x55	; 85
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e5       	ldi	r30, 0x55	; 85
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	8c 93       	st	X, r24
    1358:	45 c0       	rjmp	.+138    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    135a:	a5 e5       	ldi	r26, 0x55	; 85
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e5 e5       	ldi	r30, 0x55	; 85
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8b 7f       	andi	r24, 0xFB	; 251
    1366:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1368:	a5 e5       	ldi	r26, 0x55	; 85
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e5       	ldi	r30, 0x55	; 85
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	88 60       	ori	r24, 0x08	; 8
    1374:	8c 93       	st	X, r24
    1376:	36 c0       	rjmp	.+108    	; 0x13e4 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	84 60       	ori	r24, 0x04	; 4
    1384:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	8c 93       	st	X, r24
    1394:	27 c0       	rjmp	.+78     	; 0x13e4 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3c 83       	std	Y+4, r19	; 0x04
    139e:	2b 83       	std	Y+3, r18	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	91 05       	cpc	r25, r1
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <EXI_TriggerEdge+0x1d0>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	23 30       	cpi	r18, 0x03	; 3
    13b0:	31 05       	cpc	r19, r1
    13b2:	49 f0       	breq	.+18     	; 0x13c6 <EXI_TriggerEdge+0x1e0>
    13b4:	10 c0       	rjmp	.+32     	; 0x13d6 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    13b6:	a4 e5       	ldi	r26, 0x54	; 84
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e4 e5       	ldi	r30, 0x54	; 84
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8f 7b       	andi	r24, 0xBF	; 191
    13c2:	8c 93       	st	X, r24
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    13c6:	a4 e5       	ldi	r26, 0x54	; 84
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e4 e5       	ldi	r30, 0x54	; 84
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 64       	ori	r24, 0x40	; 64
    13d2:	8c 93       	st	X, r24
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    13d6:	a4 e5       	ldi	r26, 0x54	; 84
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e4 e5       	ldi	r30, 0x54	; 84
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7b       	andi	r24, 0xBF	; 191
    13e2:	8c 93       	st	X, r24
				}
				break;
	}
}
    13e4:	2a 96       	adiw	r28, 0x0a	; 10
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1420:	80 91 5e 01 	lds	r24, 0x015E
    1424:	90 91 5f 01 	lds	r25, 0x015F
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	29 f0       	breq	.+10     	; 0x1436 <__vector_1+0x40>
		INT0_Fptr();
    142c:	e0 91 5e 01 	lds	r30, 0x015E
    1430:	f0 91 5f 01 	lds	r31, 0x015F
    1434:	09 95       	icall
	}
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_2>:

ISR(INT1_vect){
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1486:	80 91 60 01 	lds	r24, 0x0160
    148a:	90 91 61 01 	lds	r25, 0x0161
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	29 f0       	breq	.+10     	; 0x149c <__vector_2+0x40>
		INT1_Fptr();
    1492:	e0 91 60 01 	lds	r30, 0x0160
    1496:	f0 91 61 01 	lds	r31, 0x0161
    149a:	09 95       	icall
	}
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_3>:

ISR(INT2_vect){
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    14ec:	80 91 62 01 	lds	r24, 0x0162
    14f0:	90 91 63 01 	lds	r25, 0x0163
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	29 f0       	breq	.+10     	; 0x1502 <__vector_3+0x40>
		INT2_Fptr();
    14f8:	e0 91 62 01 	lds	r30, 0x0162
    14fc:	f0 91 63 01 	lds	r31, 0x0163
    1500:	09 95       	icall
	}
}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <DIO_ES_tSetPinDirection+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <DIO_ES_tSetPinDirection+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
    1538:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	18 f0       	brcs	.+6      	; 0x1546 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	8c 83       	std	Y+4, r24	; 0x04
    1544:	d8 c0       	rjmp	.+432    	; 0x16f6 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	88 23       	and	r24, r24
    154a:	91 f5       	brne	.+100    	; 0x15b0 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	a1 f4       	brne	.+40     	; 0x157a <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_ES_tSetPinDirection+0x48>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_ES_tSetPinDirection+0x44>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	bd c0       	rjmp	.+378    	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 23       	and	r24, r24
    157e:	a9 f4       	brne	.+42     	; 0x15aa <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1580:	aa e3       	ldi	r26, 0x3A	; 58
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ea e3       	ldi	r30, 0x3A	; 58
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_ES_tSetPinDirection+0x76>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_ES_tSetPinDirection+0x72>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	a5 c0       	rjmp	.+330    	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	a3 c0       	rjmp	.+326    	; 0x16f6 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 f5       	brne	.+100    	; 0x161a <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	a1 f4       	brne	.+40     	; 0x15e4 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    15bc:	a7 e3       	ldi	r26, 0x37	; 55
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e7 e3       	ldi	r30, 0x37	; 55
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_ES_tSetPinDirection+0xb2>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_ES_tSetPinDirection+0xae>
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	88 c0       	rjmp	.+272    	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 23       	and	r24, r24
    15e8:	a9 f4       	brne	.+42     	; 0x1614 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    15ea:	a7 e3       	ldi	r26, 0x37	; 55
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e7 e3       	ldi	r30, 0x37	; 55
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_ES_tSetPinDirection+0xe0>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_ES_tSetPinDirection+0xdc>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	70 c0       	rjmp	.+224    	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	8c 83       	std	Y+4, r24	; 0x04
    1618:	6e c0       	rjmp	.+220    	; 0x16f6 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	91 f5       	brne	.+100    	; 0x1684 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	a1 f4       	brne	.+40     	; 0x164e <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1626:	a4 e3       	ldi	r26, 0x34	; 52
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e3       	ldi	r30, 0x34	; 52
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_ES_tSetPinDirection+0x11c>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_ES_tSetPinDirection+0x118>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	53 c0       	rjmp	.+166    	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	88 23       	and	r24, r24
    1652:	a9 f4       	brne	.+42     	; 0x167e <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1654:	a4 e3       	ldi	r26, 0x34	; 52
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e4 e3       	ldi	r30, 0x34	; 52
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_ES_tSetPinDirection+0x14a>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_ES_tSetPinDirection+0x146>
    1676:	80 95       	com	r24
    1678:	84 23       	and	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	3b c0       	rjmp	.+118    	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	8c 83       	std	Y+4, r24	; 0x04
    1682:	39 c0       	rjmp	.+114    	; 0x16f6 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 f5       	brne	.+100    	; 0x16ee <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	a1 f4       	brne	.+40     	; 0x16b8 <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1690:	a1 e3       	ldi	r26, 0x31	; 49
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_ES_tSetPinDirection+0x186>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_ES_tSetPinDirection+0x182>
    16b2:	84 2b       	or	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	1e c0       	rjmp	.+60     	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	88 23       	and	r24, r24
    16bc:	a9 f4       	brne	.+42     	; 0x16e8 <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    16be:	a1 e3       	ldi	r26, 0x31	; 49
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e1 e3       	ldi	r30, 0x31	; 49
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_ES_tSetPinDirection+0x1b4>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_ES_tSetPinDirection+0x1b0>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	06 c0       	rjmp	.+12     	; 0x16f4 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	8c 83       	std	Y+4, r24	; 0x04
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	8c 83       	std	Y+4, r24	; 0x04
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    16f4:	1c 82       	std	Y+4, r1	; 0x04
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <DIO_ES_tSetPinValue+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_ES_tSetPinValue+0x8>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	6a 83       	std	Y+2, r22	; 0x02
    1716:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	88 30       	cpi	r24, 0x08	; 8
    171c:	18 f0       	brcs	.+6      	; 0x1724 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	8c 83       	std	Y+4, r24	; 0x04
    1722:	d8 c0       	rjmp	.+432    	; 0x18d4 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	88 23       	and	r24, r24
    1728:	91 f5       	brne	.+100    	; 0x178e <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	a1 f4       	brne	.+40     	; 0x1758 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_ES_tSetPinValue+0x48>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_ES_tSetPinValue+0x44>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	bd c0       	rjmp	.+378    	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 23       	and	r24, r24
    175c:	a9 f4       	brne	.+42     	; 0x1788 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    175e:	ab e3       	ldi	r26, 0x3B	; 59
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	eb e3       	ldi	r30, 0x3B	; 59
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_ES_tSetPinValue+0x76>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_ES_tSetPinValue+0x72>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	a5 c0       	rjmp	.+330    	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	a3 c0       	rjmp	.+326    	; 0x18d4 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 f5       	brne	.+100    	; 0x17f8 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	a1 f4       	brne	.+40     	; 0x17c2 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    179a:	a8 e3       	ldi	r26, 0x38	; 56
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e8 e3       	ldi	r30, 0x38	; 56
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_ES_tSetPinValue+0xb2>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <DIO_ES_tSetPinValue+0xae>
    17bc:	84 2b       	or	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	88 c0       	rjmp	.+272    	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	88 23       	and	r24, r24
    17c6:	a9 f4       	brne	.+42     	; 0x17f2 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    17c8:	a8 e3       	ldi	r26, 0x38	; 56
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e8 e3       	ldi	r30, 0x38	; 56
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_ES_tSetPinValue+0xe0>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DIO_ES_tSetPinValue+0xdc>
    17ea:	80 95       	com	r24
    17ec:	84 23       	and	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	70 c0       	rjmp	.+224    	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	6e c0       	rjmp	.+220    	; 0x18d4 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	91 f5       	brne	.+100    	; 0x1862 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	a1 f4       	brne	.+40     	; 0x182c <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1804:	a5 e3       	ldi	r26, 0x35	; 53
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e3       	ldi	r30, 0x35	; 53
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_ES_tSetPinValue+0x11c>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_ES_tSetPinValue+0x118>
    1826:	84 2b       	or	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	53 c0       	rjmp	.+166    	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	88 23       	and	r24, r24
    1830:	a9 f4       	brne	.+42     	; 0x185c <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1832:	a5 e3       	ldi	r26, 0x35	; 53
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e3       	ldi	r30, 0x35	; 53
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_ES_tSetPinValue+0x14a>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_ES_tSetPinValue+0x146>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	3b c0       	rjmp	.+118    	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	8c 83       	std	Y+4, r24	; 0x04
    1860:	39 c0       	rjmp	.+114    	; 0x18d4 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 f5       	brne	.+100    	; 0x18cc <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	a1 f4       	brne	.+40     	; 0x1896 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    186e:	a2 e3       	ldi	r26, 0x32	; 50
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e2 e3       	ldi	r30, 0x32	; 50
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_ES_tSetPinValue+0x186>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_ES_tSetPinValue+0x182>
    1890:	84 2b       	or	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	1e c0       	rjmp	.+60     	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	88 23       	and	r24, r24
    189a:	a9 f4       	brne	.+42     	; 0x18c6 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    189c:	a2 e3       	ldi	r26, 0x32	; 50
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e2 e3       	ldi	r30, 0x32	; 50
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_ES_tSetPinValue+0x1b4>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_ES_tSetPinValue+0x1b0>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	8c 83       	std	Y+4, r24	; 0x04
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	8c 83       	std	Y+4, r24	; 0x04
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    18d2:	1c 82       	std	Y+4, r1	; 0x04
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <DIO_ES_tGetPinValue+0x6>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <DIO_ES_tGetPinValue+0x8>
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	6a 83       	std	Y+2, r22	; 0x02
    18f6:	5c 83       	std	Y+4, r21	; 0x04
    18f8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	88 30       	cpi	r24, 0x08	; 8
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	4d 83       	std	Y+5, r20	; 0x05
    1904:	60 c0       	rjmp	.+192    	; 0x19c6 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	88 23       	and	r24, r24
    190a:	a1 f4       	brne	.+40     	; 0x1934 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    190c:	e9 e3       	ldi	r30, 0x39	; 57
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_ES_tGetPinValue+0x40>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_ES_tGetPinValue+0x3c>
    1928:	ca 01       	movw	r24, r20
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	eb 81       	ldd	r30, Y+3	; 0x03
    192e:	fc 81       	ldd	r31, Y+4	; 0x04
    1930:	80 83       	st	Z, r24
    1932:	48 c0       	rjmp	.+144    	; 0x19c4 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	a1 f4       	brne	.+40     	; 0x1962 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    193a:	e6 e3       	ldi	r30, 0x36	; 54
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_ES_tGetPinValue+0x6e>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_ES_tGetPinValue+0x6a>
    1956:	ca 01       	movw	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 83       	st	Z, r24
    1960:	31 c0       	rjmp	.+98     	; 0x19c4 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	a1 f4       	brne	.+40     	; 0x1990 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    1968:	e3 e3       	ldi	r30, 0x33	; 51
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a9 01       	movw	r20, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_ES_tGetPinValue+0x9c>
    197c:	55 95       	asr	r21
    197e:	47 95       	ror	r20
    1980:	8a 95       	dec	r24
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_ES_tGetPinValue+0x98>
    1984:	ca 01       	movw	r24, r20
    1986:	81 70       	andi	r24, 0x01	; 1
    1988:	eb 81       	ldd	r30, Y+3	; 0x03
    198a:	fc 81       	ldd	r31, Y+4	; 0x04
    198c:	80 83       	st	Z, r24
    198e:	1a c0       	rjmp	.+52     	; 0x19c4 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	a1 f4       	brne	.+40     	; 0x19be <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    1996:	e0 e3       	ldi	r30, 0x30	; 48
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_ES_tGetPinValue+0xca>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_ES_tGetPinValue+0xc6>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	eb 81       	ldd	r30, Y+3	; 0x03
    19b8:	fc 81       	ldd	r31, Y+4	; 0x04
    19ba:	80 83       	st	Z, r24
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    19be:	51 e0       	ldi	r21, 0x01	; 1
    19c0:	5d 83       	std	Y+5, r21	; 0x05
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    19c4:	1d 82       	std	Y+5, r1	; 0x05
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <DIO_ES_tSetPortDirection+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <DIO_ES_tSetPortDirection+0x8>
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	31 f0       	breq	.+12     	; 0x19fc <DIO_ES_tSetPortDirection+0x24>
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	19 f0       	breq	.+6      	; 0x19fc <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    19f6:	21 e0       	ldi	r18, 0x01	; 1
    19f8:	2d 83       	std	Y+5, r18	; 0x05
    19fa:	53 c0       	rjmp	.+166    	; 0x1aa2 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3c 83       	std	Y+4, r19	; 0x04
    1a04:	2b 83       	std	Y+3, r18	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	09 f1       	breq	.+66     	; 0x1a52 <DIO_ES_tSetPortDirection+0x7a>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <DIO_ES_tSetPortDirection+0x4c>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <DIO_ES_tSetPortDirection+0x62>
    1a22:	3b c0       	rjmp	.+118    	; 0x1a9a <DIO_ES_tSetPortDirection+0xc2>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	f1 f0       	breq	.+60     	; 0x1a6a <DIO_ES_tSetPortDirection+0x92>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	91 05       	cpc	r25, r1
    1a36:	29 f1       	breq	.+74     	; 0x1a82 <DIO_ES_tSetPortDirection+0xaa>
    1a38:	30 c0       	rjmp	.+96     	; 0x1a9a <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	29 f4       	brne	.+10     	; 0x1a4a <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    1a40:	ea e3       	ldi	r30, 0x3A	; 58
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	80 83       	st	Z, r24
    1a48:	2b c0       	rjmp	.+86     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    1a4a:	ea e3       	ldi	r30, 0x3A	; 58
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	10 82       	st	Z, r1
    1a50:	27 c0       	rjmp	.+78     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	29 f4       	brne	.+10     	; 0x1a62 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    1a58:	e7 e3       	ldi	r30, 0x37	; 55
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	80 83       	st	Z, r24
    1a60:	1f c0       	rjmp	.+62     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    1a62:	e7 e3       	ldi	r30, 0x37	; 55
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	10 82       	st	Z, r1
    1a68:	1b c0       	rjmp	.+54     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	29 f4       	brne	.+10     	; 0x1a7a <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    1a70:	e4 e3       	ldi	r30, 0x34	; 52
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
    1a78:	13 c0       	rjmp	.+38     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    1a7a:	e4 e3       	ldi	r30, 0x34	; 52
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	10 82       	st	Z, r1
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    1a88:	e1 e3       	ldi	r30, 0x31	; 49
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	80 83       	st	Z, r24
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1a92:	e1 e3       	ldi	r30, 0x31	; 49
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	10 82       	st	Z, r1
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	9d 83       	std	Y+5, r25	; 0x05
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1aa0:	1d 82       	std	Y+5, r1	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <DIO_ES_tSetPortValue+0x6>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <DIO_ES_tSetPortValue+0x8>
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <DIO_ES_tSetPortValue+0x24>
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	88 23       	and	r24, r24
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	2d 83       	std	Y+5, r18	; 0x05
    1ad6:	53 c0       	rjmp	.+166    	; 0x1b7e <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3c 83       	std	Y+4, r19	; 0x04
    1ae0:	2b 83       	std	Y+3, r18	; 0x03
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f1       	breq	.+66     	; 0x1b2e <DIO_ES_tSetPortValue+0x7a>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <DIO_ES_tSetPortValue+0x4c>
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <DIO_ES_tSetPortValue+0x62>
    1afe:	3b c0       	rjmp	.+118    	; 0x1b76 <DIO_ES_tSetPortValue+0xc2>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	f1 f0       	breq	.+60     	; 0x1b46 <DIO_ES_tSetPortValue+0x92>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	29 f1       	breq	.+74     	; 0x1b5e <DIO_ES_tSetPortValue+0xaa>
    1b14:	30 c0       	rjmp	.+96     	; 0x1b76 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	80 83       	st	Z, r24
    1b24:	2b c0       	rjmp	.+86     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    1b26:	eb e3       	ldi	r30, 0x3B	; 59
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	10 82       	st	Z, r1
    1b2c:	27 c0       	rjmp	.+78     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	29 f4       	brne	.+10     	; 0x1b3e <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    1b34:	e8 e3       	ldi	r30, 0x38	; 56
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	80 83       	st	Z, r24
    1b3c:	1f c0       	rjmp	.+62     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	10 82       	st	Z, r1
    1b44:	1b c0       	rjmp	.+54     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    1b4c:	e5 e3       	ldi	r30, 0x35	; 53
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	80 83       	st	Z, r24
    1b54:	13 c0       	rjmp	.+38     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    1b56:	e5 e3       	ldi	r30, 0x35	; 53
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	10 82       	st	Z, r1
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	29 f4       	brne	.+10     	; 0x1b6e <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    1b64:	e2 e3       	ldi	r30, 0x32	; 50
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	80 83       	st	Z, r24
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1b6e:	e2 e3       	ldi	r30, 0x32	; 50
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	10 82       	st	Z, r1
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9d 83       	std	Y+5, r25	; 0x05
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1b7c:	1d 82       	std	Y+5, r1	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_ES_tTOGPin+0x6>
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	88 30       	cpi	r24, 0x08	; 8
    1ba4:	18 f0       	brcs	.+6      	; 0x1bac <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
    1baa:	60 c0       	rjmp	.+192    	; 0x1c6c <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	88 23       	and	r24, r24
    1bb0:	a1 f4       	brne	.+40     	; 0x1bda <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_ES_tTOGPin+0x40>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_ES_tTOGPin+0x3c>
    1bd4:	84 27       	eor	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	48 c0       	rjmp	.+144    	; 0x1c6a <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	a1 f4       	brne	.+40     	; 0x1c08 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    1be0:	a8 e3       	ldi	r26, 0x38	; 56
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 e3       	ldi	r30, 0x38	; 56
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <DIO_ES_tTOGPin+0x6e>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <DIO_ES_tTOGPin+0x6a>
    1c02:	84 27       	eor	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	31 c0       	rjmp	.+98     	; 0x1c6a <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	a1 f4       	brne	.+40     	; 0x1c36 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1c0e:	a5 e3       	ldi	r26, 0x35	; 53
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e5 e3       	ldi	r30, 0x35	; 53
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_ES_tTOGPin+0x9c>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_ES_tTOGPin+0x98>
    1c30:	84 27       	eor	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	1a c0       	rjmp	.+52     	; 0x1c6a <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	a1 f4       	brne	.+40     	; 0x1c64 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    1c3c:	a2 e3       	ldi	r26, 0x32	; 50
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_ES_tTOGPin+0xca>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_ES_tTOGPin+0xc6>
    1c5e:	84 27       	eor	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1c6a:	1b 82       	std	Y+3, r1	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <DIO_ES_tInit+0x6>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    1c84:	1a 82       	std	Y+2, r1	; 0x02
    1c86:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    1c88:	1a 82       	std	Y+2, r1	; 0x02
    1c8a:	19 82       	std	Y+1, r1	; 0x01
    1c8c:	a3 c2       	rjmp	.+1350   	; 0x21d4 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e1 58       	subi	r30, 0x81	; 129
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <DIO_ES_tInit+0x2e>
    1ca6:	9b c0       	rjmp	.+310    	; 0x1dde <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e1 58       	subi	r30, 0x81	; 129
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	e9 f4       	brne	.+58     	; 0x1cfc <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1cc2:	aa e3       	ldi	r26, 0x3A	; 58
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ea e3       	ldi	r30, 0x3A	; 58
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e0 58       	subi	r30, 0x80	; 128
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <DIO_ES_tInit+0x78>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <DIO_ES_tInit+0x74>
    1cf6:	84 2b       	or	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	67 c2       	rjmp	.+1230   	; 0x21ca <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1cfc:	aa e3       	ldi	r26, 0x3A	; 58
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	ea e3       	ldi	r30, 0x3A	; 58
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	fc 01       	movw	r30, r24
    1d16:	e0 58       	subi	r30, 0x80	; 128
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 2e       	mov	r0, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_ES_tInit+0xb2>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_ES_tInit+0xae>
    1d30:	80 95       	com	r24
    1d32:	84 23       	and	r24, r20
    1d34:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	fc 01       	movw	r30, r24
    1d44:	ee 57       	subi	r30, 0x7E	; 126
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	e9 f4       	brne	.+58     	; 0x1d88 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1d4e:	ab e3       	ldi	r26, 0x3B	; 59
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	eb e3       	ldi	r30, 0x3B	; 59
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	fc 01       	movw	r30, r24
    1d68:	e0 58       	subi	r30, 0x80	; 128
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_ES_tInit+0x104>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_ES_tInit+0x100>
    1d82:	84 2b       	or	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	21 c2       	rjmp	.+1090   	; 0x21ca <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	fc 01       	movw	r30, r24
    1d96:	ee 57       	subi	r30, 0x7E	; 126
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <DIO_ES_tInit+0x128>
    1da0:	14 c2       	rjmp	.+1064   	; 0x21ca <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1da2:	ab e3       	ldi	r26, 0x3B	; 59
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e3       	ldi	r30, 0x3B	; 59
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e0 58       	subi	r30, 0x80	; 128
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_ES_tInit+0x158>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <DIO_ES_tInit+0x154>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	f6 c1       	rjmp	.+1004   	; 0x21ca <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	fc 01       	movw	r30, r24
    1dec:	e1 58       	subi	r30, 0x81	; 129
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <DIO_ES_tInit+0x17e>
    1df6:	9b c0       	rjmp	.+310    	; 0x1f2e <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	fc 01       	movw	r30, r24
    1e08:	e1 58       	subi	r30, 0x81	; 129
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	e9 f4       	brne	.+58     	; 0x1e4c <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1e12:	a7 e3       	ldi	r26, 0x37	; 55
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e7 e3       	ldi	r30, 0x37	; 55
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e0 58       	subi	r30, 0x80	; 128
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_ES_tInit+0x1c8>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_ES_tInit+0x1c4>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	bf c1       	rjmp	.+894    	; 0x21ca <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1e4c:	a7 e3       	ldi	r26, 0x37	; 55
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e7 e3       	ldi	r30, 0x37	; 55
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	fc 01       	movw	r30, r24
    1e66:	e0 58       	subi	r30, 0x80	; 128
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <DIO_ES_tInit+0x202>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <DIO_ES_tInit+0x1fe>
    1e80:	80 95       	com	r24
    1e82:	84 23       	and	r24, r20
    1e84:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	fc 01       	movw	r30, r24
    1e94:	ee 57       	subi	r30, 0x7E	; 126
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	e9 f4       	brne	.+58     	; 0x1ed8 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1e9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e8 e3       	ldi	r30, 0x38	; 56
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e0 58       	subi	r30, 0x80	; 128
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <DIO_ES_tInit+0x254>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <DIO_ES_tInit+0x250>
    1ed2:	84 2b       	or	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	79 c1       	rjmp	.+754    	; 0x21ca <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	ee 57       	subi	r30, 0x7E	; 126
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	88 23       	and	r24, r24
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <DIO_ES_tInit+0x278>
    1ef0:	6c c1       	rjmp	.+728    	; 0x21ca <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1ef2:	ab e3       	ldi	r26, 0x3B	; 59
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	eb e3       	ldi	r30, 0x3B	; 59
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	e0 58       	subi	r30, 0x80	; 128
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <DIO_ES_tInit+0x2a8>
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	0a 94       	dec	r0
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <DIO_ES_tInit+0x2a4>
    1f26:	80 95       	com	r24
    1f28:	84 23       	and	r24, r20
    1f2a:	8c 93       	st	X, r24
    1f2c:	4e c1       	rjmp	.+668    	; 0x21ca <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e1 58       	subi	r30, 0x81	; 129
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <DIO_ES_tInit+0x2ce>
    1f46:	9b c0       	rjmp	.+310    	; 0x207e <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	fc 01       	movw	r30, r24
    1f58:	e1 58       	subi	r30, 0x81	; 129
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	e9 f4       	brne	.+58     	; 0x1f9c <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1f62:	a4 e3       	ldi	r26, 0x34	; 52
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e4 e3       	ldi	r30, 0x34	; 52
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	e0 58       	subi	r30, 0x80	; 128
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 81       	ld	r24, Z
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <DIO_ES_tInit+0x318>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <DIO_ES_tInit+0x314>
    1f96:	84 2b       	or	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	17 c1       	rjmp	.+558    	; 0x21ca <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1f9c:	a4 e3       	ldi	r26, 0x34	; 52
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e4 e3       	ldi	r30, 0x34	; 52
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e0 58       	subi	r30, 0x80	; 128
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <DIO_ES_tInit+0x352>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <DIO_ES_tInit+0x34e>
    1fd0:	80 95       	com	r24
    1fd2:	84 23       	and	r24, r20
    1fd4:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	ee 57       	subi	r30, 0x7E	; 126
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	e9 f4       	brne	.+58     	; 0x2028 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1fee:	a5 e3       	ldi	r26, 0x35	; 53
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e5 e3       	ldi	r30, 0x35	; 53
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	fc 01       	movw	r30, r24
    2008:	e0 58       	subi	r30, 0x80	; 128
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_ES_tInit+0x3a4>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_ES_tInit+0x3a0>
    2022:	84 2b       	or	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	d1 c0       	rjmp	.+418    	; 0x21ca <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	fc 01       	movw	r30, r24
    2036:	ee 57       	subi	r30, 0x7E	; 126
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	88 23       	and	r24, r24
    203e:	09 f0       	breq	.+2      	; 0x2042 <DIO_ES_tInit+0x3c8>
    2040:	c4 c0       	rjmp	.+392    	; 0x21ca <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2042:	ab e3       	ldi	r26, 0x3B	; 59
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	eb e3       	ldi	r30, 0x3B	; 59
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	48 2f       	mov	r20, r24
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	fc 01       	movw	r30, r24
    205c:	e0 58       	subi	r30, 0x80	; 128
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <DIO_ES_tInit+0x3f8>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <DIO_ES_tInit+0x3f4>
    2076:	80 95       	com	r24
    2078:	84 23       	and	r24, r20
    207a:	8c 93       	st	X, r24
    207c:	a6 c0       	rjmp	.+332    	; 0x21ca <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	fc 01       	movw	r30, r24
    208c:	e1 58       	subi	r30, 0x81	; 129
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	83 30       	cpi	r24, 0x03	; 3
    2094:	09 f0       	breq	.+2      	; 0x2098 <DIO_ES_tInit+0x41e>
    2096:	99 c0       	rjmp	.+306    	; 0x21ca <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	fc 01       	movw	r30, r24
    20a8:	e1 58       	subi	r30, 0x81	; 129
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	e9 f4       	brne	.+58     	; 0x20ec <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    20b2:	a1 e3       	ldi	r26, 0x31	; 49
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e1 e3       	ldi	r30, 0x31	; 49
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	fc 01       	movw	r30, r24
    20cc:	e0 58       	subi	r30, 0x80	; 128
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_ES_tInit+0x468>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <DIO_ES_tInit+0x464>
    20e6:	84 2b       	or	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	6f c0       	rjmp	.+222    	; 0x21ca <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    20ec:	a1 e3       	ldi	r26, 0x31	; 49
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e1 e3       	ldi	r30, 0x31	; 49
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	fc 01       	movw	r30, r24
    2106:	e0 58       	subi	r30, 0x80	; 128
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_ES_tInit+0x4a2>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_ES_tInit+0x49e>
    2120:	80 95       	com	r24
    2122:	84 23       	and	r24, r20
    2124:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	fc 01       	movw	r30, r24
    2134:	ee 57       	subi	r30, 0x7E	; 126
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	e9 f4       	brne	.+58     	; 0x2178 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    213e:	a2 e3       	ldi	r26, 0x32	; 50
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	fc 01       	movw	r30, r24
    2158:	e0 58       	subi	r30, 0x80	; 128
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <DIO_ES_tInit+0x4f4>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <DIO_ES_tInit+0x4f0>
    2172:	84 2b       	or	r24, r20
    2174:	8c 93       	st	X, r24
    2176:	29 c0       	rjmp	.+82     	; 0x21ca <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	fc 01       	movw	r30, r24
    2186:	ee 57       	subi	r30, 0x7E	; 126
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	88 23       	and	r24, r24
    218e:	e9 f4       	brne	.+58     	; 0x21ca <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2190:	ab e3       	ldi	r26, 0x3B	; 59
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	eb e3       	ldi	r30, 0x3B	; 59
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	48 2f       	mov	r20, r24
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	fc 01       	movw	r30, r24
    21aa:	e0 58       	subi	r30, 0x80	; 128
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 2e       	mov	r0, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_ES_tInit+0x546>
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	0a 94       	dec	r0
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_ES_tInit+0x542>
    21c4:	80 95       	com	r24
    21c6:	84 23       	and	r24, r20
    21c8:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	88 31       	cpi	r24, 0x18	; 24
    21da:	91 05       	cpc	r25, r1
    21dc:	0c f4       	brge	.+2      	; 0x21e0 <DIO_ES_tInit+0x566>
    21de:	57 cd       	rjmp	.-1362   	; 0x1c8e <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    21e0:	80 e0       	ldi	r24, 0x00	; 0
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	e0 97       	sbiw	r28, 0x30	; 48
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	62 e0       	ldi	r22, 0x02	; 2
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e2       	ldi	r26, 0x20	; 32
    2210:	b1 e4       	ldi	r27, 0x41	; 65
    2212:	8d a7       	std	Y+45, r24	; 0x2d
    2214:	9e a7       	std	Y+46, r25	; 0x2e
    2216:	af a7       	std	Y+47, r26	; 0x2f
    2218:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    221a:	6d a5       	ldd	r22, Y+45	; 0x2d
    221c:	7e a5       	ldd	r23, Y+46	; 0x2e
    221e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2220:	98 a9       	ldd	r25, Y+48	; 0x30
    2222:	2b ea       	ldi	r18, 0xAB	; 171
    2224:	3a ea       	ldi	r19, 0xAA	; 170
    2226:	4a ea       	ldi	r20, 0xAA	; 170
    2228:	50 e4       	ldi	r21, 0x40	; 64
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	89 a7       	std	Y+41, r24	; 0x29
    2234:	9a a7       	std	Y+42, r25	; 0x2a
    2236:	ab a7       	std	Y+43, r26	; 0x2b
    2238:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    223a:	69 a5       	ldd	r22, Y+41	; 0x29
    223c:	7a a5       	ldd	r23, Y+42	; 0x2a
    223e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2240:	9c a5       	ldd	r25, Y+44	; 0x2c
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	1c f4       	brge	.+6      	; 0x2258 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	88 a7       	std	Y+40, r24	; 0x28
    2256:	91 c0       	rjmp	.+290    	; 0x237a <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    2258:	69 a5       	ldd	r22, Y+41	; 0x29
    225a:	7a a5       	ldd	r23, Y+42	; 0x2a
    225c:	8b a5       	ldd	r24, Y+43	; 0x2b
    225e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	53 e4       	ldi	r21, 0x43	; 67
    2268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	0c f0       	brlt	.+2      	; 0x2272 <LCD_ES_tTrigger_Enable+0x86>
    2270:	7b c0       	rjmp	.+246    	; 0x2368 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2272:	6d a5       	ldd	r22, Y+45	; 0x2d
    2274:	7e a5       	ldd	r23, Y+46	; 0x2e
    2276:	8f a5       	ldd	r24, Y+47	; 0x2f
    2278:	98 a9       	ldd	r25, Y+48	; 0x30
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a e7       	ldi	r20, 0x7A	; 122
    2280:	54 e4       	ldi	r21, 0x44	; 68
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8c a3       	std	Y+36, r24	; 0x24
    228c:	9d a3       	std	Y+37, r25	; 0x25
    228e:	ae a3       	std	Y+38, r26	; 0x26
    2290:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6c a1       	ldd	r22, Y+36	; 0x24
    2294:	7d a1       	ldd	r23, Y+37	; 0x25
    2296:	8e a1       	ldd	r24, Y+38	; 0x26
    2298:	9f a1       	ldd	r25, Y+39	; 0x27
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	55 e4       	ldi	r21, 0x45	; 69
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	88 a3       	std	Y+32, r24	; 0x20
    22ac:	99 a3       	std	Y+33, r25	; 0x21
    22ae:	aa a3       	std	Y+34, r26	; 0x22
    22b0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22b2:	68 a1       	ldd	r22, Y+32	; 0x20
    22b4:	79 a1       	ldd	r23, Y+33	; 0x21
    22b6:	8a a1       	ldd	r24, Y+34	; 0x22
    22b8:	9b a1       	ldd	r25, Y+35	; 0x23
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9f 8f       	std	Y+31, r25	; 0x1f
    22d0:	8e 8f       	std	Y+30, r24	; 0x1e
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    22d4:	68 a1       	ldd	r22, Y+32	; 0x20
    22d6:	79 a1       	ldd	r23, Y+33	; 0x21
    22d8:	8a a1       	ldd	r24, Y+34	; 0x22
    22da:	9b a1       	ldd	r25, Y+35	; 0x23
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6c a1       	ldd	r22, Y+36	; 0x24
    22ee:	7d a1       	ldd	r23, Y+37	; 0x25
    22f0:	8e a1       	ldd	r24, Y+38	; 0x26
    22f2:	9f a1       	ldd	r25, Y+39	; 0x27
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9f 8f       	std	Y+31, r25	; 0x1f
    2312:	8e 8f       	std	Y+30, r24	; 0x1e
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_ES_tTrigger_Enable+0x148>
    2316:	80 e9       	ldi	r24, 0x90	; 144
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	9d 8f       	std	Y+29, r25	; 0x1d
    231c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    231e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2320:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_ES_tTrigger_Enable+0x136>
    2326:	9d 8f       	std	Y+29, r25	; 0x1d
    2328:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    232c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9f 8f       	std	Y+31, r25	; 0x1f
    2332:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2336:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_ES_tTrigger_Enable+0x12a>
    233c:	24 c0       	rjmp	.+72     	; 0x2386 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	68 a1       	ldd	r22, Y+32	; 0x20
    2340:	79 a1       	ldd	r23, Y+33	; 0x21
    2342:	8a a1       	ldd	r24, Y+34	; 0x22
    2344:	9b a1       	ldd	r25, Y+35	; 0x23
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9f 8f       	std	Y+31, r25	; 0x1f
    2350:	8e 8f       	std	Y+30, r24	; 0x1e
    2352:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2354:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2356:	9b 8f       	std	Y+27, r25	; 0x1b
    2358:	8a 8f       	std	Y+26, r24	; 0x1a
    235a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    235c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_ES_tTrigger_Enable+0x172>
    2362:	9b 8f       	std	Y+27, r25	; 0x1b
    2364:	8a 8f       	std	Y+26, r24	; 0x1a
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2368:	69 a5       	ldd	r22, Y+41	; 0x29
    236a:	7a a5       	ldd	r23, Y+42	; 0x2a
    236c:	8b a5       	ldd	r24, Y+43	; 0x2b
    236e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	88 a7       	std	Y+40, r24	; 0x28
    237a:	88 a5       	ldd	r24, Y+40	; 0x28
    237c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    237e:	89 8d       	ldd	r24, Y+25	; 0x19
    2380:	8a 95       	dec	r24
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_ES_tTrigger_Enable+0x194>
    2384:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	aa ef       	ldi	r26, 0xFA	; 250
    2396:	b4 e4       	ldi	r27, 0x44	; 68
    2398:	8d 8b       	std	Y+21, r24	; 0x15
    239a:	9e 8b       	std	Y+22, r25	; 0x16
    239c:	af 8b       	std	Y+23, r26	; 0x17
    239e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23a0:	6d 89       	ldd	r22, Y+21	; 0x15
    23a2:	7e 89       	ldd	r23, Y+22	; 0x16
    23a4:	8f 89       	ldd	r24, Y+23	; 0x17
    23a6:	98 8d       	ldd	r25, Y+24	; 0x18
    23a8:	2b ea       	ldi	r18, 0xAB	; 171
    23aa:	3a ea       	ldi	r19, 0xAA	; 170
    23ac:	4a ea       	ldi	r20, 0xAA	; 170
    23ae:	50 e4       	ldi	r21, 0x40	; 64
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	89 8b       	std	Y+17, r24	; 0x11
    23ba:	9a 8b       	std	Y+18, r25	; 0x12
    23bc:	ab 8b       	std	Y+19, r26	; 0x13
    23be:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23c0:	69 89       	ldd	r22, Y+17	; 0x11
    23c2:	7a 89       	ldd	r23, Y+18	; 0x12
    23c4:	8b 89       	ldd	r24, Y+19	; 0x13
    23c6:	9c 89       	ldd	r25, Y+20	; 0x14
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	1c f4       	brge	.+6      	; 0x23de <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	88 8b       	std	Y+16, r24	; 0x10
    23dc:	91 c0       	rjmp	.+290    	; 0x2500 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    23de:	69 89       	ldd	r22, Y+17	; 0x11
    23e0:	7a 89       	ldd	r23, Y+18	; 0x12
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	53 e4       	ldi	r21, 0x43	; 67
    23ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <LCD_ES_tTrigger_Enable+0x20c>
    23f6:	7b c0       	rjmp	.+246    	; 0x24ee <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    23f8:	6d 89       	ldd	r22, Y+21	; 0x15
    23fa:	7e 89       	ldd	r23, Y+22	; 0x16
    23fc:	8f 89       	ldd	r24, Y+23	; 0x17
    23fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a e7       	ldi	r20, 0x7A	; 122
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8c 87       	std	Y+12, r24	; 0x0c
    2412:	9d 87       	std	Y+13, r25	; 0x0d
    2414:	ae 87       	std	Y+14, r26	; 0x0e
    2416:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6c 85       	ldd	r22, Y+12	; 0x0c
    241a:	7d 85       	ldd	r23, Y+13	; 0x0d
    241c:	8e 85       	ldd	r24, Y+14	; 0x0e
    241e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a e7       	ldi	r20, 0x7A	; 122
    2426:	55 e4       	ldi	r21, 0x45	; 69
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	88 87       	std	Y+8, r24	; 0x08
    2432:	99 87       	std	Y+9, r25	; 0x09
    2434:	aa 87       	std	Y+10, r26	; 0x0a
    2436:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2438:	68 85       	ldd	r22, Y+8	; 0x08
    243a:	79 85       	ldd	r23, Y+9	; 0x09
    243c:	8a 85       	ldd	r24, Y+10	; 0x0a
    243e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9f 83       	std	Y+7, r25	; 0x07
    2456:	8e 83       	std	Y+6, r24	; 0x06
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    245a:	68 85       	ldd	r22, Y+8	; 0x08
    245c:	79 85       	ldd	r23, Y+9	; 0x09
    245e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2460:	9b 85       	ldd	r25, Y+11	; 0x0b
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6c 85       	ldd	r22, Y+12	; 0x0c
    2474:	7d 85       	ldd	r23, Y+13	; 0x0d
    2476:	8e 85       	ldd	r24, Y+14	; 0x0e
    2478:	9f 85       	ldd	r25, Y+15	; 0x0f
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9f 83       	std	Y+7, r25	; 0x07
    2498:	8e 83       	std	Y+6, r24	; 0x06
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_ES_tTrigger_Enable+0x2ce>
    249c:	80 e9       	ldi	r24, 0x90	; 144
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	9d 83       	std	Y+5, r25	; 0x05
    24a2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	9d 81       	ldd	r25, Y+5	; 0x05
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_ES_tTrigger_Enable+0x2bc>
    24ac:	9d 83       	std	Y+5, r25	; 0x05
    24ae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8e 81       	ldd	r24, Y+6	; 0x06
    24b2:	9f 81       	ldd	r25, Y+7	; 0x07
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9f 83       	std	Y+7, r25	; 0x07
    24b8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8e 81       	ldd	r24, Y+6	; 0x06
    24bc:	9f 81       	ldd	r25, Y+7	; 0x07
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_ES_tTrigger_Enable+0x2b0>
    24c2:	24 c0       	rjmp	.+72     	; 0x250c <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	68 85       	ldd	r22, Y+8	; 0x08
    24c6:	79 85       	ldd	r23, Y+9	; 0x09
    24c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9f 83       	std	Y+7, r25	; 0x07
    24d6:	8e 83       	std	Y+6, r24	; 0x06
    24d8:	8e 81       	ldd	r24, Y+6	; 0x06
    24da:	9f 81       	ldd	r25, Y+7	; 0x07
    24dc:	9b 83       	std	Y+3, r25	; 0x03
    24de:	8a 83       	std	Y+2, r24	; 0x02
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	9b 81       	ldd	r25, Y+3	; 0x03
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_ES_tTrigger_Enable+0x2f8>
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ee:	69 89       	ldd	r22, Y+17	; 0x11
    24f0:	7a 89       	ldd	r23, Y+18	; 0x12
    24f2:	8b 89       	ldd	r24, Y+19	; 0x13
    24f4:	9c 89       	ldd	r25, Y+20	; 0x14
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	88 8b       	std	Y+16, r24	; 0x10
    2500:	88 89       	ldd	r24, Y+16	; 0x10
    2502:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	8a 95       	dec	r24
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_ES_tTrigger_Enable+0x31a>
    250a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    250c:	80 e0       	ldi	r24, 0x00	; 0
}
    250e:	e0 96       	adiw	r28, 0x30	; 48
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    252e:	88 e2       	ldi	r24, 0x28	; 40
    2530:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2534:	8e e0       	ldi	r24, 0x0E	; 14
    2536:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    253a:	86 e0       	ldi	r24, 0x06	; 6
    253c:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
	return ES_OK;
    2546:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	2e 97       	sbiw	r28, 0x0e	; 14
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a0 e0       	ldi	r26, 0x00	; 0
    256e:	b0 e4       	ldi	r27, 0x40	; 64
    2570:	8b 87       	std	Y+11, r24	; 0x0b
    2572:	9c 87       	std	Y+12, r25	; 0x0c
    2574:	ad 87       	std	Y+13, r26	; 0x0d
    2576:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	6b 85       	ldd	r22, Y+11	; 0x0b
    257a:	7c 85       	ldd	r23, Y+12	; 0x0c
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a e7       	ldi	r20, 0x7A	; 122
    2586:	55 e4       	ldi	r21, 0x45	; 69
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	8f 83       	std	Y+7, r24	; 0x07
    2592:	98 87       	std	Y+8, r25	; 0x08
    2594:	a9 87       	std	Y+9, r26	; 0x09
    2596:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	2c f4       	brge	.+10     	; 0x25ba <lcd_ES_tclear+0x6c>
		__ticks = 1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	3f c0       	rjmp	.+126    	; 0x2638 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	4c f5       	brge	.+82     	; 0x2624 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <lcd_ES_tclear+0xcc>
    25fc:	80 e9       	ldi	r24, 0x90	; 144
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <lcd_ES_tclear+0xba>
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	9e 81       	ldd	r25, Y+6	; 0x06
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <lcd_ES_tclear+0xae>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <lcd_ES_tclear+0xf6>
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    264c:	80 e0       	ldi	r24, 0x00	; 0
}
    264e:	2e 96       	adiw	r28, 0x0e	; 14
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	0f 92       	push	r0
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	61 e0       	ldi	r22, 0x01	; 1
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	88 23       	and	r24, r24
    2684:	34 f4       	brge	.+12     	; 0x2692 <Lcd_ES_tsendCmd+0x32>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	66 e0       	ldi	r22, 0x06	; 6
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    2690:	05 c0       	rjmp	.+10     	; 0x269c <Lcd_ES_tsendCmd+0x3c>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	66 e0       	ldi	r22, 0x06	; 6
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	82 95       	swap	r24
    26a0:	86 95       	lsr	r24
    26a2:	86 95       	lsr	r24
    26a4:	83 70       	andi	r24, 0x03	; 3
    26a6:	88 2f       	mov	r24, r24
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	81 70       	andi	r24, 0x01	; 1
    26ac:	90 70       	andi	r25, 0x00	; 0
    26ae:	88 23       	and	r24, r24
    26b0:	31 f0       	breq	.+12     	; 0x26be <Lcd_ES_tsendCmd+0x5e>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	65 e0       	ldi	r22, 0x05	; 5
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <Lcd_ES_tsendCmd+0x68>
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	65 e0       	ldi	r22, 0x05	; 5
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	82 95       	swap	r24
    26cc:	86 95       	lsr	r24
    26ce:	87 70       	andi	r24, 0x07	; 7
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	81 70       	andi	r24, 0x01	; 1
    26d6:	90 70       	andi	r25, 0x00	; 0
    26d8:	88 23       	and	r24, r24
    26da:	31 f0       	breq	.+12     	; 0x26e8 <Lcd_ES_tsendCmd+0x88>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <Lcd_ES_tsendCmd+0x92>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	64 e0       	ldi	r22, 0x04	; 4
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	82 95       	swap	r24
    26f6:	8f 70       	andi	r24, 0x0F	; 15
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	81 70       	andi	r24, 0x01	; 1
    26fe:	90 70       	andi	r25, 0x00	; 0
    2700:	88 23       	and	r24, r24
    2702:	31 f0       	breq	.+12     	; 0x2710 <Lcd_ES_tsendCmd+0xb0>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	63 e0       	ldi	r22, 0x03	; 3
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    270e:	05 c0       	rjmp	.+10     	; 0x271a <Lcd_ES_tsendCmd+0xba>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	63 e0       	ldi	r22, 0x03	; 3
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    271a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	86 95       	lsr	r24
    2722:	86 95       	lsr	r24
    2724:	86 95       	lsr	r24
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	81 70       	andi	r24, 0x01	; 1
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	88 23       	and	r24, r24
    2730:	31 f0       	breq	.+12     	; 0x273e <Lcd_ES_tsendCmd+0xde>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    273c:	05 c0       	rjmp	.+10     	; 0x2748 <Lcd_ES_tsendCmd+0xe8>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	66 e0       	ldi	r22, 0x06	; 6
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	86 95       	lsr	r24
    274c:	86 95       	lsr	r24
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	81 70       	andi	r24, 0x01	; 1
    2754:	90 70       	andi	r25, 0x00	; 0
    2756:	88 23       	and	r24, r24
    2758:	31 f0       	breq	.+12     	; 0x2766 <Lcd_ES_tsendCmd+0x106>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	65 e0       	ldi	r22, 0x05	; 5
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    2764:	05 c0       	rjmp	.+10     	; 0x2770 <Lcd_ES_tsendCmd+0x110>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	65 e0       	ldi	r22, 0x05	; 5
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	86 95       	lsr	r24
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	81 70       	andi	r24, 0x01	; 1
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	88 23       	and	r24, r24
    277e:	31 f0       	breq	.+12     	; 0x278c <Lcd_ES_tsendCmd+0x12c>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <Lcd_ES_tsendCmd+0x136>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	64 e0       	ldi	r22, 0x04	; 4
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	81 70       	andi	r24, 0x01	; 1
    279e:	90 70       	andi	r25, 0x00	; 0
    27a0:	88 23       	and	r24, r24
    27a2:	31 f0       	breq	.+12     	; 0x27b0 <Lcd_ES_tsendCmd+0x150>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	63 e0       	ldi	r22, 0x03	; 3
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    27ae:	05 c0       	rjmp	.+10     	; 0x27ba <Lcd_ES_tsendCmd+0x15a>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	63 e0       	ldi	r22, 0x03	; 3
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    27ba:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_ES_tTrigger_Enable>
	return ES_OK;
    27be:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	0f 92       	push	r0
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	88 23       	and	r24, r24
    27ec:	34 f4       	brge	.+12     	; 0x27fa <Lcd_ES_tsendChar+0x32>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	66 e0       	ldi	r22, 0x06	; 6
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    27f8:	05 c0       	rjmp	.+10     	; 0x2804 <Lcd_ES_tsendChar+0x3c>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	66 e0       	ldi	r22, 0x06	; 6
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	82 95       	swap	r24
    2808:	86 95       	lsr	r24
    280a:	86 95       	lsr	r24
    280c:	83 70       	andi	r24, 0x03	; 3
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	81 70       	andi	r24, 0x01	; 1
    2814:	90 70       	andi	r25, 0x00	; 0
    2816:	88 23       	and	r24, r24
    2818:	31 f0       	breq	.+12     	; 0x2826 <Lcd_ES_tsendChar+0x5e>
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <Lcd_ES_tsendChar+0x68>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	65 e0       	ldi	r22, 0x05	; 5
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	82 95       	swap	r24
    2834:	86 95       	lsr	r24
    2836:	87 70       	andi	r24, 0x07	; 7
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	81 70       	andi	r24, 0x01	; 1
    283e:	90 70       	andi	r25, 0x00	; 0
    2840:	88 23       	and	r24, r24
    2842:	31 f0       	breq	.+12     	; 0x2850 <Lcd_ES_tsendChar+0x88>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	64 e0       	ldi	r22, 0x04	; 4
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    284e:	05 c0       	rjmp	.+10     	; 0x285a <Lcd_ES_tsendChar+0x92>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	82 95       	swap	r24
    285e:	8f 70       	andi	r24, 0x0F	; 15
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	81 70       	andi	r24, 0x01	; 1
    2866:	90 70       	andi	r25, 0x00	; 0
    2868:	88 23       	and	r24, r24
    286a:	31 f0       	breq	.+12     	; 0x2878 <Lcd_ES_tsendChar+0xb0>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	63 e0       	ldi	r22, 0x03	; 3
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    2876:	05 c0       	rjmp	.+10     	; 0x2882 <Lcd_ES_tsendChar+0xba>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	63 e0       	ldi	r22, 0x03	; 3
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2882:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	86 95       	lsr	r24
    288a:	86 95       	lsr	r24
    288c:	86 95       	lsr	r24
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	81 70       	andi	r24, 0x01	; 1
    2894:	90 70       	andi	r25, 0x00	; 0
    2896:	88 23       	and	r24, r24
    2898:	31 f0       	breq	.+12     	; 0x28a6 <Lcd_ES_tsendChar+0xde>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	66 e0       	ldi	r22, 0x06	; 6
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <Lcd_ES_tsendChar+0xe8>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	66 e0       	ldi	r22, 0x06	; 6
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	86 95       	lsr	r24
    28b4:	86 95       	lsr	r24
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	81 70       	andi	r24, 0x01	; 1
    28bc:	90 70       	andi	r25, 0x00	; 0
    28be:	88 23       	and	r24, r24
    28c0:	31 f0       	breq	.+12     	; 0x28ce <Lcd_ES_tsendChar+0x106>
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	65 e0       	ldi	r22, 0x05	; 5
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    28cc:	05 c0       	rjmp	.+10     	; 0x28d8 <Lcd_ES_tsendChar+0x110>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	65 e0       	ldi	r22, 0x05	; 5
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	86 95       	lsr	r24
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	81 70       	andi	r24, 0x01	; 1
    28e2:	90 70       	andi	r25, 0x00	; 0
    28e4:	88 23       	and	r24, r24
    28e6:	31 f0       	breq	.+12     	; 0x28f4 <Lcd_ES_tsendChar+0x12c>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	64 e0       	ldi	r22, 0x04	; 4
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    28f2:	05 c0       	rjmp	.+10     	; 0x28fe <Lcd_ES_tsendChar+0x136>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	64 e0       	ldi	r22, 0x04	; 4
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	81 70       	andi	r24, 0x01	; 1
    2906:	90 70       	andi	r25, 0x00	; 0
    2908:	88 23       	and	r24, r24
    290a:	31 f0       	breq	.+12     	; 0x2918 <Lcd_ES_tsendChar+0x150>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	63 e0       	ldi	r22, 0x03	; 3
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
    2916:	05 c0       	rjmp	.+10     	; 0x2922 <Lcd_ES_tsendChar+0x15a>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2922:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2926:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <Lcd_ES_tsendString+0x6>
    2936:	0f 92       	push	r0
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	9b 83       	std	Y+3, r25	; 0x03
    293e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    2954:	19 82       	std	Y+1, r1	; 0x01
    2956:	0e c0       	rjmp	.+28     	; 0x2974 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	9b 81       	ldd	r25, Y+3	; 0x03
    2962:	fc 01       	movw	r30, r24
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	80 81       	ld	r24, Z
    296a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Lcd_ES_tsendChar>
		i++;
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	fc 01       	movw	r30, r24
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	80 81       	ld	r24, Z
    2986:	88 23       	and	r24, r24
    2988:	39 f7       	brne	.-50     	; 0x2958 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    298a:	80 e0       	ldi	r24, 0x00	; 0
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <Lcd_ES_tsendString_xy+0x6>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <Lcd_ES_tsendString_xy+0x8>
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	6b 83       	std	Y+3, r22	; 0x03
    29aa:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	6c 81       	ldd	r22, Y+4	; 0x04
    29c4:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	0e 94 98 14 	call	0x2930	; 0x2930 <Lcd_ES_tsendString>
	return ES_OK;
    29d0:	80 e0       	ldi	r24, 0x00	; 0

}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	2e 97       	sbiw	r28, 0x0e	; 14
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	9e 87       	std	Y+14, r25	; 0x0e
    29f6:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2a0c:	1a 82       	std	Y+2, r1	; 0x02
    2a0e:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	11 f5       	brne	.+68     	; 0x2a5c <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    2a18:	80 e3       	ldi	r24, 0x30	; 48
    2a1a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Lcd_ES_tsendChar>
    2a1e:	39 c0       	rjmp	.+114    	; 0x2a92 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	e8 2f       	mov	r30, r24
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2a:	2a e0       	ldi	r18, 0x0A	; 10
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	b9 01       	movw	r22, r18
    2a30:	0e 94 36 1a 	call	0x346c	; 0x346c <__udivmodhi4>
    2a34:	28 2f       	mov	r18, r24
    2a36:	20 5d       	subi	r18, 0xD0	; 208
    2a38:	ce 01       	movw	r24, r28
    2a3a:	03 96       	adiw	r24, 0x03	; 3
    2a3c:	e8 0f       	add	r30, r24
    2a3e:	f9 1f       	adc	r31, r25
    2a40:	20 83       	st	Z, r18
			num /= 10;
    2a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a46:	2a e0       	ldi	r18, 0x0A	; 10
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	b9 01       	movw	r22, r18
    2a4c:	0e 94 36 1a 	call	0x346c	; 0x346c <__udivmodhi4>
    2a50:	cb 01       	movw	r24, r22
    2a52:	9e 87       	std	Y+14, r25	; 0x0e
    2a54:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	f1 f6       	brne	.-68     	; 0x2a20 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	89 83       	std	Y+1, r24	; 0x01
    2a68:	11 c0       	rjmp	.+34     	; 0x2a8c <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9c 01       	movw	r18, r24
    2a72:	21 50       	subi	r18, 0x01	; 1
    2a74:	30 40       	sbci	r19, 0x00	; 0
    2a76:	ce 01       	movw	r24, r28
    2a78:	03 96       	adiw	r24, 0x03	; 3
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	e2 0f       	add	r30, r18
    2a7e:	f3 1f       	adc	r31, r19
    2a80:	80 81       	ld	r24, Z
    2a82:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	81 50       	subi	r24, 0x01	; 1
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	88 23       	and	r24, r24
    2a90:	61 f7       	brne	.-40     	; 0x2a6a <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    2a92:	80 e0       	ldi	r24, 0x00	; 0
}
    2a94:	2e 96       	adiw	r28, 0x0e	; 14
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	a3 97       	sbiw	r28, 0x23	; 35
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	98 a3       	std	Y+32, r25	; 0x20
    2abc:	8f 8f       	std	Y+31, r24	; 0x1f
    2abe:	69 a3       	std	Y+33, r22	; 0x21
    2ac0:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	61 e0       	ldi	r22, 0x01	; 1
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>


	if(row == 1){
    2ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	09 f0       	breq	.+2      	; 0x2ade <Lcd_ES_tdisplayNum_xy+0x38>
    2adc:	76 c0       	rjmp	.+236    	; 0x2bca <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    2ade:	80 e8       	ldi	r24, 0x80	; 128
    2ae0:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	a0 e8       	ldi	r26, 0x80	; 128
    2aea:	bf e3       	ldi	r27, 0x3F	; 63
    2aec:	89 8f       	std	Y+25, r24	; 0x19
    2aee:	9a 8f       	std	Y+26, r25	; 0x1a
    2af0:	ab 8f       	std	Y+27, r26	; 0x1b
    2af2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af4:	69 8d       	ldd	r22, Y+25	; 0x19
    2af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	4a e7       	ldi	r20, 0x7A	; 122
    2b02:	55 e4       	ldi	r21, 0x45	; 69
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	8d 8b       	std	Y+21, r24	; 0x15
    2b0e:	9e 8b       	std	Y+22, r25	; 0x16
    2b10:	af 8b       	std	Y+23, r26	; 0x17
    2b12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b14:	6d 89       	ldd	r22, Y+21	; 0x15
    2b16:	7e 89       	ldd	r23, Y+22	; 0x16
    2b18:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e8       	ldi	r20, 0x80	; 128
    2b22:	5f e3       	ldi	r21, 0x3F	; 63
    2b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b28:	88 23       	and	r24, r24
    2b2a:	2c f4       	brge	.+10     	; 0x2b36 <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9c 8b       	std	Y+20, r25	; 0x14
    2b32:	8b 8b       	std	Y+19, r24	; 0x13
    2b34:	3f c0       	rjmp	.+126    	; 0x2bb4 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    2b36:	6d 89       	ldd	r22, Y+21	; 0x15
    2b38:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	3f ef       	ldi	r19, 0xFF	; 255
    2b42:	4f e7       	ldi	r20, 0x7F	; 127
    2b44:	57 e4       	ldi	r21, 0x47	; 71
    2b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b4a:	18 16       	cp	r1, r24
    2b4c:	4c f5       	brge	.+82     	; 0x2ba0 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e2       	ldi	r20, 0x20	; 32
    2b5c:	51 e4       	ldi	r21, 0x41	; 65
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	0f c0       	rjmp	.+30     	; 0x2b96 <Lcd_ES_tdisplayNum_xy+0xf0>
    2b78:	80 e9       	ldi	r24, 0x90	; 144
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	9a 8b       	std	Y+18, r25	; 0x12
    2b7e:	89 8b       	std	Y+17, r24	; 0x11
    2b80:	89 89       	ldd	r24, Y+17	; 0x11
    2b82:	9a 89       	ldd	r25, Y+18	; 0x12
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <Lcd_ES_tdisplayNum_xy+0xde>
    2b88:	9a 8b       	std	Y+18, r25	; 0x12
    2b8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b96:	8b 89       	ldd	r24, Y+19	; 0x13
    2b98:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	69 f7       	brne	.-38     	; 0x2b78 <Lcd_ES_tdisplayNum_xy+0xd2>
    2b9e:	92 c0       	rjmp	.+292    	; 0x2cc4 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	9c 8b       	std	Y+20, r25	; 0x14
    2bb2:	8b 8b       	std	Y+19, r24	; 0x13
    2bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb8:	98 8b       	std	Y+16, r25	; 0x10
    2bba:	8f 87       	std	Y+15, r24	; 0x0f
    2bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bbe:	98 89       	ldd	r25, Y+16	; 0x10
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <Lcd_ES_tdisplayNum_xy+0x11a>
    2bc4:	98 8b       	std	Y+16, r25	; 0x10
    2bc6:	8f 87       	std	Y+15, r24	; 0x0f
    2bc8:	7d c0       	rjmp	.+250    	; 0x2cc4 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    2bca:	89 a1       	ldd	r24, Y+33	; 0x21
    2bcc:	82 30       	cpi	r24, 0x02	; 2
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <Lcd_ES_tdisplayNum_xy+0x12c>
    2bd0:	76 c0       	rjmp	.+236    	; 0x2cbe <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    2bd2:	80 ec       	ldi	r24, 0xC0	; 192
    2bd4:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a0 e2       	ldi	r26, 0x20	; 32
    2bde:	b1 e4       	ldi	r27, 0x41	; 65
    2be0:	8b 87       	std	Y+11, r24	; 0x0b
    2be2:	9c 87       	std	Y+12, r25	; 0x0c
    2be4:	ad 87       	std	Y+13, r26	; 0x0d
    2be6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	55 e4       	ldi	r21, 0x45	; 69
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8f 83       	std	Y+7, r24	; 0x07
    2c02:	98 87       	std	Y+8, r25	; 0x08
    2c04:	a9 87       	std	Y+9, r26	; 0x09
    2c06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <Lcd_ES_tdisplayNum_xy+0x1e4>
    2c6c:	80 e9       	ldi	r24, 0x90	; 144
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	9c 83       	std	Y+4, r25	; 0x04
    2c72:	8b 83       	std	Y+3, r24	; 0x03
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <Lcd_ES_tdisplayNum_xy+0x1d2>
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <Lcd_ES_tdisplayNum_xy+0x1c6>
    2c92:	18 c0       	rjmp	.+48     	; 0x2cc4 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <Lcd_ES_tdisplayNum_xy+0x20e>
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	8b a3       	std	Y+35, r24	; 0x23
    2cc2:	1a c0       	rjmp	.+52     	; 0x2cf8 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
    2ccc:	08 c0       	rjmp	.+16     	; 0x2cde <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    2cce:	8c e1       	ldi	r24, 0x1C	; 28
    2cd0:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    2cd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	9e 8f       	std	Y+30, r25	; 0x1e
    2cdc:	8d 8f       	std	Y+29, r24	; 0x1d
    2cde:	8a a1       	ldd	r24, Y+34	; 0x22
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ce8:	28 17       	cp	r18, r24
    2cea:	39 07       	cpc	r19, r25
    2cec:	84 f7       	brge	.-32     	; 0x2cce <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2cee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cf0:	98 a1       	ldd	r25, Y+32	; 0x20
    2cf2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Lcd_ES_tdisplayNum>
	return ES_OK;
    2cf6:	1b a2       	std	Y+35, r1	; 0x23
    2cf8:	8b a1       	ldd	r24, Y+35	; 0x23

}
    2cfa:	a3 96       	adiw	r28, 0x23	; 35
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	a2 97       	sbiw	r28, 0x22	; 34
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	8f 8f       	std	Y+31, r24	; 0x1f
    2d22:	68 a3       	std	Y+32, r22	; 0x20
    2d24:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	61 e0       	ldi	r22, 0x01	; 1
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>


	if(row == 1){
    2d3a:	88 a1       	ldd	r24, Y+32	; 0x20
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	09 f0       	breq	.+2      	; 0x2d42 <Lcd_ES_tsendChar_xy+0x36>
    2d40:	76 c0       	rjmp	.+236    	; 0x2e2e <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    2d42:	80 e8       	ldi	r24, 0x80	; 128
    2d44:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e8       	ldi	r26, 0x80	; 128
    2d4e:	bf e3       	ldi	r27, 0x3F	; 63
    2d50:	89 8f       	std	Y+25, r24	; 0x19
    2d52:	9a 8f       	std	Y+26, r25	; 0x1a
    2d54:	ab 8f       	std	Y+27, r26	; 0x1b
    2d56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	69 8d       	ldd	r22, Y+25	; 0x19
    2d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a e7       	ldi	r20, 0x7A	; 122
    2d66:	55 e4       	ldi	r21, 0x45	; 69
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8d 8b       	std	Y+21, r24	; 0x15
    2d72:	9e 8b       	std	Y+22, r25	; 0x16
    2d74:	af 8b       	std	Y+23, r26	; 0x17
    2d76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d78:	6d 89       	ldd	r22, Y+21	; 0x15
    2d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9c 8b       	std	Y+20, r25	; 0x14
    2d96:	8b 8b       	std	Y+19, r24	; 0x13
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2da0:	98 8d       	ldd	r25, Y+24	; 0x18
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	69 8d       	ldd	r22, Y+25	; 0x19
    2db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <Lcd_ES_tsendChar_xy+0xee>
    2ddc:	80 e9       	ldi	r24, 0x90	; 144
    2dde:	91 e0       	ldi	r25, 0x01	; 1
    2de0:	9a 8b       	std	Y+18, r25	; 0x12
    2de2:	89 8b       	std	Y+17, r24	; 0x11
    2de4:	89 89       	ldd	r24, Y+17	; 0x11
    2de6:	9a 89       	ldd	r25, Y+18	; 0x12
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <Lcd_ES_tsendChar_xy+0xdc>
    2dec:	9a 8b       	std	Y+18, r25	; 0x12
    2dee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8b 89       	ldd	r24, Y+19	; 0x13
    2df2:	9c 89       	ldd	r25, Y+20	; 0x14
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <Lcd_ES_tsendChar_xy+0xd0>
    2e02:	92 c0       	rjmp	.+292    	; 0x2f28 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6d 89       	ldd	r22, Y+21	; 0x15
    2e06:	7e 89       	ldd	r23, Y+22	; 0x16
    2e08:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9c 8b       	std	Y+20, r25	; 0x14
    2e16:	8b 8b       	std	Y+19, r24	; 0x13
    2e18:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1c:	98 8b       	std	Y+16, r25	; 0x10
    2e1e:	8f 87       	std	Y+15, r24	; 0x0f
    2e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e22:	98 89       	ldd	r25, Y+16	; 0x10
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <Lcd_ES_tsendChar_xy+0x118>
    2e28:	98 8b       	std	Y+16, r25	; 0x10
    2e2a:	8f 87       	std	Y+15, r24	; 0x0f
    2e2c:	7d c0       	rjmp	.+250    	; 0x2f28 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    2e2e:	88 a1       	ldd	r24, Y+32	; 0x20
    2e30:	82 30       	cpi	r24, 0x02	; 2
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <Lcd_ES_tsendChar_xy+0x12a>
    2e34:	76 c0       	rjmp	.+236    	; 0x2f22 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    2e36:	80 ec       	ldi	r24, 0xC0	; 192
    2e38:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e2       	ldi	r26, 0x20	; 32
    2e42:	b1 e4       	ldi	r27, 0x41	; 65
    2e44:	8b 87       	std	Y+11, r24	; 0x0b
    2e46:	9c 87       	std	Y+12, r25	; 0x0c
    2e48:	ad 87       	std	Y+13, r26	; 0x0d
    2e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a e7       	ldi	r20, 0x7A	; 122
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8f 83       	std	Y+7, r24	; 0x07
    2e66:	98 87       	std	Y+8, r25	; 0x08
    2e68:	a9 87       	std	Y+9, r26	; 0x09
    2e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	8d 83       	std	Y+5, r24	; 0x05
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    2e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e90:	78 85       	ldd	r23, Y+8	; 0x08
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	4c f5       	brge	.+82     	; 0x2ef8 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <Lcd_ES_tsendChar_xy+0x1e2>
    2ed0:	80 e9       	ldi	r24, 0x90	; 144
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <Lcd_ES_tsendChar_xy+0x1d0>
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	9e 83       	std	Y+6, r25	; 0x06
    2eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <Lcd_ES_tsendChar_xy+0x1c4>
    2ef6:	18 c0       	rjmp	.+48     	; 0x2f28 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    2efa:	78 85       	ldd	r23, Y+8	; 0x08
    2efc:	89 85       	ldd	r24, Y+9	; 0x09
    2efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <Lcd_ES_tsendChar_xy+0x20c>
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	8a a3       	std	Y+34, r24	; 0x22
    2f26:	19 c0       	rjmp	.+50     	; 0x2f5a <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f30:	08 c0       	rjmp	.+16     	; 0x2f42 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    2f32:	8c e1       	ldi	r24, 0x1C	; 28
    2f34:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    2f38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f40:	8d 8f       	std	Y+29, r24	; 0x1d
    2f42:	89 a1       	ldd	r24, Y+33	; 0x21
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f4c:	28 17       	cp	r18, r24
    2f4e:	39 07       	cpc	r19, r25
    2f50:	84 f7       	brge	.-32     	; 0x2f32 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    2f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f54:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Lcd_ES_tsendChar>
	return ES_OK;
    2f58:	1a a2       	std	Y+34, r1	; 0x22
    2f5a:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2f5c:	a2 96       	adiw	r28, 0x22	; 34
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <LCD_ES_tSet_Cursor_Pos+0x6>
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <LCD_ES_tSet_Cursor_Pos+0x8>
    2f76:	0f 92       	push	r0
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	81 50       	subi	r24, 0x01	; 1
    2f84:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	3d 83       	std	Y+5, r19	; 0x05
    2f8e:	2c 83       	std	Y+4, r18	; 0x04
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	9d 81       	ldd	r25, Y+5	; 0x05
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	91 05       	cpc	r25, r1
    2f98:	31 f0       	breq	.+12     	; 0x2fa6 <LCD_ES_tSet_Cursor_Pos+0x38>
    2f9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f9e:	22 30       	cpi	r18, 0x02	; 2
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	31 f0       	breq	.+12     	; 0x2fb0 <LCD_ES_tSet_Cursor_Pos+0x42>
    2fa4:	0a c0       	rjmp	.+20     	; 0x2fba <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    2fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa8:	80 58       	subi	r24, 0x80	; 128
    2faa:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2fae:	08 c0       	rjmp	.+16     	; 0x2fc0 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	80 54       	subi	r24, 0x40	; 64
    2fb4:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    2fba:	31 e0       	ldi	r19, 0x01	; 1
    2fbc:	3b 83       	std	Y+3, r19	; 0x03
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    2fc0:	1b 82       	std	Y+3, r1	; 0x03
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <LCD_ES_tGoTo+0x6>
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	88 23       	and	r24, r24
    2fe8:	41 f4       	brne	.+16     	; 0x2ffa <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	80 31       	cpi	r24, 0x10	; 16
    2fee:	98 f4       	brcc	.+38     	; 0x3016 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	80 58       	subi	r24, 0x80	; 128
    2ff4:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    2ff8:	0e c0       	rjmp	.+28     	; 0x3016 <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	41 f4       	brne	.+16     	; 0x3010 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	80 31       	cpi	r24, 0x10	; 16
    3004:	40 f4       	brcc	.+16     	; 0x3016 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	80 54       	subi	r24, 0x40	; 64
    300a:	0e 94 30 13 	call	0x2660	; 0x2660 <Lcd_ES_tsendCmd>
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	01 c0       	rjmp	.+2      	; 0x3018 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    3016:	1b 82       	std	Y+3, r1	; 0x03
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
}
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	65 97       	sbiw	r28, 0x15	; 21
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	9c 8b       	std	Y+20, r25	; 0x14
    303c:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    303e:	eb 89       	ldd	r30, Y+19	; 0x13
    3040:	fc 89       	ldd	r31, Y+20	; 0x14
    3042:	8f ef       	ldi	r24, 0xFF	; 255
    3044:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    3046:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    3048:	8b 89       	ldd	r24, Y+19	; 0x13
    304a:	9c 89       	ldd	r25, Y+20	; 0x14
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	09 f4       	brne	.+2      	; 0x3052 <KPD_ES_tGetKeyPressed+0x2c>
    3050:	ed c0       	rjmp	.+474    	; 0x322c <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3052:	19 8a       	std	Y+17, r1	; 0x11
    3054:	e5 c0       	rjmp	.+458    	; 0x3220 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    3056:	89 89       	ldd	r24, Y+17	; 0x11
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	fc 01       	movw	r30, r24
    305e:	e1 51       	subi	r30, 0x11	; 17
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	90 81       	ld	r25, Z
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	69 2f       	mov	r22, r25
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    306e:	18 8a       	std	Y+16, r1	; 0x10
    3070:	c1 c0       	rjmp	.+386    	; 0x31f4 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3072:	88 89       	ldd	r24, Y+16	; 0x10
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	fc 01       	movw	r30, r24
    307a:	ed 50       	subi	r30, 0x0D	; 13
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	90 81       	ld	r25, Z
    3080:	9e 01       	movw	r18, r28
    3082:	2e 5e       	subi	r18, 0xEE	; 238
    3084:	3f 4f       	sbci	r19, 0xFF	; 255
    3086:	83 e0       	ldi	r24, 0x03	; 3
    3088:	69 2f       	mov	r22, r25
    308a:	a9 01       	movw	r20, r18
    308c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    3090:	8a 89       	ldd	r24, Y+18	; 0x12
    3092:	88 23       	and	r24, r24
    3094:	09 f0       	breq	.+2      	; 0x3098 <KPD_ES_tGetKeyPressed+0x72>
    3096:	ab c0       	rjmp	.+342    	; 0x31ee <KPD_ES_tGetKeyPressed+0x1c8>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 ea       	ldi	r26, 0xA0	; 160
    309e:	b1 e4       	ldi	r27, 0x41	; 65
    30a0:	8b 87       	std	Y+11, r24	; 0x0b
    30a2:	9c 87       	std	Y+12, r25	; 0x0c
    30a4:	ad 87       	std	Y+13, r26	; 0x0d
    30a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a e7       	ldi	r20, 0x7A	; 122
    30b6:	55 e4       	ldi	r21, 0x45	; 69
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	8f 83       	std	Y+7, r24	; 0x07
    30c2:	98 87       	std	Y+8, r25	; 0x08
    30c4:	a9 87       	std	Y+9, r26	; 0x09
    30c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e8       	ldi	r20, 0x80	; 128
    30d6:	5f e3       	ldi	r21, 0x3F	; 63
    30d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30dc:	88 23       	and	r24, r24
    30de:	2c f4       	brge	.+10     	; 0x30ea <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	3f c0       	rjmp	.+126    	; 0x3168 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    30ea:	6f 81       	ldd	r22, Y+7	; 0x07
    30ec:	78 85       	ldd	r23, Y+8	; 0x08
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	57 e4       	ldi	r21, 0x47	; 71
    30fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	4c f5       	brge	.+82     	; 0x3154 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	6b 85       	ldd	r22, Y+11	; 0x0b
    3104:	7c 85       	ldd	r23, Y+12	; 0x0c
    3106:	8d 85       	ldd	r24, Y+13	; 0x0d
    3108:	9e 85       	ldd	r25, Y+14	; 0x0e
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	0f c0       	rjmp	.+30     	; 0x314a <KPD_ES_tGetKeyPressed+0x124>
    312c:	80 e9       	ldi	r24, 0x90	; 144
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <KPD_ES_tGetKeyPressed+0x112>
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	69 f7       	brne	.-38     	; 0x312c <KPD_ES_tGetKeyPressed+0x106>
    3152:	14 c0       	rjmp	.+40     	; 0x317c <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <KPD_ES_tGetKeyPressed+0x14e>
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    317c:	88 89       	ldd	r24, Y+16	; 0x10
    317e:	88 2f       	mov	r24, r24
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	fc 01       	movw	r30, r24
    3184:	ed 50       	subi	r30, 0x0D	; 13
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	90 81       	ld	r25, Z
    318a:	9e 01       	movw	r18, r28
    318c:	2e 5e       	subi	r18, 0xEE	; 238
    318e:	3f 4f       	sbci	r19, 0xFF	; 255
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	69 2f       	mov	r22, r25
    3194:	a9 01       	movw	r20, r18
    3196:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tGetPinValue>
    319a:	0f c0       	rjmp	.+30     	; 0x31ba <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    319c:	88 89       	ldd	r24, Y+16	; 0x10
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	fc 01       	movw	r30, r24
    31a4:	ed 50       	subi	r30, 0x0D	; 13
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	90 81       	ld	r25, Z
    31aa:	9e 01       	movw	r18, r28
    31ac:	2e 5e       	subi	r18, 0xEE	; 238
    31ae:	3f 4f       	sbci	r19, 0xFF	; 255
    31b0:	83 e0       	ldi	r24, 0x03	; 3
    31b2:	69 2f       	mov	r22, r25
    31b4:	a9 01       	movw	r20, r18
    31b6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    31ba:	8a 89       	ldd	r24, Y+18	; 0x12
    31bc:	88 23       	and	r24, r24
    31be:	71 f3       	breq	.-36     	; 0x319c <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    31c0:	89 89       	ldd	r24, Y+17	; 0x11
    31c2:	48 2f       	mov	r20, r24
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	88 89       	ldd	r24, Y+16	; 0x10
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	ca 01       	movw	r24, r20
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	82 0f       	add	r24, r18
    31d8:	93 1f       	adc	r25, r19
    31da:	fc 01       	movw	r30, r24
    31dc:	e1 52       	subi	r30, 0x21	; 33
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	eb 89       	ldd	r30, Y+19	; 0x13
    31e4:	fc 89       	ldd	r31, Y+20	; 0x14
    31e6:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	8f 87       	std	Y+15, r24	; 0x0f
    31ec:	07 c0       	rjmp	.+14     	; 0x31fc <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    31ee:	88 89       	ldd	r24, Y+16	; 0x10
    31f0:	8f 5f       	subi	r24, 0xFF	; 255
    31f2:	88 8b       	std	Y+16, r24	; 0x10
    31f4:	88 89       	ldd	r24, Y+16	; 0x10
    31f6:	84 30       	cpi	r24, 0x04	; 4
    31f8:	08 f4       	brcc	.+2      	; 0x31fc <KPD_ES_tGetKeyPressed+0x1d6>
    31fa:	3b cf       	rjmp	.-394    	; 0x3072 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    31fc:	89 89       	ldd	r24, Y+17	; 0x11
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	fc 01       	movw	r30, r24
    3204:	e1 51       	subi	r30, 0x11	; 17
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	90 81       	ld	r25, Z
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	69 2f       	mov	r22, r25
    320e:	41 e0       	ldi	r20, 0x01	; 1
    3210:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3214:	8f 85       	ldd	r24, Y+15	; 0x0f
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	39 f0       	breq	.+14     	; 0x3228 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    321a:	89 89       	ldd	r24, Y+17	; 0x11
    321c:	8f 5f       	subi	r24, 0xFF	; 255
    321e:	89 8b       	std	Y+17, r24	; 0x11
    3220:	89 89       	ldd	r24, Y+17	; 0x11
    3222:	84 30       	cpi	r24, 0x04	; 4
    3224:	08 f4       	brcc	.+2      	; 0x3228 <KPD_ES_tGetKeyPressed+0x202>
    3226:	17 cf       	rjmp	.-466    	; 0x3056 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3228:	1d 8a       	std	Y+21, r1	; 0x15
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	8d 8b       	std	Y+21, r24	; 0x15
    3230:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3232:	65 96       	adiw	r28, 0x15	; 21
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <main>:




int main()
{
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	c0 58       	subi	r28, 0x80	; 128
    324e:	d0 40       	sbci	r29, 0x00	; 0
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    325a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <DIO_ES_tInit>
	Lcd_ES_tInit();
    325e:	0e 94 90 12 	call	0x2520	; 0x2520 <Lcd_ES_tInit>
	UART_Init();
    3262:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_Init>


	Lcd_ES_tsendString("UART");
    3266:	80 e6       	ldi	r24, 0x60	; 96
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	0e 94 98 14 	call	0x2930	; 0x2930 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 0);
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <LCD_ES_tGoTo>
	Lcd_ES_tsendString("Testing !");
    3276:	85 e6       	ldi	r24, 0x65	; 101
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	0e 94 98 14 	call	0x2930	; 0x2930 <Lcd_ES_tsendString>
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	aa ef       	ldi	r26, 0xFA	; 250
    3284:	b3 e4       	ldi	r27, 0x43	; 67
    3286:	89 8f       	std	Y+25, r24	; 0x19
    3288:	9a 8f       	std	Y+26, r25	; 0x1a
    328a:	ab 8f       	std	Y+27, r26	; 0x1b
    328c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328e:	69 8d       	ldd	r22, Y+25	; 0x19
    3290:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4a e7       	ldi	r20, 0x7A	; 122
    329c:	55 e4       	ldi	r21, 0x45	; 69
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	8d 8b       	std	Y+21, r24	; 0x15
    32a8:	9e 8b       	std	Y+22, r25	; 0x16
    32aa:	af 8b       	std	Y+23, r26	; 0x17
    32ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32ae:	6d 89       	ldd	r22, Y+21	; 0x15
    32b0:	7e 89       	ldd	r23, Y+22	; 0x16
    32b2:	8f 89       	ldd	r24, Y+23	; 0x17
    32b4:	98 8d       	ldd	r25, Y+24	; 0x18
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e8       	ldi	r20, 0x80	; 128
    32bc:	5f e3       	ldi	r21, 0x3F	; 63
    32be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c2:	88 23       	and	r24, r24
    32c4:	2c f4       	brge	.+10     	; 0x32d0 <main+0x8c>
		__ticks = 1;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9c 8b       	std	Y+20, r25	; 0x14
    32cc:	8b 8b       	std	Y+19, r24	; 0x13
    32ce:	3f c0       	rjmp	.+126    	; 0x334e <main+0x10a>
	else if (__tmp > 65535)
    32d0:	6d 89       	ldd	r22, Y+21	; 0x15
    32d2:	7e 89       	ldd	r23, Y+22	; 0x16
    32d4:	8f 89       	ldd	r24, Y+23	; 0x17
    32d6:	98 8d       	ldd	r25, Y+24	; 0x18
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	4c f5       	brge	.+82     	; 0x333a <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e2       	ldi	r20, 0x20	; 32
    32f6:	51 e4       	ldi	r21, 0x41	; 65
    32f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9c 8b       	std	Y+20, r25	; 0x14
    330e:	8b 8b       	std	Y+19, r24	; 0x13
    3310:	0f c0       	rjmp	.+30     	; 0x3330 <main+0xec>
    3312:	80 e9       	ldi	r24, 0x90	; 144
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	9a 8b       	std	Y+18, r25	; 0x12
    3318:	89 8b       	std	Y+17, r24	; 0x11
    331a:	89 89       	ldd	r24, Y+17	; 0x11
    331c:	9a 89       	ldd	r25, Y+18	; 0x12
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <main+0xda>
    3322:	9a 8b       	std	Y+18, r25	; 0x12
    3324:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3326:	8b 89       	ldd	r24, Y+19	; 0x13
    3328:	9c 89       	ldd	r25, Y+20	; 0x14
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	9c 8b       	std	Y+20, r25	; 0x14
    332e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3330:	8b 89       	ldd	r24, Y+19	; 0x13
    3332:	9c 89       	ldd	r25, Y+20	; 0x14
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	69 f7       	brne	.-38     	; 0x3312 <main+0xce>
    3338:	14 c0       	rjmp	.+40     	; 0x3362 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333a:	6d 89       	ldd	r22, Y+21	; 0x15
    333c:	7e 89       	ldd	r23, Y+22	; 0x16
    333e:	8f 89       	ldd	r24, Y+23	; 0x17
    3340:	98 8d       	ldd	r25, Y+24	; 0x18
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9c 8b       	std	Y+20, r25	; 0x14
    334c:	8b 8b       	std	Y+19, r24	; 0x13
    334e:	8b 89       	ldd	r24, Y+19	; 0x13
    3350:	9c 89       	ldd	r25, Y+20	; 0x14
    3352:	98 8b       	std	Y+16, r25	; 0x10
    3354:	8f 87       	std	Y+15, r24	; 0x0f
    3356:	8f 85       	ldd	r24, Y+15	; 0x0f
    3358:	98 89       	ldd	r25, Y+16	; 0x10
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <main+0x116>
    335e:	98 8b       	std	Y+16, r25	; 0x10
    3360:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	lcd_ES_tclear();
    3362:	0e 94 a7 12 	call	0x254e	; 0x254e <lcd_ES_tclear>

	UART_Send_String("Abdalla");
    3366:	8f e6       	ldi	r24, 0x6F	; 111
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 bb 06 	call	0xd76	; 0xd76 <UART_Send_String>
	char received_string[100];

	while (1)
	{

		strcpy(received_string,UART_Receive_String());
    336e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <UART_Receive_String>
    3372:	9c 01       	movw	r18, r24
    3374:	ce 01       	movw	r24, r28
    3376:	4d 96       	adiw	r24, 0x1d	; 29
    3378:	b9 01       	movw	r22, r18
    337a:	0e 94 81 1a 	call	0x3502	; 0x3502 <strcpy>

		Lcd_ES_tsendString(received_string);
    337e:	ce 01       	movw	r24, r28
    3380:	4d 96       	adiw	r24, 0x1d	; 29
    3382:	0e 94 98 14 	call	0x2930	; 0x2930 <Lcd_ES_tsendString>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	aa ef       	ldi	r26, 0xFA	; 250
    338c:	b3 e4       	ldi	r27, 0x43	; 67
    338e:	8b 87       	std	Y+11, r24	; 0x0b
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	ad 87       	std	Y+13, r26	; 0x0d
    3394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	55 e4       	ldi	r21, 0x45	; 69
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <main+0x194>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <main+0x212>
	else if (__tmp > 65535)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <main+0x1f4>
    341a:	80 e9       	ldi	r24, 0x90	; 144
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0x1e2>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <main+0x1d6>
    3440:	96 cf       	rjmp	.-212    	; 0x336e <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <main+0x21e>
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	81 cf       	rjmp	.-254    	; 0x336e <main+0x12a>

0000346c <__udivmodhi4>:
    346c:	aa 1b       	sub	r26, r26
    346e:	bb 1b       	sub	r27, r27
    3470:	51 e1       	ldi	r21, 0x11	; 17
    3472:	07 c0       	rjmp	.+14     	; 0x3482 <__udivmodhi4_ep>

00003474 <__udivmodhi4_loop>:
    3474:	aa 1f       	adc	r26, r26
    3476:	bb 1f       	adc	r27, r27
    3478:	a6 17       	cp	r26, r22
    347a:	b7 07       	cpc	r27, r23
    347c:	10 f0       	brcs	.+4      	; 0x3482 <__udivmodhi4_ep>
    347e:	a6 1b       	sub	r26, r22
    3480:	b7 0b       	sbc	r27, r23

00003482 <__udivmodhi4_ep>:
    3482:	88 1f       	adc	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	5a 95       	dec	r21
    3488:	a9 f7       	brne	.-22     	; 0x3474 <__udivmodhi4_loop>
    348a:	80 95       	com	r24
    348c:	90 95       	com	r25
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	08 95       	ret

00003494 <__prologue_saves__>:
    3494:	2f 92       	push	r2
    3496:	3f 92       	push	r3
    3498:	4f 92       	push	r4
    349a:	5f 92       	push	r5
    349c:	6f 92       	push	r6
    349e:	7f 92       	push	r7
    34a0:	8f 92       	push	r8
    34a2:	9f 92       	push	r9
    34a4:	af 92       	push	r10
    34a6:	bf 92       	push	r11
    34a8:	cf 92       	push	r12
    34aa:	df 92       	push	r13
    34ac:	ef 92       	push	r14
    34ae:	ff 92       	push	r15
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	ca 1b       	sub	r28, r26
    34be:	db 0b       	sbc	r29, r27
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	09 94       	ijmp

000034cc <__epilogue_restores__>:
    34cc:	2a 88       	ldd	r2, Y+18	; 0x12
    34ce:	39 88       	ldd	r3, Y+17	; 0x11
    34d0:	48 88       	ldd	r4, Y+16	; 0x10
    34d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    34d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    34d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    34d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    34da:	9b 84       	ldd	r9, Y+11	; 0x0b
    34dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    34de:	b9 84       	ldd	r11, Y+9	; 0x09
    34e0:	c8 84       	ldd	r12, Y+8	; 0x08
    34e2:	df 80       	ldd	r13, Y+7	; 0x07
    34e4:	ee 80       	ldd	r14, Y+6	; 0x06
    34e6:	fd 80       	ldd	r15, Y+5	; 0x05
    34e8:	0c 81       	ldd	r16, Y+4	; 0x04
    34ea:	1b 81       	ldd	r17, Y+3	; 0x03
    34ec:	aa 81       	ldd	r26, Y+2	; 0x02
    34ee:	b9 81       	ldd	r27, Y+1	; 0x01
    34f0:	ce 0f       	add	r28, r30
    34f2:	d1 1d       	adc	r29, r1
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
    34fe:	ed 01       	movw	r28, r26
    3500:	08 95       	ret

00003502 <strcpy>:
    3502:	fb 01       	movw	r30, r22
    3504:	dc 01       	movw	r26, r24
    3506:	01 90       	ld	r0, Z+
    3508:	0d 92       	st	X+, r0
    350a:	00 20       	and	r0, r0
    350c:	e1 f7       	brne	.-8      	; 0x3506 <strcpy+0x4>
    350e:	08 95       	ret

00003510 <_exit>:
    3510:	f8 94       	cli

00003512 <__stop_program>:
    3512:	ff cf       	rjmp	.-2      	; 0x3512 <__stop_program>
