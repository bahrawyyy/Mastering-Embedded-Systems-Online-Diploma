
LDR_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  000033d0  00003464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001fc  008001fc  00003600  2**0
                  ALLOC
  3 .stab         00002d84  00000000  00000000  00003600  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000198e  00000000  00000000  00006384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a4af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b835  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__vector_1>
       8:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__vector_2>
       c:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 18 	call	0x3130	; 0x3130 <main>
      8a:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 19 	jmp	0x335e	; 0x335e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 19 	jmp	0x335e	; 0x335e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 58       	subi	r30, 0x8C	; 140
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <EXI_Set_CallBack+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <EXI_Set_CallBack+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	7b 83       	std	Y+3, r23	; 0x03
     e40:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3d 83       	std	Y+5, r19	; 0x05
     e4a:	2c 83       	std	Y+4, r18	; 0x04
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	81 f0       	breq	.+32     	; 0xe76 <EXI_Set_CallBack+0x48>
     e56:	2c 81       	ldd	r18, Y+4	; 0x04
     e58:	3d 81       	ldd	r19, Y+5	; 0x05
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	91 f0       	breq	.+36     	; 0xe84 <EXI_Set_CallBack+0x56>
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	a1 f4       	brne	.+40     	; 0xe90 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	9b 81       	ldd	r25, Y+3	; 0x03
     e6c:	90 93 fd 01 	sts	0x01FD, r25
     e70:	80 93 fc 01 	sts	0x01FC, r24
     e74:	0d c0       	rjmp	.+26     	; 0xe90 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	9b 81       	ldd	r25, Y+3	; 0x03
     e7a:	90 93 ff 01 	sts	0x01FF, r25
     e7e:	80 93 fe 01 	sts	0x01FE, r24
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	90 93 01 02 	sts	0x0201, r25
     e8c:	80 93 00 02 	sts	0x0200, r24
		break;
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <EXI_ENABLE+0x6>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3b 83       	std	Y+3, r19	; 0x03
     eb6:	2a 83       	std	Y+2, r18	; 0x02
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	89 f0       	breq	.+34     	; 0xee4 <EXI_ENABLE+0x44>
     ec2:	2a 81       	ldd	r18, Y+2	; 0x02
     ec4:	3b 81       	ldd	r19, Y+3	; 0x03
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	a1 f0       	breq	.+40     	; 0xef4 <EXI_ENABLE+0x54>
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	b9 f4       	brne	.+46     	; 0xf02 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
     ed4:	ab e5       	ldi	r26, 0x5B	; 91
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	eb e5       	ldi	r30, 0x5B	; 91
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 64       	ori	r24, 0x40	; 64
     ee0:	8c 93       	st	X, r24
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
     ee4:	ab e5       	ldi	r26, 0x5B	; 91
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e5       	ldi	r30, 0x5B	; 91
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	8c 93       	st	X, r24
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
     ef4:	ab e5       	ldi	r26, 0x5B	; 91
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e5       	ldi	r30, 0x5B	; 91
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	8c 93       	st	X, r24
		break;
	}
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <EXI_DISABLE+0x6>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3b 83       	std	Y+3, r19	; 0x03
     f24:	2a 83       	std	Y+2, r18	; 0x02
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	89 f0       	breq	.+34     	; 0xf52 <EXI_DISABLE+0x44>
     f30:	2a 81       	ldd	r18, Y+2	; 0x02
     f32:	3b 81       	ldd	r19, Y+3	; 0x03
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	a1 f0       	breq	.+40     	; 0xf62 <EXI_DISABLE+0x54>
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	b9 f4       	brne	.+46     	; 0xf70 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
     f42:	ab e5       	ldi	r26, 0x5B	; 91
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e5       	ldi	r30, 0x5B	; 91
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	8c 93       	st	X, r24
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
     f52:	ab e5       	ldi	r26, 0x5B	; 91
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e5       	ldi	r30, 0x5B	; 91
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 77       	andi	r24, 0x7F	; 127
     f5e:	8c 93       	st	X, r24
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
     f62:	ab e5       	ldi	r26, 0x5B	; 91
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb e5       	ldi	r30, 0x5B	; 91
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	8c 93       	st	X, r24
		break;
	}
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	2a 97       	sbiw	r28, 0x0a	; 10
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3a 87       	std	Y+10, r19	; 0x0a
     f9c:	29 87       	std	Y+9, r18	; 0x09
     f9e:	89 85       	ldd	r24, Y+9	; 0x09
     fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <EXI_TriggerEdge+0x2e>
     fa8:	66 c0       	rjmp	.+204    	; 0x1076 <EXI_TriggerEdge+0xfa>
     faa:	29 85       	ldd	r18, Y+9	; 0x09
     fac:	3a 85       	ldd	r19, Y+10	; 0x0a
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <EXI_TriggerEdge+0x3a>
     fb4:	bb c0       	rjmp	.+374    	; 0x112c <EXI_TriggerEdge+0x1b0>
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <EXI_TriggerEdge+0x44>
     fbe:	dd c0       	rjmp	.+442    	; 0x117a <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	38 87       	std	Y+8, r19	; 0x08
     fc8:	2f 83       	std	Y+7, r18	; 0x07
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	21 f1       	breq	.+72     	; 0x101c <EXI_TriggerEdge+0xa0>
     fd4:	2f 81       	ldd	r18, Y+7	; 0x07
     fd6:	38 85       	ldd	r19, Y+8	; 0x08
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <EXI_TriggerEdge+0x6c>
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	98 85       	ldd	r25, Y+8	; 0x08
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	61 f0       	breq	.+24     	; 0xffe <EXI_TriggerEdge+0x82>
     fe6:	c9 c0       	rjmp	.+402    	; 0x117a <EXI_TriggerEdge+0x1fe>
     fe8:	2f 81       	ldd	r18, Y+7	; 0x07
     fea:	38 85       	ldd	r19, Y+8	; 0x08
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	21 f1       	breq	.+72     	; 0x103a <EXI_TriggerEdge+0xbe>
     ff2:	8f 81       	ldd	r24, Y+7	; 0x07
     ff4:	98 85       	ldd	r25, Y+8	; 0x08
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	91 05       	cpc	r25, r1
     ffa:	71 f1       	breq	.+92     	; 0x1058 <EXI_TriggerEdge+0xdc>
     ffc:	be c0       	rjmp	.+380    	; 0x117a <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     ffe:	a5 e5       	ldi	r26, 0x55	; 85
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e5       	ldi	r30, 0x55	; 85
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    100c:	a5 e5       	ldi	r26, 0x55	; 85
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e5       	ldi	r30, 0x55	; 85
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8d 7f       	andi	r24, 0xFD	; 253
    1018:	8c 93       	st	X, r24
    101a:	af c0       	rjmp	.+350    	; 0x117a <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    101c:	a5 e5       	ldi	r26, 0x55	; 85
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e5 e5       	ldi	r30, 0x55	; 85
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    102a:	a5 e5       	ldi	r26, 0x55	; 85
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e5       	ldi	r30, 0x55	; 85
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8d 7f       	andi	r24, 0xFD	; 253
    1036:	8c 93       	st	X, r24
    1038:	a0 c0       	rjmp	.+320    	; 0x117a <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    103a:	a5 e5       	ldi	r26, 0x55	; 85
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1048:	a5 e5       	ldi	r26, 0x55	; 85
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e5       	ldi	r30, 0x55	; 85
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	8c 93       	st	X, r24
    1056:	91 c0       	rjmp	.+290    	; 0x117a <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1058:	a5 e5       	ldi	r26, 0x55	; 85
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e5       	ldi	r30, 0x55	; 85
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1066:	a5 e5       	ldi	r26, 0x55	; 85
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e5       	ldi	r30, 0x55	; 85
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	8c 93       	st	X, r24
    1074:	82 c0       	rjmp	.+260    	; 0x117a <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3e 83       	std	Y+6, r19	; 0x06
    107e:	2d 83       	std	Y+5, r18	; 0x05
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	21 f1       	breq	.+72     	; 0x10d2 <EXI_TriggerEdge+0x156>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	2c f4       	brge	.+10     	; 0x109e <EXI_TriggerEdge+0x122>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	61 f0       	breq	.+24     	; 0x10b4 <EXI_TriggerEdge+0x138>
    109c:	6e c0       	rjmp	.+220    	; 0x117a <EXI_TriggerEdge+0x1fe>
    109e:	2d 81       	ldd	r18, Y+5	; 0x05
    10a0:	3e 81       	ldd	r19, Y+6	; 0x06
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	21 f1       	breq	.+72     	; 0x10f0 <EXI_TriggerEdge+0x174>
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	71 f1       	breq	.+92     	; 0x110e <EXI_TriggerEdge+0x192>
    10b2:	63 c0       	rjmp	.+198    	; 0x117a <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    10b4:	a5 e5       	ldi	r26, 0x55	; 85
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e5 e5       	ldi	r30, 0x55	; 85
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8b 7f       	andi	r24, 0xFB	; 251
    10c0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    10c2:	a5 e5       	ldi	r26, 0x55	; 85
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e5 e5       	ldi	r30, 0x55	; 85
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	87 7f       	andi	r24, 0xF7	; 247
    10ce:	8c 93       	st	X, r24
    10d0:	54 c0       	rjmp	.+168    	; 0x117a <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    10d2:	a5 e5       	ldi	r26, 0x55	; 85
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e5       	ldi	r30, 0x55	; 85
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    10e0:	a5 e5       	ldi	r26, 0x55	; 85
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e5       	ldi	r30, 0x55	; 85
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	87 7f       	andi	r24, 0xF7	; 247
    10ec:	8c 93       	st	X, r24
    10ee:	45 c0       	rjmp	.+138    	; 0x117a <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    10f0:	a5 e5       	ldi	r26, 0x55	; 85
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e5       	ldi	r30, 0x55	; 85
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8b 7f       	andi	r24, 0xFB	; 251
    10fc:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    10fe:	a5 e5       	ldi	r26, 0x55	; 85
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e5       	ldi	r30, 0x55	; 85
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	8c 93       	st	X, r24
    110c:	36 c0       	rjmp	.+108    	; 0x117a <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    110e:	a5 e5       	ldi	r26, 0x55	; 85
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e5       	ldi	r30, 0x55	; 85
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	84 60       	ori	r24, 0x04	; 4
    111a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    111c:	a5 e5       	ldi	r26, 0x55	; 85
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e5       	ldi	r30, 0x55	; 85
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 60       	ori	r24, 0x08	; 8
    1128:	8c 93       	st	X, r24
    112a:	27 c0       	rjmp	.+78     	; 0x117a <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3c 83       	std	Y+4, r19	; 0x04
    1134:	2b 83       	std	Y+3, r18	; 0x03
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	91 05       	cpc	r25, r1
    113e:	31 f0       	breq	.+12     	; 0x114c <EXI_TriggerEdge+0x1d0>
    1140:	2b 81       	ldd	r18, Y+3	; 0x03
    1142:	3c 81       	ldd	r19, Y+4	; 0x04
    1144:	23 30       	cpi	r18, 0x03	; 3
    1146:	31 05       	cpc	r19, r1
    1148:	49 f0       	breq	.+18     	; 0x115c <EXI_TriggerEdge+0x1e0>
    114a:	10 c0       	rjmp	.+32     	; 0x116c <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    114c:	a4 e5       	ldi	r26, 0x54	; 84
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e4 e5       	ldi	r30, 0x54	; 84
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8f 7b       	andi	r24, 0xBF	; 191
    1158:	8c 93       	st	X, r24
    115a:	0f c0       	rjmp	.+30     	; 0x117a <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    115c:	a4 e5       	ldi	r26, 0x54	; 84
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 e5       	ldi	r30, 0x54	; 84
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	8c 93       	st	X, r24
    116a:	07 c0       	rjmp	.+14     	; 0x117a <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    116c:	a4 e5       	ldi	r26, 0x54	; 84
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e4 e5       	ldi	r30, 0x54	; 84
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8f 7b       	andi	r24, 0xBF	; 191
    1178:	8c 93       	st	X, r24
				}
				break;
	}
}
    117a:	2a 96       	adiw	r28, 0x0a	; 10
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    118c:	1f 92       	push	r1
    118e:	0f 92       	push	r0
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	0f 92       	push	r0
    1194:	11 24       	eor	r1, r1
    1196:	2f 93       	push	r18
    1198:	3f 93       	push	r19
    119a:	4f 93       	push	r20
    119c:	5f 93       	push	r21
    119e:	6f 93       	push	r22
    11a0:	7f 93       	push	r23
    11a2:	8f 93       	push	r24
    11a4:	9f 93       	push	r25
    11a6:	af 93       	push	r26
    11a8:	bf 93       	push	r27
    11aa:	ef 93       	push	r30
    11ac:	ff 93       	push	r31
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    11b6:	80 91 fc 01 	lds	r24, 0x01FC
    11ba:	90 91 fd 01 	lds	r25, 0x01FD
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	29 f0       	breq	.+10     	; 0x11cc <__vector_1+0x40>
		INT0_Fptr();
    11c2:	e0 91 fc 01 	lds	r30, 0x01FC
    11c6:	f0 91 fd 01 	lds	r31, 0x01FD
    11ca:	09 95       	icall
	}
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <__vector_2>:

ISR(INT1_vect){
    11f2:	1f 92       	push	r1
    11f4:	0f 92       	push	r0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    121c:	80 91 fe 01 	lds	r24, 0x01FE
    1220:	90 91 ff 01 	lds	r25, 0x01FF
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	29 f0       	breq	.+10     	; 0x1232 <__vector_2+0x40>
		INT1_Fptr();
    1228:	e0 91 fe 01 	lds	r30, 0x01FE
    122c:	f0 91 ff 01 	lds	r31, 0x01FF
    1230:	09 95       	icall
	}
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <__vector_3>:

ISR(INT2_vect){
    1258:	1f 92       	push	r1
    125a:	0f 92       	push	r0
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1282:	80 91 00 02 	lds	r24, 0x0200
    1286:	90 91 01 02 	lds	r25, 0x0201
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	29 f0       	breq	.+10     	; 0x1298 <__vector_3+0x40>
		INT2_Fptr();
    128e:	e0 91 00 02 	lds	r30, 0x0200
    1292:	f0 91 01 02 	lds	r31, 0x0201
    1296:	09 95       	icall
	}
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <DIO_ES_tSetPinDirection+0x6>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <DIO_ES_tSetPinDirection+0x8>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	6a 83       	std	Y+2, r22	; 0x02
    12ce:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	88 30       	cpi	r24, 0x08	; 8
    12d4:	18 f0       	brcs	.+6      	; 0x12dc <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	8c 83       	std	Y+4, r24	; 0x04
    12da:	d8 c0       	rjmp	.+432    	; 0x148c <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	88 23       	and	r24, r24
    12e0:	91 f5       	brne	.+100    	; 0x1346 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    12e8:	aa e3       	ldi	r26, 0x3A	; 58
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e3       	ldi	r30, 0x3A	; 58
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_ES_tSetPinDirection+0x48>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_ES_tSetPinDirection+0x44>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	bd c0       	rjmp	.+378    	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 23       	and	r24, r24
    1314:	a9 f4       	brne	.+42     	; 0x1340 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1316:	aa e3       	ldi	r26, 0x3A	; 58
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ea e3       	ldi	r30, 0x3A	; 58
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_ES_tSetPinDirection+0x76>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_ES_tSetPinDirection+0x72>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	a5 c0       	rjmp	.+330    	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8c 83       	std	Y+4, r24	; 0x04
    1344:	a3 c0       	rjmp	.+326    	; 0x148c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 f5       	brne	.+100    	; 0x13b0 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1352:	a7 e3       	ldi	r26, 0x37	; 55
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e7 e3       	ldi	r30, 0x37	; 55
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_ES_tSetPinDirection+0xb2>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_ES_tSetPinDirection+0xae>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	88 c0       	rjmp	.+272    	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 23       	and	r24, r24
    137e:	a9 f4       	brne	.+42     	; 0x13aa <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1380:	a7 e3       	ldi	r26, 0x37	; 55
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e7 e3       	ldi	r30, 0x37	; 55
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_ES_tSetPinDirection+0xe0>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_ES_tSetPinDirection+0xdc>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	70 c0       	rjmp	.+224    	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	8c 83       	std	Y+4, r24	; 0x04
    13ae:	6e c0       	rjmp	.+220    	; 0x148c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	91 f5       	brne	.+100    	; 0x141a <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	a1 f4       	brne	.+40     	; 0x13e4 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    13bc:	a4 e3       	ldi	r26, 0x34	; 52
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 e3       	ldi	r30, 0x34	; 52
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_ES_tSetPinDirection+0x11c>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_ES_tSetPinDirection+0x118>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	53 c0       	rjmp	.+166    	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 23       	and	r24, r24
    13e8:	a9 f4       	brne	.+42     	; 0x1414 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    13ea:	a4 e3       	ldi	r26, 0x34	; 52
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_ES_tSetPinDirection+0x14a>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_ES_tSetPinDirection+0x146>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	3b c0       	rjmp	.+118    	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	8c 83       	std	Y+4, r24	; 0x04
    1418:	39 c0       	rjmp	.+114    	; 0x148c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 f5       	brne	.+100    	; 0x1484 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1426:	a1 e3       	ldi	r26, 0x31	; 49
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e1 e3       	ldi	r30, 0x31	; 49
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_ES_tSetPinDirection+0x186>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_ES_tSetPinDirection+0x182>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	1e c0       	rjmp	.+60     	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 23       	and	r24, r24
    1452:	a9 f4       	brne	.+42     	; 0x147e <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1454:	a1 e3       	ldi	r26, 0x31	; 49
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e1 e3       	ldi	r30, 0x31	; 49
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_ES_tSetPinDirection+0x1b4>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_ES_tSetPinDirection+0x1b0>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	06 c0       	rjmp	.+12     	; 0x148a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	8c 83       	std	Y+4, r24	; 0x04
    1482:	04 c0       	rjmp	.+8      	; 0x148c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	8c 83       	std	Y+4, r24	; 0x04
    1488:	01 c0       	rjmp	.+2      	; 0x148c <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    148a:	1c 82       	std	Y+4, r1	; 0x04
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_ES_tSetPinValue+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_ES_tSetPinValue+0x8>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	6a 83       	std	Y+2, r22	; 0x02
    14ac:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	88 30       	cpi	r24, 0x08	; 8
    14b2:	18 f0       	brcs	.+6      	; 0x14ba <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	8c 83       	std	Y+4, r24	; 0x04
    14b8:	d8 c0       	rjmp	.+432    	; 0x166a <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	88 23       	and	r24, r24
    14be:	91 f5       	brne	.+100    	; 0x1524 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	a1 f4       	brne	.+40     	; 0x14ee <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    14c6:	ab e3       	ldi	r26, 0x3B	; 59
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e3       	ldi	r30, 0x3B	; 59
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_ES_tSetPinValue+0x48>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_ES_tSetPinValue+0x44>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	bd c0       	rjmp	.+378    	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 23       	and	r24, r24
    14f2:	a9 f4       	brne	.+42     	; 0x151e <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    14f4:	ab e3       	ldi	r26, 0x3B	; 59
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	eb e3       	ldi	r30, 0x3B	; 59
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_ES_tSetPinValue+0x76>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_ES_tSetPinValue+0x72>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	a5 c0       	rjmp	.+330    	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	8c 83       	std	Y+4, r24	; 0x04
    1522:	a3 c0       	rjmp	.+326    	; 0x166a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	91 f5       	brne	.+100    	; 0x158e <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	a1 f4       	brne	.+40     	; 0x1558 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1530:	a8 e3       	ldi	r26, 0x38	; 56
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_ES_tSetPinValue+0xb2>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_ES_tSetPinValue+0xae>
    1552:	84 2b       	or	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	88 c0       	rjmp	.+272    	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 23       	and	r24, r24
    155c:	a9 f4       	brne	.+42     	; 0x1588 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_ES_tSetPinValue+0xe0>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_ES_tSetPinValue+0xdc>
    1580:	80 95       	com	r24
    1582:	84 23       	and	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	70 c0       	rjmp	.+224    	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	8c 83       	std	Y+4, r24	; 0x04
    158c:	6e c0       	rjmp	.+220    	; 0x166a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	91 f5       	brne	.+100    	; 0x15f8 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    159a:	a5 e3       	ldi	r26, 0x35	; 53
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e5 e3       	ldi	r30, 0x35	; 53
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_ES_tSetPinValue+0x11c>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_ES_tSetPinValue+0x118>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	53 c0       	rjmp	.+166    	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	88 23       	and	r24, r24
    15c6:	a9 f4       	brne	.+42     	; 0x15f2 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    15c8:	a5 e3       	ldi	r26, 0x35	; 53
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_ES_tSetPinValue+0x14a>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_ES_tSetPinValue+0x146>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	3b c0       	rjmp	.+118    	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	8c 83       	std	Y+4, r24	; 0x04
    15f6:	39 c0       	rjmp	.+114    	; 0x166a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 f5       	brne	.+100    	; 0x1662 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1604:	a2 e3       	ldi	r26, 0x32	; 50
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e2 e3       	ldi	r30, 0x32	; 50
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_ES_tSetPinValue+0x186>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_ES_tSetPinValue+0x182>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	1e c0       	rjmp	.+60     	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 23       	and	r24, r24
    1630:	a9 f4       	brne	.+42     	; 0x165c <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1632:	a2 e3       	ldi	r26, 0x32	; 50
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e2 e3       	ldi	r30, 0x32	; 50
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_ES_tSetPinValue+0x1b4>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_ES_tSetPinValue+0x1b0>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	8c 83       	std	Y+4, r24	; 0x04
    1660:	04 c0       	rjmp	.+8      	; 0x166a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8c 83       	std	Y+4, r24	; 0x04
    1666:	01 c0       	rjmp	.+2      	; 0x166a <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1668:	1c 82       	std	Y+4, r1	; 0x04
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <DIO_ES_tGetPinValue+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <DIO_ES_tGetPinValue+0x8>
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	5c 83       	std	Y+4, r21	; 0x04
    168e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	88 30       	cpi	r24, 0x08	; 8
    1694:	18 f0       	brcs	.+6      	; 0x169c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	4d 83       	std	Y+5, r20	; 0x05
    169a:	60 c0       	rjmp	.+192    	; 0x175c <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	88 23       	and	r24, r24
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    16a2:	e9 e3       	ldi	r30, 0x39	; 57
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a9 01       	movw	r20, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_ES_tGetPinValue+0x40>
    16b6:	55 95       	asr	r21
    16b8:	47 95       	ror	r20
    16ba:	8a 95       	dec	r24
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_ES_tGetPinValue+0x3c>
    16be:	ca 01       	movw	r24, r20
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	eb 81       	ldd	r30, Y+3	; 0x03
    16c4:	fc 81       	ldd	r31, Y+4	; 0x04
    16c6:	80 83       	st	Z, r24
    16c8:	48 c0       	rjmp	.+144    	; 0x175a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	a1 f4       	brne	.+40     	; 0x16f8 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    16d0:	e6 e3       	ldi	r30, 0x36	; 54
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_ES_tGetPinValue+0x6e>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_ES_tGetPinValue+0x6a>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	eb 81       	ldd	r30, Y+3	; 0x03
    16f2:	fc 81       	ldd	r31, Y+4	; 0x04
    16f4:	80 83       	st	Z, r24
    16f6:	31 c0       	rjmp	.+98     	; 0x175a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    16fe:	e3 e3       	ldi	r30, 0x33	; 51
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a9 01       	movw	r20, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_ES_tGetPinValue+0x9c>
    1712:	55 95       	asr	r21
    1714:	47 95       	ror	r20
    1716:	8a 95       	dec	r24
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_ES_tGetPinValue+0x98>
    171a:	ca 01       	movw	r24, r20
    171c:	81 70       	andi	r24, 0x01	; 1
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	80 83       	st	Z, r24
    1724:	1a c0       	rjmp	.+52     	; 0x175a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	a1 f4       	brne	.+40     	; 0x1754 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    172c:	e0 e3       	ldi	r30, 0x30	; 48
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_ES_tGetPinValue+0xca>
    1740:	55 95       	asr	r21
    1742:	47 95       	ror	r20
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_ES_tGetPinValue+0xc6>
    1748:	ca 01       	movw	r24, r20
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	eb 81       	ldd	r30, Y+3	; 0x03
    174e:	fc 81       	ldd	r31, Y+4	; 0x04
    1750:	80 83       	st	Z, r24
    1752:	03 c0       	rjmp	.+6      	; 0x175a <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1754:	51 e0       	ldi	r21, 0x01	; 1
    1756:	5d 83       	std	Y+5, r21	; 0x05
    1758:	01 c0       	rjmp	.+2      	; 0x175c <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    175a:	1d 82       	std	Y+5, r1	; 0x05
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_ES_tSetPortDirection+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_ES_tSetPortDirection+0x8>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	31 f0       	breq	.+12     	; 0x1792 <DIO_ES_tSetPortDirection+0x24>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	19 f0       	breq	.+6      	; 0x1792 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    178c:	21 e0       	ldi	r18, 0x01	; 1
    178e:	2d 83       	std	Y+5, r18	; 0x05
    1790:	53 c0       	rjmp	.+166    	; 0x1838 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3c 83       	std	Y+4, r19	; 0x04
    179a:	2b 83       	std	Y+3, r18	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f1       	breq	.+66     	; 0x17e8 <DIO_ES_tSetPortDirection+0x7a>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	2c f4       	brge	.+10     	; 0x17ba <DIO_ES_tSetPortDirection+0x4c>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 f0       	breq	.+24     	; 0x17d0 <DIO_ES_tSetPortDirection+0x62>
    17b8:	3b c0       	rjmp	.+118    	; 0x1830 <DIO_ES_tSetPortDirection+0xc2>
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	f1 f0       	breq	.+60     	; 0x1800 <DIO_ES_tSetPortDirection+0x92>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	91 05       	cpc	r25, r1
    17cc:	29 f1       	breq	.+74     	; 0x1818 <DIO_ES_tSetPortDirection+0xaa>
    17ce:	30 c0       	rjmp	.+96     	; 0x1830 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	29 f4       	brne	.+10     	; 0x17e0 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	80 83       	st	Z, r24
    17de:	2b c0       	rjmp	.+86     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    17e0:	ea e3       	ldi	r30, 0x3A	; 58
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	10 82       	st	Z, r1
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    17ee:	e7 e3       	ldi	r30, 0x37	; 55
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	80 83       	st	Z, r24
    17f6:	1f c0       	rjmp	.+62     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    17f8:	e7 e3       	ldi	r30, 0x37	; 55
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	10 82       	st	Z, r1
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	29 f4       	brne	.+10     	; 0x1810 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    1806:	e4 e3       	ldi	r30, 0x34	; 52
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	80 83       	st	Z, r24
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    1810:	e4 e3       	ldi	r30, 0x34	; 52
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	10 82       	st	Z, r1
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	29 f4       	brne	.+10     	; 0x1828 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    181e:	e1 e3       	ldi	r30, 0x31	; 49
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	80 83       	st	Z, r24
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1828:	e1 e3       	ldi	r30, 0x31	; 49
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	10 82       	st	Z, r1
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	9d 83       	std	Y+5, r25	; 0x05
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1836:	1d 82       	std	Y+5, r1	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <DIO_ES_tSetPortValue+0x6>
    1850:	00 d0       	rcall	.+0      	; 0x1852 <DIO_ES_tSetPortValue+0x8>
    1852:	0f 92       	push	r0
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	31 f0       	breq	.+12     	; 0x186e <DIO_ES_tSetPortValue+0x24>
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	88 23       	and	r24, r24
    1866:	19 f0       	breq	.+6      	; 0x186e <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	2d 83       	std	Y+5, r18	; 0x05
    186c:	53 c0       	rjmp	.+166    	; 0x1914 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3c 83       	std	Y+4, r19	; 0x04
    1876:	2b 83       	std	Y+3, r18	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	09 f1       	breq	.+66     	; 0x18c4 <DIO_ES_tSetPortValue+0x7a>
    1882:	2b 81       	ldd	r18, Y+3	; 0x03
    1884:	3c 81       	ldd	r19, Y+4	; 0x04
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	2c f4       	brge	.+10     	; 0x1896 <DIO_ES_tSetPortValue+0x4c>
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	61 f0       	breq	.+24     	; 0x18ac <DIO_ES_tSetPortValue+0x62>
    1894:	3b c0       	rjmp	.+118    	; 0x190c <DIO_ES_tSetPortValue+0xc2>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	f1 f0       	breq	.+60     	; 0x18dc <DIO_ES_tSetPortValue+0x92>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	29 f1       	breq	.+74     	; 0x18f4 <DIO_ES_tSetPortValue+0xaa>
    18aa:	30 c0       	rjmp	.+96     	; 0x190c <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	29 f4       	brne	.+10     	; 0x18bc <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    18b2:	eb e3       	ldi	r30, 0x3B	; 59
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	80 83       	st	Z, r24
    18ba:	2b c0       	rjmp	.+86     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    18bc:	eb e3       	ldi	r30, 0x3B	; 59
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	10 82       	st	Z, r1
    18c2:	27 c0       	rjmp	.+78     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    18ca:	e8 e3       	ldi	r30, 0x38	; 56
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	80 83       	st	Z, r24
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	10 82       	st	Z, r1
    18da:	1b c0       	rjmp	.+54     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	29 f4       	brne	.+10     	; 0x18ec <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    18e2:	e5 e3       	ldi	r30, 0x35	; 53
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	80 83       	st	Z, r24
    18ea:	13 c0       	rjmp	.+38     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	10 82       	st	Z, r1
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	29 f4       	brne	.+10     	; 0x1904 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	80 83       	st	Z, r24
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	10 82       	st	Z, r1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	9d 83       	std	Y+5, r25	; 0x05
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1912:	1d 82       	std	Y+5, r1	; 0x05
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_ES_tTOGPin+0x6>
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	88 30       	cpi	r24, 0x08	; 8
    193a:	18 f0       	brcs	.+6      	; 0x1942 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	8b 83       	std	Y+3, r24	; 0x03
    1940:	60 c0       	rjmp	.+192    	; 0x1a02 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	88 23       	and	r24, r24
    1946:	a1 f4       	brne	.+40     	; 0x1970 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    1948:	ab e3       	ldi	r26, 0x3B	; 59
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	eb e3       	ldi	r30, 0x3B	; 59
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_ES_tTOGPin+0x40>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_ES_tTOGPin+0x3c>
    196a:	84 27       	eor	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	48 c0       	rjmp	.+144    	; 0x1a00 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	a1 f4       	brne	.+40     	; 0x199e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    1976:	a8 e3       	ldi	r26, 0x38	; 56
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_ES_tTOGPin+0x6e>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_ES_tTOGPin+0x6a>
    1998:	84 27       	eor	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	31 c0       	rjmp	.+98     	; 0x1a00 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    19a4:	a5 e3       	ldi	r26, 0x35	; 53
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e5 e3       	ldi	r30, 0x35	; 53
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_ES_tTOGPin+0x9c>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <DIO_ES_tTOGPin+0x98>
    19c6:	84 27       	eor	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	1a c0       	rjmp	.+52     	; 0x1a00 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	a1 f4       	brne	.+40     	; 0x19fa <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    19d2:	a2 e3       	ldi	r26, 0x32	; 50
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e2 e3       	ldi	r30, 0x32	; 50
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_ES_tTOGPin+0xca>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_ES_tTOGPin+0xc6>
    19f4:	84 27       	eor	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1a00:	1b 82       	std	Y+3, r1	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <DIO_ES_tInit+0x6>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    1a1a:	1a 82       	std	Y+2, r1	; 0x02
    1a1c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    1a1e:	1a 82       	std	Y+2, r1	; 0x02
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	a3 c2       	rjmp	.+1350   	; 0x1f6a <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	fc 01       	movw	r30, r24
    1a32:	ec 58       	subi	r30, 0x8C	; 140
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <DIO_ES_tInit+0x2e>
    1a3c:	9b c0       	rjmp	.+310    	; 0x1b74 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	ec 58       	subi	r30, 0x8C	; 140
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	80 81       	ld	r24, Z
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	e9 f4       	brne	.+58     	; 0x1a92 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1a58:	aa e3       	ldi	r26, 0x3A	; 58
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ea e3       	ldi	r30, 0x3A	; 58
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	fc 01       	movw	r30, r24
    1a72:	eb 58       	subi	r30, 0x8B	; 139
    1a74:	fe 4f       	sbci	r31, 0xFE	; 254
    1a76:	80 81       	ld	r24, Z
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_ES_tInit+0x78>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_ES_tInit+0x74>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	67 c2       	rjmp	.+1230   	; 0x1f60 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1a92:	aa e3       	ldi	r26, 0x3A	; 58
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ea e3       	ldi	r30, 0x3A	; 58
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	fc 01       	movw	r30, r24
    1aac:	eb 58       	subi	r30, 0x8B	; 139
    1aae:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab0:	80 81       	ld	r24, Z
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_ES_tInit+0xb2>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_ES_tInit+0xae>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e9 58       	subi	r30, 0x89	; 137
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	80 81       	ld	r24, Z
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	e9 f4       	brne	.+58     	; 0x1b1e <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1ae4:	ab e3       	ldi	r26, 0x3B	; 59
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	eb e3       	ldi	r30, 0x3B	; 59
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	fc 01       	movw	r30, r24
    1afe:	eb 58       	subi	r30, 0x8B	; 139
    1b00:	fe 4f       	sbci	r31, 0xFE	; 254
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_ES_tInit+0x104>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <DIO_ES_tInit+0x100>
    1b18:	84 2b       	or	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	21 c2       	rjmp	.+1090   	; 0x1f60 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e9 58       	subi	r30, 0x89	; 137
    1b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <DIO_ES_tInit+0x128>
    1b36:	14 c2       	rjmp	.+1064   	; 0x1f60 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1b38:	ab e3       	ldi	r26, 0x3B	; 59
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	eb e3       	ldi	r30, 0x3B	; 59
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	fc 01       	movw	r30, r24
    1b52:	eb 58       	subi	r30, 0x8B	; 139
    1b54:	fe 4f       	sbci	r31, 0xFE	; 254
    1b56:	80 81       	ld	r24, Z
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_ES_tInit+0x158>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_ES_tInit+0x154>
    1b6c:	80 95       	com	r24
    1b6e:	84 23       	and	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	f6 c1       	rjmp	.+1004   	; 0x1f60 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	ec 58       	subi	r30, 0x8C	; 140
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	80 81       	ld	r24, Z
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <DIO_ES_tInit+0x17e>
    1b8c:	9b c0       	rjmp	.+310    	; 0x1cc4 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	ec 58       	subi	r30, 0x8C	; 140
    1ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba2:	80 81       	ld	r24, Z
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	e9 f4       	brne	.+58     	; 0x1be2 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1ba8:	a7 e3       	ldi	r26, 0x37	; 55
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e3       	ldi	r30, 0x37	; 55
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	eb 58       	subi	r30, 0x8B	; 139
    1bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc6:	80 81       	ld	r24, Z
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <DIO_ES_tInit+0x1c8>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <DIO_ES_tInit+0x1c4>
    1bdc:	84 2b       	or	r24, r20
    1bde:	8c 93       	st	X, r24
    1be0:	bf c1       	rjmp	.+894    	; 0x1f60 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1be2:	a7 e3       	ldi	r26, 0x37	; 55
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 e3       	ldi	r30, 0x37	; 55
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	eb 58       	subi	r30, 0x8B	; 139
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	80 81       	ld	r24, Z
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <DIO_ES_tInit+0x202>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <DIO_ES_tInit+0x1fe>
    1c16:	80 95       	com	r24
    1c18:	84 23       	and	r24, r20
    1c1a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	fc 01       	movw	r30, r24
    1c2a:	e9 58       	subi	r30, 0x89	; 137
    1c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2e:	80 81       	ld	r24, Z
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	e9 f4       	brne	.+58     	; 0x1c6e <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1c34:	a8 e3       	ldi	r26, 0x38	; 56
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e8 e3       	ldi	r30, 0x38	; 56
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	eb 58       	subi	r30, 0x8B	; 139
    1c50:	fe 4f       	sbci	r31, 0xFE	; 254
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_ES_tInit+0x254>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <DIO_ES_tInit+0x250>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	79 c1       	rjmp	.+754    	; 0x1f60 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	e9 58       	subi	r30, 0x89	; 137
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <DIO_ES_tInit+0x278>
    1c86:	6c c1       	rjmp	.+728    	; 0x1f60 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1c88:	ab e3       	ldi	r26, 0x3B	; 59
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	eb e3       	ldi	r30, 0x3B	; 59
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	eb 58       	subi	r30, 0x8B	; 139
    1ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <DIO_ES_tInit+0x2a8>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <DIO_ES_tInit+0x2a4>
    1cbc:	80 95       	com	r24
    1cbe:	84 23       	and	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	4e c1       	rjmp	.+668    	; 0x1f60 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	ec 58       	subi	r30, 0x8C	; 140
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	80 81       	ld	r24, Z
    1cd8:	82 30       	cpi	r24, 0x02	; 2
    1cda:	09 f0       	breq	.+2      	; 0x1cde <DIO_ES_tInit+0x2ce>
    1cdc:	9b c0       	rjmp	.+310    	; 0x1e14 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	fc 01       	movw	r30, r24
    1cee:	ec 58       	subi	r30, 0x8C	; 140
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	80 81       	ld	r24, Z
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	e9 f4       	brne	.+58     	; 0x1d32 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1cf8:	a4 e3       	ldi	r26, 0x34	; 52
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e4 e3       	ldi	r30, 0x34	; 52
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	fc 01       	movw	r30, r24
    1d12:	eb 58       	subi	r30, 0x8B	; 139
    1d14:	fe 4f       	sbci	r31, 0xFE	; 254
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_ES_tInit+0x318>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_ES_tInit+0x314>
    1d2c:	84 2b       	or	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	17 c1       	rjmp	.+558    	; 0x1f60 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1d32:	a4 e3       	ldi	r26, 0x34	; 52
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e4 e3       	ldi	r30, 0x34	; 52
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	eb 58       	subi	r30, 0x8B	; 139
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_ES_tInit+0x352>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <DIO_ES_tInit+0x34e>
    1d66:	80 95       	com	r24
    1d68:	84 23       	and	r24, r20
    1d6a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e9 58       	subi	r30, 0x89	; 137
    1d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7e:	80 81       	ld	r24, Z
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	e9 f4       	brne	.+58     	; 0x1dbe <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1d84:	a5 e3       	ldi	r26, 0x35	; 53
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e5 e3       	ldi	r30, 0x35	; 53
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	eb 58       	subi	r30, 0x8B	; 139
    1da0:	fe 4f       	sbci	r31, 0xFE	; 254
    1da2:	80 81       	ld	r24, Z
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_ES_tInit+0x3a4>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_ES_tInit+0x3a0>
    1db8:	84 2b       	or	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	d1 c0       	rjmp	.+418    	; 0x1f60 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e9 58       	subi	r30, 0x89	; 137
    1dce:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 23       	and	r24, r24
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <DIO_ES_tInit+0x3c8>
    1dd6:	c4 c0       	rjmp	.+392    	; 0x1f60 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1dd8:	ab e3       	ldi	r26, 0x3B	; 59
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	eb e3       	ldi	r30, 0x3B	; 59
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	fc 01       	movw	r30, r24
    1df2:	eb 58       	subi	r30, 0x8B	; 139
    1df4:	fe 4f       	sbci	r31, 0xFE	; 254
    1df6:	80 81       	ld	r24, Z
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_ES_tInit+0x3f8>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_ES_tInit+0x3f4>
    1e0c:	80 95       	com	r24
    1e0e:	84 23       	and	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	a6 c0       	rjmp	.+332    	; 0x1f60 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	fc 01       	movw	r30, r24
    1e22:	ec 58       	subi	r30, 0x8C	; 140
    1e24:	fe 4f       	sbci	r31, 0xFE	; 254
    1e26:	80 81       	ld	r24, Z
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <DIO_ES_tInit+0x41e>
    1e2c:	99 c0       	rjmp	.+306    	; 0x1f60 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	ec 58       	subi	r30, 0x8C	; 140
    1e40:	fe 4f       	sbci	r31, 0xFE	; 254
    1e42:	80 81       	ld	r24, Z
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	e9 f4       	brne	.+58     	; 0x1e82 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1e48:	a1 e3       	ldi	r26, 0x31	; 49
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e1 e3       	ldi	r30, 0x31	; 49
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	fc 01       	movw	r30, r24
    1e62:	eb 58       	subi	r30, 0x8B	; 139
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	80 81       	ld	r24, Z
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_ES_tInit+0x468>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_ES_tInit+0x464>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	6f c0       	rjmp	.+222    	; 0x1f60 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1e82:	a1 e3       	ldi	r26, 0x31	; 49
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e1 e3       	ldi	r30, 0x31	; 49
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	eb 58       	subi	r30, 0x8B	; 139
    1e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea0:	80 81       	ld	r24, Z
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <DIO_ES_tInit+0x4a2>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <DIO_ES_tInit+0x49e>
    1eb6:	80 95       	com	r24
    1eb8:	84 23       	and	r24, r20
    1eba:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e9 58       	subi	r30, 0x89	; 137
    1ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	e9 f4       	brne	.+58     	; 0x1f0e <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	fc 01       	movw	r30, r24
    1eee:	eb 58       	subi	r30, 0x8B	; 139
    1ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_ES_tInit+0x4f4>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_ES_tInit+0x4f0>
    1f08:	84 2b       	or	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	29 c0       	rjmp	.+82     	; 0x1f60 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e9 58       	subi	r30, 0x89	; 137
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	80 81       	ld	r24, Z
    1f22:	88 23       	and	r24, r24
    1f24:	e9 f4       	brne	.+58     	; 0x1f60 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1f26:	ab e3       	ldi	r26, 0x3B	; 59
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	fc 01       	movw	r30, r24
    1f40:	eb 58       	subi	r30, 0x8B	; 139
    1f42:	fe 4f       	sbci	r31, 0xFE	; 254
    1f44:	80 81       	ld	r24, Z
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_ES_tInit+0x546>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_ES_tInit+0x542>
    1f5a:	80 95       	com	r24
    1f5c:	84 23       	and	r24, r20
    1f5e:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	88 31       	cpi	r24, 0x18	; 24
    1f70:	91 05       	cpc	r25, r1
    1f72:	0c f4       	brge	.+2      	; 0x1f76 <DIO_ES_tInit+0x566>
    1f74:	57 cd       	rjmp	.-1362   	; 0x1a24 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    1f76:	80 e0       	ldi	r24, 0x00	; 0
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <ADC_init>:
 * 4)SET the ADPS1,ADPS2 (from data sheet)
 * 5)Choose the reference voltage, we choose the internal voltage 2.65v
 * 6)SET REFS1,REFS0 in ADMUX
 */

void ADC_init(void){
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	//ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2);
	//ADMUX |= (1<<REFS1) | (1<<REFS0);
#if	ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADEN);  // Enable the ADC
    1f8a:	a6 e2       	ldi	r26, 0x26	; 38
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e6 e2       	ldi	r30, 0x26	; 38
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	80 68       	ori	r24, 0x80	; 128
    1f96:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_64
	SET_BIT(ADCSRA,ADPS1); // Choose the Prescalar
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_128
	SET_BIT(ADCSRA,ADPS0);
    1f98:	a6 e2       	ldi	r26, 0x26	; 38
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e6 e2       	ldi	r30, 0x26	; 38
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	81 60       	ori	r24, 0x01	; 1
    1fa4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    1fa6:	a6 e2       	ldi	r26, 0x26	; 38
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e6 e2       	ldi	r30, 0x26	; 38
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	82 60       	ori	r24, 0x02	; 2
    1fb2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    1fb4:	a6 e2       	ldi	r26, 0x26	; 38
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e6 e2       	ldi	r30, 0x26	; 38
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	84 60       	ori	r24, 0x04	; 4
    1fc0:	8c 93       	st	X, r24

#if ADC_SOURCE == ADC_SOURCE_VREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	SET_BIT(ADMUX,REFS0);
    1fc2:	a7 e2       	ldi	r26, 0x27	; 39
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e7 e2       	ldi	r30, 0x27	; 39
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 64       	ori	r24, 0x40	; 64
    1fce:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    1fd0:	a7 e2       	ldi	r26, 0x27	; 39
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e7 e2       	ldi	r30, 0x27	; 39
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 77       	andi	r24, 0x7F	; 127
    1fdc:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
#endif

#endif
}
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <ADC_read>:

 */



u16 ADC_read(u8 channel) {
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <ADC_read+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <ADC_read+0x8>
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
	// Select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
    1ff4:	a7 e2       	ldi	r26, 0x27	; 39
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e7 e2       	ldi	r30, 0x27	; 39
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	98 2f       	mov	r25, r24
    2000:	90 7f       	andi	r25, 0xF0	; 240
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	8f 70       	andi	r24, 0x0F	; 15
    2006:	89 2b       	or	r24, r25
    2008:	8c 93       	st	X, r24
	// Start single conversion
	ADCSRA |= (1 << ADSC);
    200a:	a6 e2       	ldi	r26, 0x26	; 38
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e6 e2       	ldi	r30, 0x26	; 38
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	80 64       	ori	r24, 0x40	; 64
    2016:	8c 93       	st	X, r24
	// Wait for conversion to complete
	while (!GET_BIT(ADCSRA,ADIF));
    2018:	e6 e2       	ldi	r30, 0x26	; 38
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	82 95       	swap	r24
    2020:	8f 70       	andi	r24, 0x0F	; 15
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	81 70       	andi	r24, 0x01	; 1
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	a9 f3       	breq	.-22     	; 0x2018 <ADC_read+0x34>
	CLR_BIT(ADCSRA,ADIF);
    202e:	a6 e2       	ldi	r26, 0x26	; 38
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e6 e2       	ldi	r30, 0x26	; 38
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8f 7e       	andi	r24, 0xEF	; 239
    203a:	8c 93       	st	X, r24

	u8 lowByte = ADCL;
    203c:	e4 e2       	ldi	r30, 0x24	; 36
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8c 83       	std	Y+4, r24	; 0x04
	u8 highByte = ADCH;
    2044:	e5 e2       	ldi	r30, 0x25	; 37
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8b 83       	std	Y+3, r24	; 0x03

	// Combine the two 8-bit registers to get the 10-bit ADC result
	u16 result = (highByte << 8) | lowByte;
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	38 2f       	mov	r19, r24
    2054:	22 27       	eor	r18, r18
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	82 2b       	or	r24, r18
    205e:	93 2b       	or	r25, r19
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01


	return result;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	e0 97       	sbiw	r28, 0x30	; 48
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	63 e0       	ldi	r22, 0x03	; 3
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e2       	ldi	r26, 0x20	; 32
    209c:	b1 e4       	ldi	r27, 0x41	; 65
    209e:	8d a7       	std	Y+45, r24	; 0x2d
    20a0:	9e a7       	std	Y+46, r25	; 0x2e
    20a2:	af a7       	std	Y+47, r26	; 0x2f
    20a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    20a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    20aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ac:	98 a9       	ldd	r25, Y+48	; 0x30
    20ae:	2b ea       	ldi	r18, 0xAB	; 171
    20b0:	3a ea       	ldi	r19, 0xAA	; 170
    20b2:	4a ea       	ldi	r20, 0xAA	; 170
    20b4:	50 e4       	ldi	r21, 0x40	; 64
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	89 a7       	std	Y+41, r24	; 0x29
    20c0:	9a a7       	std	Y+42, r25	; 0x2a
    20c2:	ab a7       	std	Y+43, r26	; 0x2b
    20c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20c6:	69 a5       	ldd	r22, Y+41	; 0x29
    20c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    20ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    20cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	1c f4       	brge	.+6      	; 0x20e4 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	88 a7       	std	Y+40, r24	; 0x28
    20e2:	91 c0       	rjmp	.+290    	; 0x2206 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    20e4:	69 a5       	ldd	r22, Y+41	; 0x29
    20e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    20e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	53 e4       	ldi	r21, 0x43	; 67
    20f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	0c f0       	brlt	.+2      	; 0x20fe <LCD_ES_tTrigger_Enable+0x86>
    20fc:	7b c0       	rjmp	.+246    	; 0x21f4 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    20fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2100:	7e a5       	ldd	r23, Y+46	; 0x2e
    2102:	8f a5       	ldd	r24, Y+47	; 0x2f
    2104:	98 a9       	ldd	r25, Y+48	; 0x30
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	54 e4       	ldi	r21, 0x44	; 68
    210e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8c a3       	std	Y+36, r24	; 0x24
    2118:	9d a3       	std	Y+37, r25	; 0x25
    211a:	ae a3       	std	Y+38, r26	; 0x26
    211c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	6c a1       	ldd	r22, Y+36	; 0x24
    2120:	7d a1       	ldd	r23, Y+37	; 0x25
    2122:	8e a1       	ldd	r24, Y+38	; 0x26
    2124:	9f a1       	ldd	r25, Y+39	; 0x27
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a e7       	ldi	r20, 0x7A	; 122
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	88 a3       	std	Y+32, r24	; 0x20
    2138:	99 a3       	std	Y+33, r25	; 0x21
    213a:	aa a3       	std	Y+34, r26	; 0x22
    213c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    213e:	68 a1       	ldd	r22, Y+32	; 0x20
    2140:	79 a1       	ldd	r23, Y+33	; 0x21
    2142:	8a a1       	ldd	r24, Y+34	; 0x22
    2144:	9b a1       	ldd	r25, Y+35	; 0x23
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	2c f4       	brge	.+10     	; 0x2160 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9f 8f       	std	Y+31, r25	; 0x1f
    215c:	8e 8f       	std	Y+30, r24	; 0x1e
    215e:	3f c0       	rjmp	.+126    	; 0x21de <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2160:	68 a1       	ldd	r22, Y+32	; 0x20
    2162:	79 a1       	ldd	r23, Y+33	; 0x21
    2164:	8a a1       	ldd	r24, Y+34	; 0x22
    2166:	9b a1       	ldd	r25, Y+35	; 0x23
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	4c f5       	brge	.+82     	; 0x21ca <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	6c a1       	ldd	r22, Y+36	; 0x24
    217a:	7d a1       	ldd	r23, Y+37	; 0x25
    217c:	8e a1       	ldd	r24, Y+38	; 0x26
    217e:	9f a1       	ldd	r25, Y+39	; 0x27
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9f 8f       	std	Y+31, r25	; 0x1f
    219e:	8e 8f       	std	Y+30, r24	; 0x1e
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <LCD_ES_tTrigger_Enable+0x148>
    21a2:	80 e9       	ldi	r24, 0x90	; 144
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	9d 8f       	std	Y+29, r25	; 0x1d
    21a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_ES_tTrigger_Enable+0x136>
    21b2:	9d 8f       	std	Y+29, r25	; 0x1d
    21b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9f 8f       	std	Y+31, r25	; 0x1f
    21be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <LCD_ES_tTrigger_Enable+0x12a>
    21c8:	24 c0       	rjmp	.+72     	; 0x2212 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	68 a1       	ldd	r22, Y+32	; 0x20
    21cc:	79 a1       	ldd	r23, Y+33	; 0x21
    21ce:	8a a1       	ldd	r24, Y+34	; 0x22
    21d0:	9b a1       	ldd	r25, Y+35	; 0x23
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9f 8f       	std	Y+31, r25	; 0x1f
    21dc:	8e 8f       	std	Y+30, r24	; 0x1e
    21de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21e2:	9b 8f       	std	Y+27, r25	; 0x1b
    21e4:	8a 8f       	std	Y+26, r24	; 0x1a
    21e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_ES_tTrigger_Enable+0x172>
    21ee:	9b 8f       	std	Y+27, r25	; 0x1b
    21f0:	8a 8f       	std	Y+26, r24	; 0x1a
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21f4:	69 a5       	ldd	r22, Y+41	; 0x29
    21f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    21f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	88 a7       	std	Y+40, r24	; 0x28
    2206:	88 a5       	ldd	r24, Y+40	; 0x28
    2208:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    220a:	89 8d       	ldd	r24, Y+25	; 0x19
    220c:	8a 95       	dec	r24
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_ES_tTrigger_Enable+0x194>
    2210:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	63 e0       	ldi	r22, 0x03	; 3
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	aa ef       	ldi	r26, 0xFA	; 250
    2222:	b4 e4       	ldi	r27, 0x44	; 68
    2224:	8d 8b       	std	Y+21, r24	; 0x15
    2226:	9e 8b       	std	Y+22, r25	; 0x16
    2228:	af 8b       	std	Y+23, r26	; 0x17
    222a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    222c:	6d 89       	ldd	r22, Y+21	; 0x15
    222e:	7e 89       	ldd	r23, Y+22	; 0x16
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	98 8d       	ldd	r25, Y+24	; 0x18
    2234:	2b ea       	ldi	r18, 0xAB	; 171
    2236:	3a ea       	ldi	r19, 0xAA	; 170
    2238:	4a ea       	ldi	r20, 0xAA	; 170
    223a:	50 e4       	ldi	r21, 0x40	; 64
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	89 8b       	std	Y+17, r24	; 0x11
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	ab 8b       	std	Y+19, r26	; 0x13
    224a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    224c:	69 89       	ldd	r22, Y+17	; 0x11
    224e:	7a 89       	ldd	r23, Y+18	; 0x12
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	1c f4       	brge	.+6      	; 0x226a <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	88 8b       	std	Y+16, r24	; 0x10
    2268:	91 c0       	rjmp	.+290    	; 0x238c <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    226a:	69 89       	ldd	r22, Y+17	; 0x11
    226c:	7a 89       	ldd	r23, Y+18	; 0x12
    226e:	8b 89       	ldd	r24, Y+19	; 0x13
    2270:	9c 89       	ldd	r25, Y+20	; 0x14
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	53 e4       	ldi	r21, 0x43	; 67
    227a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	0c f0       	brlt	.+2      	; 0x2284 <LCD_ES_tTrigger_Enable+0x20c>
    2282:	7b c0       	rjmp	.+246    	; 0x237a <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    2284:	6d 89       	ldd	r22, Y+21	; 0x15
    2286:	7e 89       	ldd	r23, Y+22	; 0x16
    2288:	8f 89       	ldd	r24, Y+23	; 0x17
    228a:	98 8d       	ldd	r25, Y+24	; 0x18
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	54 e4       	ldi	r21, 0x44	; 68
    2294:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8c 87       	std	Y+12, r24	; 0x0c
    229e:	9d 87       	std	Y+13, r25	; 0x0d
    22a0:	ae 87       	std	Y+14, r26	; 0x0e
    22a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    22a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    22a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a e7       	ldi	r20, 0x7A	; 122
    22b2:	55 e4       	ldi	r21, 0x45	; 69
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	88 87       	std	Y+8, r24	; 0x08
    22be:	99 87       	std	Y+9, r25	; 0x09
    22c0:	aa 87       	std	Y+10, r26	; 0x0a
    22c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22c4:	68 85       	ldd	r22, Y+8	; 0x08
    22c6:	79 85       	ldd	r23, Y+9	; 0x09
    22c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e8       	ldi	r20, 0x80	; 128
    22d2:	5f e3       	ldi	r21, 0x3F	; 63
    22d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9f 83       	std	Y+7, r25	; 0x07
    22e2:	8e 83       	std	Y+6, r24	; 0x06
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    22e6:	68 85       	ldd	r22, Y+8	; 0x08
    22e8:	79 85       	ldd	r23, Y+9	; 0x09
    22ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2300:	7d 85       	ldd	r23, Y+13	; 0x0d
    2302:	8e 85       	ldd	r24, Y+14	; 0x0e
    2304:	9f 85       	ldd	r25, Y+15	; 0x0f
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e2       	ldi	r20, 0x20	; 32
    230c:	51 e4       	ldi	r21, 0x41	; 65
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9f 83       	std	Y+7, r25	; 0x07
    2324:	8e 83       	std	Y+6, r24	; 0x06
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <LCD_ES_tTrigger_Enable+0x2ce>
    2328:	80 e9       	ldi	r24, 0x90	; 144
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	9d 83       	std	Y+5, r25	; 0x05
    232e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	9d 81       	ldd	r25, Y+5	; 0x05
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_ES_tTrigger_Enable+0x2bc>
    2338:	9d 83       	std	Y+5, r25	; 0x05
    233a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	8e 81       	ldd	r24, Y+6	; 0x06
    233e:	9f 81       	ldd	r25, Y+7	; 0x07
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9f 83       	std	Y+7, r25	; 0x07
    2344:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	8e 81       	ldd	r24, Y+6	; 0x06
    2348:	9f 81       	ldd	r25, Y+7	; 0x07
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	69 f7       	brne	.-38     	; 0x2328 <LCD_ES_tTrigger_Enable+0x2b0>
    234e:	24 c0       	rjmp	.+72     	; 0x2398 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	68 85       	ldd	r22, Y+8	; 0x08
    2352:	79 85       	ldd	r23, Y+9	; 0x09
    2354:	8a 85       	ldd	r24, Y+10	; 0x0a
    2356:	9b 85       	ldd	r25, Y+11	; 0x0b
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9f 83       	std	Y+7, r25	; 0x07
    2362:	8e 83       	std	Y+6, r24	; 0x06
    2364:	8e 81       	ldd	r24, Y+6	; 0x06
    2366:	9f 81       	ldd	r25, Y+7	; 0x07
    2368:	9b 83       	std	Y+3, r25	; 0x03
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_ES_tTrigger_Enable+0x2f8>
    2374:	9b 83       	std	Y+3, r25	; 0x03
    2376:	8a 83       	std	Y+2, r24	; 0x02
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    237a:	69 89       	ldd	r22, Y+17	; 0x11
    237c:	7a 89       	ldd	r23, Y+18	; 0x12
    237e:	8b 89       	ldd	r24, Y+19	; 0x13
    2380:	9c 89       	ldd	r25, Y+20	; 0x14
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	88 8b       	std	Y+16, r24	; 0x10
    238c:	88 89       	ldd	r24, Y+16	; 0x10
    238e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	8a 95       	dec	r24
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_ES_tTrigger_Enable+0x31a>
    2396:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2398:	80 e0       	ldi	r24, 0x00	; 0
}
    239a:	e0 96       	adiw	r28, 0x30	; 48
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    23ba:	88 e2       	ldi	r24, 0x28	; 40
    23bc:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    23c0:	8e e0       	ldi	r24, 0x0E	; 14
    23c2:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    23c6:	86 e0       	ldi	r24, 0x06	; 6
    23c8:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	return ES_OK;
    23d2:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	2e 97       	sbiw	r28, 0x0e	; 14
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e0       	ldi	r26, 0x00	; 0
    23fa:	b0 e4       	ldi	r27, 0x40	; 64
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	9c 87       	std	Y+12, r25	; 0x0c
    2400:	ad 87       	std	Y+13, r26	; 0x0d
    2402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a e7       	ldi	r20, 0x7A	; 122
    2412:	55 e4       	ldi	r21, 0x45	; 69
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	98 87       	std	Y+8, r25	; 0x08
    2420:	a9 87       	std	Y+9, r26	; 0x09
    2422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <lcd_ES_tclear+0xcc>
    2488:	80 e9       	ldi	r24, 0x90	; 144
    248a:	91 e0       	ldi	r25, 0x01	; 1
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <lcd_ES_tclear+0xba>
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <lcd_ES_tclear+0xae>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <lcd_ES_tclear+0xf6>
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    24d8:	80 e0       	ldi	r24, 0x00	; 0
}
    24da:	2e 96       	adiw	r28, 0x0e	; 14
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	0f 92       	push	r0
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 23       	and	r24, r24
    2510:	34 f4       	brge	.+12     	; 0x251e <Lcd_ES_tsendCmd+0x32>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	66 e0       	ldi	r22, 0x06	; 6
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <Lcd_ES_tsendCmd+0x3c>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	66 e0       	ldi	r22, 0x06	; 6
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	82 95       	swap	r24
    252c:	86 95       	lsr	r24
    252e:	86 95       	lsr	r24
    2530:	83 70       	andi	r24, 0x03	; 3
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	81 70       	andi	r24, 0x01	; 1
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	88 23       	and	r24, r24
    253c:	31 f0       	breq	.+12     	; 0x254a <Lcd_ES_tsendCmd+0x5e>
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	65 e0       	ldi	r22, 0x05	; 5
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <Lcd_ES_tsendCmd+0x68>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	65 e0       	ldi	r22, 0x05	; 5
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	82 95       	swap	r24
    2558:	86 95       	lsr	r24
    255a:	87 70       	andi	r24, 0x07	; 7
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	81 70       	andi	r24, 0x01	; 1
    2562:	90 70       	andi	r25, 0x00	; 0
    2564:	88 23       	and	r24, r24
    2566:	31 f0       	breq	.+12     	; 0x2574 <Lcd_ES_tsendCmd+0x88>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2572:	05 c0       	rjmp	.+10     	; 0x257e <Lcd_ES_tsendCmd+0x92>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	64 e0       	ldi	r22, 0x04	; 4
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	82 95       	swap	r24
    2582:	8f 70       	andi	r24, 0x0F	; 15
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	81 70       	andi	r24, 0x01	; 1
    258a:	90 70       	andi	r25, 0x00	; 0
    258c:	88 23       	and	r24, r24
    258e:	31 f0       	breq	.+12     	; 0x259c <Lcd_ES_tsendCmd+0xb0>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	63 e0       	ldi	r22, 0x03	; 3
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    259a:	05 c0       	rjmp	.+10     	; 0x25a6 <Lcd_ES_tsendCmd+0xba>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	63 e0       	ldi	r22, 0x03	; 3
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    25a6:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	86 95       	lsr	r24
    25ae:	86 95       	lsr	r24
    25b0:	86 95       	lsr	r24
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	81 70       	andi	r24, 0x01	; 1
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	88 23       	and	r24, r24
    25bc:	31 f0       	breq	.+12     	; 0x25ca <Lcd_ES_tsendCmd+0xde>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	66 e0       	ldi	r22, 0x06	; 6
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    25c8:	05 c0       	rjmp	.+10     	; 0x25d4 <Lcd_ES_tsendCmd+0xe8>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	66 e0       	ldi	r22, 0x06	; 6
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	86 95       	lsr	r24
    25d8:	86 95       	lsr	r24
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	81 70       	andi	r24, 0x01	; 1
    25e0:	90 70       	andi	r25, 0x00	; 0
    25e2:	88 23       	and	r24, r24
    25e4:	31 f0       	breq	.+12     	; 0x25f2 <Lcd_ES_tsendCmd+0x106>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	65 e0       	ldi	r22, 0x05	; 5
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    25f0:	05 c0       	rjmp	.+10     	; 0x25fc <Lcd_ES_tsendCmd+0x110>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	65 e0       	ldi	r22, 0x05	; 5
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	86 95       	lsr	r24
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	81 70       	andi	r24, 0x01	; 1
    2606:	90 70       	andi	r25, 0x00	; 0
    2608:	88 23       	and	r24, r24
    260a:	31 f0       	breq	.+12     	; 0x2618 <Lcd_ES_tsendCmd+0x12c>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	64 e0       	ldi	r22, 0x04	; 4
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2616:	05 c0       	rjmp	.+10     	; 0x2622 <Lcd_ES_tsendCmd+0x136>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	64 e0       	ldi	r22, 0x04	; 4
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	81 70       	andi	r24, 0x01	; 1
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	88 23       	and	r24, r24
    262e:	31 f0       	breq	.+12     	; 0x263c <Lcd_ES_tsendCmd+0x150>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	63 e0       	ldi	r22, 0x03	; 3
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <Lcd_ES_tsendCmd+0x15a>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	63 e0       	ldi	r22, 0x03	; 3
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2646:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    264a:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	0f 92       	push	r0
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	61 e0       	ldi	r22, 0x01	; 1
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	88 23       	and	r24, r24
    2678:	34 f4       	brge	.+12     	; 0x2686 <Lcd_ES_tsendChar+0x32>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	66 e0       	ldi	r22, 0x06	; 6
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2684:	05 c0       	rjmp	.+10     	; 0x2690 <Lcd_ES_tsendChar+0x3c>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	66 e0       	ldi	r22, 0x06	; 6
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	82 95       	swap	r24
    2694:	86 95       	lsr	r24
    2696:	86 95       	lsr	r24
    2698:	83 70       	andi	r24, 0x03	; 3
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	81 70       	andi	r24, 0x01	; 1
    26a0:	90 70       	andi	r25, 0x00	; 0
    26a2:	88 23       	and	r24, r24
    26a4:	31 f0       	breq	.+12     	; 0x26b2 <Lcd_ES_tsendChar+0x5e>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	65 e0       	ldi	r22, 0x05	; 5
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    26b0:	05 c0       	rjmp	.+10     	; 0x26bc <Lcd_ES_tsendChar+0x68>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	65 e0       	ldi	r22, 0x05	; 5
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	82 95       	swap	r24
    26c0:	86 95       	lsr	r24
    26c2:	87 70       	andi	r24, 0x07	; 7
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	81 70       	andi	r24, 0x01	; 1
    26ca:	90 70       	andi	r25, 0x00	; 0
    26cc:	88 23       	and	r24, r24
    26ce:	31 f0       	breq	.+12     	; 0x26dc <Lcd_ES_tsendChar+0x88>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	64 e0       	ldi	r22, 0x04	; 4
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    26da:	05 c0       	rjmp	.+10     	; 0x26e6 <Lcd_ES_tsendChar+0x92>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	82 95       	swap	r24
    26ea:	8f 70       	andi	r24, 0x0F	; 15
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	81 70       	andi	r24, 0x01	; 1
    26f2:	90 70       	andi	r25, 0x00	; 0
    26f4:	88 23       	and	r24, r24
    26f6:	31 f0       	breq	.+12     	; 0x2704 <Lcd_ES_tsendChar+0xb0>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	63 e0       	ldi	r22, 0x03	; 3
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2702:	05 c0       	rjmp	.+10     	; 0x270e <Lcd_ES_tsendChar+0xba>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	63 e0       	ldi	r22, 0x03	; 3
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    270e:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	86 95       	lsr	r24
    2716:	86 95       	lsr	r24
    2718:	86 95       	lsr	r24
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	81 70       	andi	r24, 0x01	; 1
    2720:	90 70       	andi	r25, 0x00	; 0
    2722:	88 23       	and	r24, r24
    2724:	31 f0       	breq	.+12     	; 0x2732 <Lcd_ES_tsendChar+0xde>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	66 e0       	ldi	r22, 0x06	; 6
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2730:	05 c0       	rjmp	.+10     	; 0x273c <Lcd_ES_tsendChar+0xe8>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	86 95       	lsr	r24
    2740:	86 95       	lsr	r24
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	81 70       	andi	r24, 0x01	; 1
    2748:	90 70       	andi	r25, 0x00	; 0
    274a:	88 23       	and	r24, r24
    274c:	31 f0       	breq	.+12     	; 0x275a <Lcd_ES_tsendChar+0x106>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	65 e0       	ldi	r22, 0x05	; 5
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    2758:	05 c0       	rjmp	.+10     	; 0x2764 <Lcd_ES_tsendChar+0x110>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	65 e0       	ldi	r22, 0x05	; 5
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	86 95       	lsr	r24
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	81 70       	andi	r24, 0x01	; 1
    276e:	90 70       	andi	r25, 0x00	; 0
    2770:	88 23       	and	r24, r24
    2772:	31 f0       	breq	.+12     	; 0x2780 <Lcd_ES_tsendChar+0x12c>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	64 e0       	ldi	r22, 0x04	; 4
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    277e:	05 c0       	rjmp	.+10     	; 0x278a <Lcd_ES_tsendChar+0x136>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	81 70       	andi	r24, 0x01	; 1
    2792:	90 70       	andi	r25, 0x00	; 0
    2794:	88 23       	and	r24, r24
    2796:	31 f0       	breq	.+12     	; 0x27a4 <Lcd_ES_tsendChar+0x150>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	63 e0       	ldi	r22, 0x03	; 3
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <Lcd_ES_tsendChar+0x15a>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	63 e0       	ldi	r22, 0x03	; 3
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    27ae:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    27b2:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <Lcd_ES_tsendString+0x6>
    27c2:	0f 92       	push	r0
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	9b 83       	std	Y+3, r25	; 0x03
    27ca:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    27e0:	19 82       	std	Y+1, r1	; 0x01
    27e2:	0e c0       	rjmp	.+28     	; 0x2800 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	fc 01       	movw	r30, r24
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	80 81       	ld	r24, Z
    27f6:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
		i++;
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	fc 01       	movw	r30, r24
    280c:	e2 0f       	add	r30, r18
    280e:	f3 1f       	adc	r31, r19
    2810:	80 81       	ld	r24, Z
    2812:	88 23       	and	r24, r24
    2814:	39 f7       	brne	.-50     	; 0x27e4 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    2816:	80 e0       	ldi	r24, 0x00	; 0
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <Lcd_ES_tsendString_xy+0x6>
    282a:	00 d0       	rcall	.+0      	; 0x282c <Lcd_ES_tsendString_xy+0x8>
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	6b 83       	std	Y+3, r22	; 0x03
    2836:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	6c 81       	ldd	r22, Y+4	; 0x04
    2850:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	0e 94 de 13 	call	0x27bc	; 0x27bc <Lcd_ES_tsendString>
	return ES_OK;
    285c:	80 e0       	ldi	r24, 0x00	; 0

}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	2e 97       	sbiw	r28, 0x0e	; 14
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	9e 87       	std	Y+14, r25	; 0x0e
    2882:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2898:	1a 82       	std	Y+2, r1	; 0x02
    289a:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	11 f5       	brne	.+68     	; 0x28e8 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    28a4:	80 e3       	ldi	r24, 0x30	; 48
    28a6:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
    28aa:	39 c0       	rjmp	.+114    	; 0x291e <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	e8 2f       	mov	r30, r24
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b6:	2a e0       	ldi	r18, 0x0A	; 10
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	b9 01       	movw	r22, r18
    28bc:	0e 94 9b 19 	call	0x3336	; 0x3336 <__udivmodhi4>
    28c0:	28 2f       	mov	r18, r24
    28c2:	20 5d       	subi	r18, 0xD0	; 208
    28c4:	ce 01       	movw	r24, r28
    28c6:	03 96       	adiw	r24, 0x03	; 3
    28c8:	e8 0f       	add	r30, r24
    28ca:	f9 1f       	adc	r31, r25
    28cc:	20 83       	st	Z, r18
			num /= 10;
    28ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d2:	2a e0       	ldi	r18, 0x0A	; 10
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	b9 01       	movw	r22, r18
    28d8:	0e 94 9b 19 	call	0x3336	; 0x3336 <__udivmodhi4>
    28dc:	cb 01       	movw	r24, r22
    28de:	9e 87       	std	Y+14, r25	; 0x0e
    28e0:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	f1 f6       	brne	.-68     	; 0x28ac <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	11 c0       	rjmp	.+34     	; 0x2918 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9c 01       	movw	r18, r24
    28fe:	21 50       	subi	r18, 0x01	; 1
    2900:	30 40       	sbci	r19, 0x00	; 0
    2902:	ce 01       	movw	r24, r28
    2904:	03 96       	adiw	r24, 0x03	; 3
    2906:	fc 01       	movw	r30, r24
    2908:	e2 0f       	add	r30, r18
    290a:	f3 1f       	adc	r31, r19
    290c:	80 81       	ld	r24, Z
    290e:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	81 50       	subi	r24, 0x01	; 1
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	88 23       	and	r24, r24
    291c:	61 f7       	brne	.-40     	; 0x28f6 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    291e:	80 e0       	ldi	r24, 0x00	; 0
}
    2920:	2e 96       	adiw	r28, 0x0e	; 14
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	a3 97       	sbiw	r28, 0x23	; 35
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	98 a3       	std	Y+32, r25	; 0x20
    2948:	8f 8f       	std	Y+31, r24	; 0x1f
    294a:	69 a3       	std	Y+33, r22	; 0x21
    294c:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	61 e0       	ldi	r22, 0x01	; 1
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>


	if(row == 1){
    2962:	89 a1       	ldd	r24, Y+33	; 0x21
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	09 f0       	breq	.+2      	; 0x296a <Lcd_ES_tdisplayNum_xy+0x38>
    2968:	76 c0       	rjmp	.+236    	; 0x2a56 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    296a:	80 e8       	ldi	r24, 0x80	; 128
    296c:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e8       	ldi	r26, 0x80	; 128
    2976:	bf e3       	ldi	r27, 0x3F	; 63
    2978:	89 8f       	std	Y+25, r24	; 0x19
    297a:	9a 8f       	std	Y+26, r25	; 0x1a
    297c:	ab 8f       	std	Y+27, r26	; 0x1b
    297e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	69 8d       	ldd	r22, Y+25	; 0x19
    2982:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2984:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2986:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a e7       	ldi	r20, 0x7A	; 122
    298e:	55 e4       	ldi	r21, 0x45	; 69
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8d 8b       	std	Y+21, r24	; 0x15
    299a:	9e 8b       	std	Y+22, r25	; 0x16
    299c:	af 8b       	std	Y+23, r26	; 0x17
    299e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9c 8b       	std	Y+20, r25	; 0x14
    29be:	8b 8b       	std	Y+19, r24	; 0x13
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    29c2:	6d 89       	ldd	r22, Y+21	; 0x15
    29c4:	7e 89       	ldd	r23, Y+22	; 0x16
    29c6:	8f 89       	ldd	r24, Y+23	; 0x17
    29c8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	69 8d       	ldd	r22, Y+25	; 0x19
    29dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <Lcd_ES_tdisplayNum_xy+0xf0>
    2a04:	80 e9       	ldi	r24, 0x90	; 144
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	9a 8b       	std	Y+18, r25	; 0x12
    2a0a:	89 8b       	std	Y+17, r24	; 0x11
    2a0c:	89 89       	ldd	r24, Y+17	; 0x11
    2a0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <Lcd_ES_tdisplayNum_xy+0xde>
    2a14:	9a 8b       	std	Y+18, r25	; 0x12
    2a16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <Lcd_ES_tdisplayNum_xy+0xd2>
    2a2a:	92 c0       	rjmp	.+292    	; 0x2b50 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a30:	8f 89       	ldd	r24, Y+23	; 0x17
    2a32:	98 8d       	ldd	r25, Y+24	; 0x18
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9c 8b       	std	Y+20, r25	; 0x14
    2a3e:	8b 8b       	std	Y+19, r24	; 0x13
    2a40:	8b 89       	ldd	r24, Y+19	; 0x13
    2a42:	9c 89       	ldd	r25, Y+20	; 0x14
    2a44:	98 8b       	std	Y+16, r25	; 0x10
    2a46:	8f 87       	std	Y+15, r24	; 0x0f
    2a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4a:	98 89       	ldd	r25, Y+16	; 0x10
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <Lcd_ES_tdisplayNum_xy+0x11a>
    2a50:	98 8b       	std	Y+16, r25	; 0x10
    2a52:	8f 87       	std	Y+15, r24	; 0x0f
    2a54:	7d c0       	rjmp	.+250    	; 0x2b50 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    2a56:	89 a1       	ldd	r24, Y+33	; 0x21
    2a58:	82 30       	cpi	r24, 0x02	; 2
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <Lcd_ES_tdisplayNum_xy+0x12c>
    2a5c:	76 c0       	rjmp	.+236    	; 0x2b4a <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    2a5e:	80 ec       	ldi	r24, 0xC0	; 192
    2a60:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a0 e2       	ldi	r26, 0x20	; 32
    2a6a:	b1 e4       	ldi	r27, 0x41	; 65
    2a6c:	8b 87       	std	Y+11, r24	; 0x0b
    2a6e:	9c 87       	std	Y+12, r25	; 0x0c
    2a70:	ad 87       	std	Y+13, r26	; 0x0d
    2a72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4a e7       	ldi	r20, 0x7A	; 122
    2a82:	55 e4       	ldi	r21, 0x45	; 69
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	8f 83       	std	Y+7, r24	; 0x07
    2a8e:	98 87       	std	Y+8, r25	; 0x08
    2a90:	a9 87       	std	Y+9, r26	; 0x09
    2a92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa8:	88 23       	and	r24, r24
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	3f c0       	rjmp	.+126    	; 0x2b34 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	3f ef       	ldi	r19, 0xFF	; 255
    2ac2:	4f e7       	ldi	r20, 0x7F	; 127
    2ac4:	57 e4       	ldi	r21, 0x47	; 71
    2ac6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aca:	18 16       	cp	r1, r24
    2acc:	4c f5       	brge	.+82     	; 0x2b20 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e2       	ldi	r20, 0x20	; 32
    2adc:	51 e4       	ldi	r21, 0x41	; 65
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
    2af6:	0f c0       	rjmp	.+30     	; 0x2b16 <Lcd_ES_tdisplayNum_xy+0x1e4>
    2af8:	80 e9       	ldi	r24, 0x90	; 144
    2afa:	91 e0       	ldi	r25, 0x01	; 1
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <Lcd_ES_tdisplayNum_xy+0x1d2>
    2b08:	9c 83       	std	Y+4, r25	; 0x04
    2b0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	9e 83       	std	Y+6, r25	; 0x06
    2b14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	69 f7       	brne	.-38     	; 0x2af8 <Lcd_ES_tdisplayNum_xy+0x1c6>
    2b1e:	18 c0       	rjmp	.+48     	; 0x2b50 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9e 83       	std	Y+6, r25	; 0x06
    2b32:	8d 83       	std	Y+5, r24	; 0x05
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <Lcd_ES_tdisplayNum_xy+0x20e>
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	03 c0       	rjmp	.+6      	; 0x2b50 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	8b a3       	std	Y+35, r24	; 0x23
    2b4e:	1a c0       	rjmp	.+52     	; 0x2b84 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9e 8f       	std	Y+30, r25	; 0x1e
    2b56:	8d 8f       	std	Y+29, r24	; 0x1d
    2b58:	08 c0       	rjmp	.+16     	; 0x2b6a <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    2b5a:	8c e1       	ldi	r24, 0x1C	; 28
    2b5c:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    2b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	9e 8f       	std	Y+30, r25	; 0x1e
    2b68:	8d 8f       	std	Y+29, r24	; 0x1d
    2b6a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b74:	28 17       	cp	r18, r24
    2b76:	39 07       	cpc	r19, r25
    2b78:	84 f7       	brge	.-32     	; 0x2b5a <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b7c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b7e:	0e 94 36 14 	call	0x286c	; 0x286c <Lcd_ES_tdisplayNum>
	return ES_OK;
    2b82:	1b a2       	std	Y+35, r1	; 0x23
    2b84:	8b a1       	ldd	r24, Y+35	; 0x23

}
    2b86:	a3 96       	adiw	r28, 0x23	; 35
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	a2 97       	sbiw	r28, 0x22	; 34
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	8f 8f       	std	Y+31, r24	; 0x1f
    2bae:	68 a3       	std	Y+32, r22	; 0x20
    2bb0:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>


	if(row == 1){
    2bc6:	88 a1       	ldd	r24, Y+32	; 0x20
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	09 f0       	breq	.+2      	; 0x2bce <Lcd_ES_tsendChar_xy+0x36>
    2bcc:	76 c0       	rjmp	.+236    	; 0x2cba <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    2bce:	80 e8       	ldi	r24, 0x80	; 128
    2bd0:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a0 e8       	ldi	r26, 0x80	; 128
    2bda:	bf e3       	ldi	r27, 0x3F	; 63
    2bdc:	89 8f       	std	Y+25, r24	; 0x19
    2bde:	9a 8f       	std	Y+26, r25	; 0x1a
    2be0:	ab 8f       	std	Y+27, r26	; 0x1b
    2be2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	69 8d       	ldd	r22, Y+25	; 0x19
    2be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a e7       	ldi	r20, 0x7A	; 122
    2bf2:	55 e4       	ldi	r21, 0x45	; 69
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8d 8b       	std	Y+21, r24	; 0x15
    2bfe:	9e 8b       	std	Y+22, r25	; 0x16
    2c00:	af 8b       	std	Y+23, r26	; 0x17
    2c02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c04:	6d 89       	ldd	r22, Y+21	; 0x15
    2c06:	7e 89       	ldd	r23, Y+22	; 0x16
    2c08:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2c26:	6d 89       	ldd	r22, Y+21	; 0x15
    2c28:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9c 8b       	std	Y+20, r25	; 0x14
    2c64:	8b 8b       	std	Y+19, r24	; 0x13
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <Lcd_ES_tsendChar_xy+0xee>
    2c68:	80 e9       	ldi	r24, 0x90	; 144
    2c6a:	91 e0       	ldi	r25, 0x01	; 1
    2c6c:	9a 8b       	std	Y+18, r25	; 0x12
    2c6e:	89 8b       	std	Y+17, r24	; 0x11
    2c70:	89 89       	ldd	r24, Y+17	; 0x11
    2c72:	9a 89       	ldd	r25, Y+18	; 0x12
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <Lcd_ES_tsendChar_xy+0xdc>
    2c78:	9a 8b       	std	Y+18, r25	; 0x12
    2c7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9c 8b       	std	Y+20, r25	; 0x14
    2c84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	8b 89       	ldd	r24, Y+19	; 0x13
    2c88:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <Lcd_ES_tsendChar_xy+0xd0>
    2c8e:	92 c0       	rjmp	.+292    	; 0x2db4 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	6d 89       	ldd	r22, Y+21	; 0x15
    2c92:	7e 89       	ldd	r23, Y+22	; 0x16
    2c94:	8f 89       	ldd	r24, Y+23	; 0x17
    2c96:	98 8d       	ldd	r25, Y+24	; 0x18
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9c 8b       	std	Y+20, r25	; 0x14
    2ca2:	8b 8b       	std	Y+19, r24	; 0x13
    2ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca8:	98 8b       	std	Y+16, r25	; 0x10
    2caa:	8f 87       	std	Y+15, r24	; 0x0f
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	98 89       	ldd	r25, Y+16	; 0x10
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <Lcd_ES_tsendChar_xy+0x118>
    2cb4:	98 8b       	std	Y+16, r25	; 0x10
    2cb6:	8f 87       	std	Y+15, r24	; 0x0f
    2cb8:	7d c0       	rjmp	.+250    	; 0x2db4 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    2cba:	88 a1       	ldd	r24, Y+32	; 0x20
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <Lcd_ES_tsendChar_xy+0x12a>
    2cc0:	76 c0       	rjmp	.+236    	; 0x2dae <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    2cc2:	80 ec       	ldi	r24, 0xC0	; 192
    2cc4:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a0 e2       	ldi	r26, 0x20	; 32
    2cce:	b1 e4       	ldi	r27, 0x41	; 65
    2cd0:	8b 87       	std	Y+11, r24	; 0x0b
    2cd2:	9c 87       	std	Y+12, r25	; 0x0c
    2cd4:	ad 87       	std	Y+13, r26	; 0x0d
    2cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a e7       	ldi	r20, 0x7A	; 122
    2ce6:	55 e4       	ldi	r21, 0x45	; 69
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	8f 83       	std	Y+7, r24	; 0x07
    2cf2:	98 87       	std	Y+8, r25	; 0x08
    2cf4:	a9 87       	std	Y+9, r26	; 0x09
    2cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfa:	78 85       	ldd	r23, Y+8	; 0x08
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e8       	ldi	r20, 0x80	; 128
    2d06:	5f e3       	ldi	r21, 0x3F	; 63
    2d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0c:	88 23       	and	r24, r24
    2d0e:	2c f4       	brge	.+10     	; 0x2d1a <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
    2d18:	3f c0       	rjmp	.+126    	; 0x2d98 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	3f ef       	ldi	r19, 0xFF	; 255
    2d26:	4f e7       	ldi	r20, 0x7F	; 127
    2d28:	57 e4       	ldi	r21, 0x47	; 71
    2d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2e:	18 16       	cp	r1, r24
    2d30:	4c f5       	brge	.+82     	; 0x2d84 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e2       	ldi	r20, 0x20	; 32
    2d40:	51 e4       	ldi	r21, 0x41	; 65
    2d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
    2d5a:	0f c0       	rjmp	.+30     	; 0x2d7a <Lcd_ES_tsendChar_xy+0x1e2>
    2d5c:	80 e9       	ldi	r24, 0x90	; 144
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	9c 83       	std	Y+4, r25	; 0x04
    2d62:	8b 83       	std	Y+3, r24	; 0x03
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	9c 81       	ldd	r25, Y+4	; 0x04
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <Lcd_ES_tsendChar_xy+0x1d0>
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d70:	8d 81       	ldd	r24, Y+5	; 0x05
    2d72:	9e 81       	ldd	r25, Y+6	; 0x06
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	69 f7       	brne	.-38     	; 0x2d5c <Lcd_ES_tsendChar_xy+0x1c4>
    2d82:	18 c0       	rjmp	.+48     	; 0x2db4 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d84:	6f 81       	ldd	r22, Y+7	; 0x07
    2d86:	78 85       	ldd	r23, Y+8	; 0x08
    2d88:	89 85       	ldd	r24, Y+9	; 0x09
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9c:	9a 83       	std	Y+2, r25	; 0x02
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <Lcd_ES_tsendChar_xy+0x20c>
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	03 c0       	rjmp	.+6      	; 0x2db4 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	8a a3       	std	Y+34, r24	; 0x22
    2db2:	19 c0       	rjmp	.+50     	; 0x2de6 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dba:	8d 8f       	std	Y+29, r24	; 0x1d
    2dbc:	08 c0       	rjmp	.+16     	; 0x2dce <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    2dbe:	8c e1       	ldi	r24, 0x1C	; 28
    2dc0:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    2dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	9e 8f       	std	Y+30, r25	; 0x1e
    2dcc:	8d 8f       	std	Y+29, r24	; 0x1d
    2dce:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd8:	28 17       	cp	r18, r24
    2dda:	39 07       	cpc	r19, r25
    2ddc:	84 f7       	brge	.-32     	; 0x2dbe <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    2dde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2de0:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
	return ES_OK;
    2de4:	1a a2       	std	Y+34, r1	; 0x22
    2de6:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2de8:	a2 96       	adiw	r28, 0x22	; 34
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <LCD_ES_tSet_Cursor_Pos+0x6>
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <LCD_ES_tSet_Cursor_Pos+0x8>
    2e02:	0f 92       	push	r0
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	81 50       	subi	r24, 0x01	; 1
    2e10:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	3d 83       	std	Y+5, r19	; 0x05
    2e1a:	2c 83       	std	Y+4, r18	; 0x04
    2e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	91 05       	cpc	r25, r1
    2e24:	31 f0       	breq	.+12     	; 0x2e32 <LCD_ES_tSet_Cursor_Pos+0x38>
    2e26:	2c 81       	ldd	r18, Y+4	; 0x04
    2e28:	3d 81       	ldd	r19, Y+5	; 0x05
    2e2a:	22 30       	cpi	r18, 0x02	; 2
    2e2c:	31 05       	cpc	r19, r1
    2e2e:	31 f0       	breq	.+12     	; 0x2e3c <LCD_ES_tSet_Cursor_Pos+0x42>
    2e30:	0a c0       	rjmp	.+20     	; 0x2e46 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	80 58       	subi	r24, 0x80	; 128
    2e36:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2e3a:	08 c0       	rjmp	.+16     	; 0x2e4c <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	80 54       	subi	r24, 0x40	; 64
    2e40:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    2e46:	31 e0       	ldi	r19, 0x01	; 1
    2e48:	3b 83       	std	Y+3, r19	; 0x03
    2e4a:	01 c0       	rjmp	.+2      	; 0x2e4e <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    2e4c:	1b 82       	std	Y+3, r1	; 0x03
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <LCD_ES_tGoTo+0x6>
    2e66:	0f 92       	push	r0
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	88 23       	and	r24, r24
    2e74:	41 f4       	brne	.+16     	; 0x2e86 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	80 31       	cpi	r24, 0x10	; 16
    2e7a:	98 f4       	brcc	.+38     	; 0x2ea2 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	80 58       	subi	r24, 0x80	; 128
    2e80:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2e84:	0e c0       	rjmp	.+28     	; 0x2ea2 <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	41 f4       	brne	.+16     	; 0x2e9c <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	80 31       	cpi	r24, 0x10	; 16
    2e90:	40 f4       	brcc	.+16     	; 0x2ea2 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	80 54       	subi	r24, 0x40	; 64
    2e96:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
    2e9a:	03 c0       	rjmp	.+6      	; 0x2ea2 <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    2ea2:	1b 82       	std	Y+3, r1	; 0x03
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <Lcd_CreateCustomCharacter>:
/************************************************************************/



ES_t Lcd_CreateCustomCharacter(u8 *Local_u8_pattern,u8 Local_u8_location)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <Lcd_CreateCustomCharacter+0x6>
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <Lcd_CreateCustomCharacter+0x8>
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	9b 83       	std	Y+3, r25	; 0x03
    2ec0:	8a 83       	std	Y+2, r24	; 0x02
    2ec2:	6c 83       	std	Y+4, r22	; 0x04
	// First send the address in CGRAM
	Lcd_ES_tsendCmd(CGRAM_ADD + (Local_u8_location * MAX_LOCATION));
    2ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec6:	88 2f       	mov	r24, r24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	08 96       	adiw	r24, 0x08	; 8
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	0e 94 76 12 	call	0x24ec	; 0x24ec <Lcd_ES_tsendCmd>
	// Adding 0x40 is the command to set CGRAM address
	// + each character takes 8 bytes
	for(u8 Local_Iterator=LOW;Local_Iterator<MAX_LOCATION;Local_Iterator++){
    2edc:	19 82       	std	Y+1, r1	; 0x01
    2ede:	0e c0       	rjmp	.+28     	; 0x2efc <Lcd_CreateCustomCharacter+0x4a>
		// Passing the bytes on the pattern on LCD
		Lcd_ES_tsendChar(Local_u8_pattern[Local_Iterator]);
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	fc 01       	movw	r30, r24
    2eec:	e2 0f       	add	r30, r18
    2eee:	f3 1f       	adc	r31, r19
    2ef0:	80 81       	ld	r24, Z
    2ef2:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
{
	// First send the address in CGRAM
	Lcd_ES_tsendCmd(CGRAM_ADD + (Local_u8_location * MAX_LOCATION));
	// Adding 0x40 is the command to set CGRAM address
	// + each character takes 8 bytes
	for(u8 Local_Iterator=LOW;Local_Iterator<MAX_LOCATION;Local_Iterator++){
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	88 30       	cpi	r24, 0x08	; 8
    2f00:	78 f3       	brcs	.-34     	; 0x2ee0 <Lcd_CreateCustomCharacter+0x2e>
		// Passing the bytes on the pattern on LCD
		Lcd_ES_tsendChar(Local_u8_pattern[Local_Iterator]);
	}
	return ES_OK;
    2f02:	80 e0       	ldi	r24, 0x00	; 0
}
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	65 97       	sbiw	r28, 0x15	; 21
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    2f2a:	eb 89       	ldd	r30, Y+19	; 0x13
    2f2c:	fc 89       	ldd	r31, Y+20	; 0x14
    2f2e:	8f ef       	ldi	r24, 0xFF	; 255
    2f30:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    2f32:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    2f34:	8b 89       	ldd	r24, Y+19	; 0x13
    2f36:	9c 89       	ldd	r25, Y+20	; 0x14
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <KPD_ES_tGetKeyPressed+0x2c>
    2f3c:	ed c0       	rjmp	.+474    	; 0x3118 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2f3e:	19 8a       	std	Y+17, r1	; 0x11
    2f40:	e5 c0       	rjmp	.+458    	; 0x310c <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    2f42:	89 89       	ldd	r24, Y+17	; 0x11
    2f44:	88 2f       	mov	r24, r24
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	fc 01       	movw	r30, r24
    2f4a:	ec 51       	subi	r30, 0x1C	; 28
    2f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4e:	90 81       	ld	r25, Z
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	69 2f       	mov	r22, r25
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2f5a:	18 8a       	std	Y+16, r1	; 0x10
    2f5c:	c1 c0       	rjmp	.+386    	; 0x30e0 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    2f5e:	88 89       	ldd	r24, Y+16	; 0x10
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	fc 01       	movw	r30, r24
    2f66:	e8 51       	subi	r30, 0x18	; 24
    2f68:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6a:	90 81       	ld	r25, Z
    2f6c:	9e 01       	movw	r18, r28
    2f6e:	2e 5e       	subi	r18, 0xEE	; 238
    2f70:	3f 4f       	sbci	r19, 0xFF	; 255
    2f72:	83 e0       	ldi	r24, 0x03	; 3
    2f74:	69 2f       	mov	r22, r25
    2f76:	a9 01       	movw	r20, r18
    2f78:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    2f7c:	8a 89       	ldd	r24, Y+18	; 0x12
    2f7e:	88 23       	and	r24, r24
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <KPD_ES_tGetKeyPressed+0x72>
    2f82:	ab c0       	rjmp	.+342    	; 0x30da <KPD_ES_tGetKeyPressed+0x1c8>
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	a0 ea       	ldi	r26, 0xA0	; 160
    2f8a:	b1 e4       	ldi	r27, 0x41	; 65
    2f8c:	8b 87       	std	Y+11, r24	; 0x0b
    2f8e:	9c 87       	std	Y+12, r25	; 0x0c
    2f90:	ad 87       	std	Y+13, r26	; 0x0d
    2f92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	4a e7       	ldi	r20, 0x7A	; 122
    2fa2:	55 e4       	ldi	r21, 0x45	; 69
    2fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	8f 83       	std	Y+7, r24	; 0x07
    2fae:	98 87       	std	Y+8, r25	; 0x08
    2fb0:	a9 87       	std	Y+9, r26	; 0x09
    2fb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb6:	78 85       	ldd	r23, Y+8	; 0x08
    2fb8:	89 85       	ldd	r24, Y+9	; 0x09
    2fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e8       	ldi	r20, 0x80	; 128
    2fc2:	5f e3       	ldi	r21, 0x3F	; 63
    2fc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc8:	88 23       	and	r24, r24
    2fca:	2c f4       	brge	.+10     	; 0x2fd6 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
    2fd4:	3f c0       	rjmp	.+126    	; 0x3054 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    2fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd8:	78 85       	ldd	r23, Y+8	; 0x08
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	3f ef       	ldi	r19, 0xFF	; 255
    2fe2:	4f e7       	ldi	r20, 0x7F	; 127
    2fe4:	57 e4       	ldi	r21, 0x47	; 71
    2fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fea:	18 16       	cp	r1, r24
    2fec:	4c f5       	brge	.+82     	; 0x3040 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e2       	ldi	r20, 0x20	; 32
    2ffc:	51 e4       	ldi	r21, 0x41	; 65
    2ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	bc 01       	movw	r22, r24
    3008:	cd 01       	movw	r24, r26
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	0f c0       	rjmp	.+30     	; 0x3036 <KPD_ES_tGetKeyPressed+0x124>
    3018:	80 e9       	ldi	r24, 0x90	; 144
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	9c 83       	std	Y+4, r25	; 0x04
    301e:	8b 83       	std	Y+3, r24	; 0x03
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <KPD_ES_tGetKeyPressed+0x112>
    3028:	9c 83       	std	Y+4, r25	; 0x04
    302a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302c:	8d 81       	ldd	r24, Y+5	; 0x05
    302e:	9e 81       	ldd	r25, Y+6	; 0x06
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	9e 81       	ldd	r25, Y+6	; 0x06
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	69 f7       	brne	.-38     	; 0x3018 <KPD_ES_tGetKeyPressed+0x106>
    303e:	14 c0       	rjmp	.+40     	; 0x3068 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3040:	6f 81       	ldd	r22, Y+7	; 0x07
    3042:	78 85       	ldd	r23, Y+8	; 0x08
    3044:	89 85       	ldd	r24, Y+9	; 0x09
    3046:	9a 85       	ldd	r25, Y+10	; 0x0a
    3048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	9e 83       	std	Y+6, r25	; 0x06
    3052:	8d 83       	std	Y+5, r24	; 0x05
    3054:	8d 81       	ldd	r24, Y+5	; 0x05
    3056:	9e 81       	ldd	r25, Y+6	; 0x06
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <KPD_ES_tGetKeyPressed+0x14e>
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3068:	88 89       	ldd	r24, Y+16	; 0x10
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	fc 01       	movw	r30, r24
    3070:	e8 51       	subi	r30, 0x18	; 24
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	90 81       	ld	r25, Z
    3076:	9e 01       	movw	r18, r28
    3078:	2e 5e       	subi	r18, 0xEE	; 238
    307a:	3f 4f       	sbci	r19, 0xFF	; 255
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	69 2f       	mov	r22, r25
    3080:	a9 01       	movw	r20, r18
    3082:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_ES_tGetPinValue>
    3086:	0f c0       	rjmp	.+30     	; 0x30a6 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3088:	88 89       	ldd	r24, Y+16	; 0x10
    308a:	88 2f       	mov	r24, r24
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	fc 01       	movw	r30, r24
    3090:	e8 51       	subi	r30, 0x18	; 24
    3092:	fe 4f       	sbci	r31, 0xFE	; 254
    3094:	90 81       	ld	r25, Z
    3096:	9e 01       	movw	r18, r28
    3098:	2e 5e       	subi	r18, 0xEE	; 238
    309a:	3f 4f       	sbci	r19, 0xFF	; 255
    309c:	83 e0       	ldi	r24, 0x03	; 3
    309e:	69 2f       	mov	r22, r25
    30a0:	a9 01       	movw	r20, r18
    30a2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    30a6:	8a 89       	ldd	r24, Y+18	; 0x12
    30a8:	88 23       	and	r24, r24
    30aa:	71 f3       	breq	.-36     	; 0x3088 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    30ac:	89 89       	ldd	r24, Y+17	; 0x11
    30ae:	48 2f       	mov	r20, r24
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	88 89       	ldd	r24, Y+16	; 0x10
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	ca 01       	movw	r24, r20
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	82 0f       	add	r24, r18
    30c4:	93 1f       	adc	r25, r19
    30c6:	fc 01       	movw	r30, r24
    30c8:	ec 52       	subi	r30, 0x2C	; 44
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	80 81       	ld	r24, Z
    30ce:	eb 89       	ldd	r30, Y+19	; 0x13
    30d0:	fc 89       	ldd	r31, Y+20	; 0x14
    30d2:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	8f 87       	std	Y+15, r24	; 0x0f
    30d8:	07 c0       	rjmp	.+14     	; 0x30e8 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    30da:	88 89       	ldd	r24, Y+16	; 0x10
    30dc:	8f 5f       	subi	r24, 0xFF	; 255
    30de:	88 8b       	std	Y+16, r24	; 0x10
    30e0:	88 89       	ldd	r24, Y+16	; 0x10
    30e2:	84 30       	cpi	r24, 0x04	; 4
    30e4:	08 f4       	brcc	.+2      	; 0x30e8 <KPD_ES_tGetKeyPressed+0x1d6>
    30e6:	3b cf       	rjmp	.-394    	; 0x2f5e <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    30e8:	89 89       	ldd	r24, Y+17	; 0x11
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	fc 01       	movw	r30, r24
    30f0:	ec 51       	subi	r30, 0x1C	; 28
    30f2:	fe 4f       	sbci	r31, 0xFE	; 254
    30f4:	90 81       	ld	r25, Z
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	69 2f       	mov	r22, r25
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 4e 0a 	call	0x149c	; 0x149c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3100:	8f 85       	ldd	r24, Y+15	; 0x0f
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	39 f0       	breq	.+14     	; 0x3114 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3106:	89 89       	ldd	r24, Y+17	; 0x11
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	89 8b       	std	Y+17, r24	; 0x11
    310c:	89 89       	ldd	r24, Y+17	; 0x11
    310e:	84 30       	cpi	r24, 0x04	; 4
    3110:	08 f4       	brcc	.+2      	; 0x3114 <KPD_ES_tGetKeyPressed+0x202>
    3112:	17 cf       	rjmp	.-466    	; 0x2f42 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3114:	1d 8a       	std	Y+21, r1	; 0x15
    3116:	02 c0       	rjmp	.+4      	; 0x311c <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	8d 8b       	std	Y+21, r24	; 0x15
    311c:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    311e:	65 96       	adiw	r28, 0x15	; 21
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <main>:
#define BLANK 	0
#define Celsius	1


int main()
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	ad 97       	sbiw	r28, 0x2d	; 45
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    3144:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <DIO_ES_tInit>
	Lcd_ES_tInit();
    3148:	0e 94 d6 11 	call	0x23ac	; 0x23ac <Lcd_ES_tInit>
	ADC_init();
    314c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <ADC_init>
	u8 Blank[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
    3150:	ce 01       	movw	r24, r28
    3152:	44 96       	adiw	r24, 0x14	; 20
    3154:	9d a3       	std	Y+37, r25	; 0x25
    3156:	8c a3       	std	Y+36, r24	; 0x24
    3158:	e4 ef       	ldi	r30, 0xF4	; 244
    315a:	f1 e0       	ldi	r31, 0x01	; 1
    315c:	ff a3       	std	Y+39, r31	; 0x27
    315e:	ee a3       	std	Y+38, r30	; 0x26
    3160:	f8 e0       	ldi	r31, 0x08	; 8
    3162:	f8 a7       	std	Y+40, r31	; 0x28
    3164:	ee a1       	ldd	r30, Y+38	; 0x26
    3166:	ff a1       	ldd	r31, Y+39	; 0x27
    3168:	00 80       	ld	r0, Z
    316a:	8e a1       	ldd	r24, Y+38	; 0x26
    316c:	9f a1       	ldd	r25, Y+39	; 0x27
    316e:	01 96       	adiw	r24, 0x01	; 1
    3170:	9f a3       	std	Y+39, r25	; 0x27
    3172:	8e a3       	std	Y+38, r24	; 0x26
    3174:	ec a1       	ldd	r30, Y+36	; 0x24
    3176:	fd a1       	ldd	r31, Y+37	; 0x25
    3178:	00 82       	st	Z, r0
    317a:	8c a1       	ldd	r24, Y+36	; 0x24
    317c:	9d a1       	ldd	r25, Y+37	; 0x25
    317e:	01 96       	adiw	r24, 0x01	; 1
    3180:	9d a3       	std	Y+37, r25	; 0x25
    3182:	8c a3       	std	Y+36, r24	; 0x24
    3184:	98 a5       	ldd	r25, Y+40	; 0x28
    3186:	91 50       	subi	r25, 0x01	; 1
    3188:	98 a7       	std	Y+40, r25	; 0x28
    318a:	e8 a5       	ldd	r30, Y+40	; 0x28
    318c:	ee 23       	and	r30, r30
    318e:	51 f7       	brne	.-44     	; 0x3164 <main+0x34>
	u8 customChar_Celsius[8] = {0x1C, 0x14, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00};
    3190:	ce 01       	movw	r24, r28
    3192:	4c 96       	adiw	r24, 0x1c	; 28
    3194:	9a a7       	std	Y+42, r25	; 0x2a
    3196:	89 a7       	std	Y+41, r24	; 0x29
    3198:	ec ee       	ldi	r30, 0xEC	; 236
    319a:	f1 e0       	ldi	r31, 0x01	; 1
    319c:	fc a7       	std	Y+44, r31	; 0x2c
    319e:	eb a7       	std	Y+43, r30	; 0x2b
    31a0:	f8 e0       	ldi	r31, 0x08	; 8
    31a2:	fd a7       	std	Y+45, r31	; 0x2d
    31a4:	eb a5       	ldd	r30, Y+43	; 0x2b
    31a6:	fc a5       	ldd	r31, Y+44	; 0x2c
    31a8:	00 80       	ld	r0, Z
    31aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ae:	01 96       	adiw	r24, 0x01	; 1
    31b0:	9c a7       	std	Y+44, r25	; 0x2c
    31b2:	8b a7       	std	Y+43, r24	; 0x2b
    31b4:	e9 a5       	ldd	r30, Y+41	; 0x29
    31b6:	fa a5       	ldd	r31, Y+42	; 0x2a
    31b8:	00 82       	st	Z, r0
    31ba:	89 a5       	ldd	r24, Y+41	; 0x29
    31bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	9a a7       	std	Y+42, r25	; 0x2a
    31c2:	89 a7       	std	Y+41, r24	; 0x29
    31c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    31c6:	91 50       	subi	r25, 0x01	; 1
    31c8:	9d a7       	std	Y+45, r25	; 0x2d
    31ca:	ed a5       	ldd	r30, Y+45	; 0x2d
    31cc:	ee 23       	and	r30, r30
    31ce:	51 f7       	brne	.-44     	; 0x31a4 <main+0x74>


	Lcd_CreateCustomCharacter(Blank,BLANK);
    31d0:	ce 01       	movw	r24, r28
    31d2:	44 96       	adiw	r24, 0x14	; 20
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Lcd_CreateCustomCharacter>
	Lcd_CreateCustomCharacter(customChar_Celsius,Celsius);
    31da:	ce 01       	movw	r24, r28
    31dc:	4c 96       	adiw	r24, 0x1c	; 28
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Lcd_CreateCustomCharacter>


	u16 Lm_read;
	u8 Ldr_Percent,Dashes_Num;

	lcd_ES_tclear();
    31e4:	0e 94 ed 11 	call	0x23da	; 0x23da <lcd_ES_tclear>
	Lcd_ES_tsendString("Lm35 : ");
    31e8:	80 e6       	ldi	r24, 0x60	; 96
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 de 13 	call	0x27bc	; 0x27bc <Lcd_ES_tsendString>
	u8 i;


    while (1)
    {
    	Lcd_ES_tsendString("   ");
    31f0:	88 e6       	ldi	r24, 0x68	; 104
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 de 13 	call	0x27bc	; 0x27bc <Lcd_ES_tsendString>
    	LCD_ES_tGoTo(0, 10);
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	6a e0       	ldi	r22, 0x0A	; 10
    31fc:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_ES_tGoTo>
//    		Lcd_ES_tsendChar(BLANK);
//    	}


    	// Lm35 Application
    	Lm_read = (u16)(ADC_read(ADC0) * 0.488);
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <ADC_read>
    3206:	cc 01       	movw	r24, r24
    3208:	a0 e0       	ldi	r26, 0x00	; 0
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	23 e2       	ldi	r18, 0x23	; 35
    321e:	3b ed       	ldi	r19, 0xDB	; 219
    3220:	49 ef       	ldi	r20, 0xF9	; 249
    3222:	5e e3       	ldi	r21, 0x3E	; 62
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9b 8b       	std	Y+19, r25	; 0x13
    323a:	8a 8b       	std	Y+18, r24	; 0x12
    	Lcd_ES_tdisplayNum(Lm_read);
    323c:	8a 89       	ldd	r24, Y+18	; 0x12
    323e:	9b 89       	ldd	r25, Y+19	; 0x13
    3240:	0e 94 36 14 	call	0x286c	; 0x286c <Lcd_ES_tdisplayNum>
   	Lcd_ES_tsendChar(Celsius);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
    	Lcd_ES_tsendChar('C');
    324a:	83 e4       	ldi	r24, 0x43	; 67
    324c:	0e 94 2a 13 	call	0x2654	; 0x2654 <Lcd_ES_tsendChar>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	aa ef       	ldi	r26, 0xFA	; 250
    3256:	b3 e4       	ldi	r27, 0x43	; 67
    3258:	8b 87       	std	Y+11, r24	; 0x0b
    325a:	9c 87       	std	Y+12, r25	; 0x0c
    325c:	ad 87       	std	Y+13, r26	; 0x0d
    325e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	4a e7       	ldi	r20, 0x7A	; 122
    326e:	55 e4       	ldi	r21, 0x45	; 69
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8f 83       	std	Y+7, r24	; 0x07
    327a:	98 87       	std	Y+8, r25	; 0x08
    327c:	a9 87       	std	Y+9, r26	; 0x09
    327e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <main+0x172>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <main+0x1f0>
	else if (__tmp > 65535)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <main+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    32bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <main+0x1d2>
    32e4:	80 e9       	ldi	r24, 0x90	; 144
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <main+0x1c0>
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <main+0x1b4>
    330a:	72 cf       	rjmp	.-284    	; 0x31f0 <main+0xc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <main+0x1fc>
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	5d cf       	rjmp	.-326    	; 0x31f0 <main+0xc0>

00003336 <__udivmodhi4>:
    3336:	aa 1b       	sub	r26, r26
    3338:	bb 1b       	sub	r27, r27
    333a:	51 e1       	ldi	r21, 0x11	; 17
    333c:	07 c0       	rjmp	.+14     	; 0x334c <__udivmodhi4_ep>

0000333e <__udivmodhi4_loop>:
    333e:	aa 1f       	adc	r26, r26
    3340:	bb 1f       	adc	r27, r27
    3342:	a6 17       	cp	r26, r22
    3344:	b7 07       	cpc	r27, r23
    3346:	10 f0       	brcs	.+4      	; 0x334c <__udivmodhi4_ep>
    3348:	a6 1b       	sub	r26, r22
    334a:	b7 0b       	sbc	r27, r23

0000334c <__udivmodhi4_ep>:
    334c:	88 1f       	adc	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	5a 95       	dec	r21
    3352:	a9 f7       	brne	.-22     	; 0x333e <__udivmodhi4_loop>
    3354:	80 95       	com	r24
    3356:	90 95       	com	r25
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	08 95       	ret

0000335e <__prologue_saves__>:
    335e:	2f 92       	push	r2
    3360:	3f 92       	push	r3
    3362:	4f 92       	push	r4
    3364:	5f 92       	push	r5
    3366:	6f 92       	push	r6
    3368:	7f 92       	push	r7
    336a:	8f 92       	push	r8
    336c:	9f 92       	push	r9
    336e:	af 92       	push	r10
    3370:	bf 92       	push	r11
    3372:	cf 92       	push	r12
    3374:	df 92       	push	r13
    3376:	ef 92       	push	r14
    3378:	ff 92       	push	r15
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	ca 1b       	sub	r28, r26
    3388:	db 0b       	sbc	r29, r27
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	09 94       	ijmp

00003396 <__epilogue_restores__>:
    3396:	2a 88       	ldd	r2, Y+18	; 0x12
    3398:	39 88       	ldd	r3, Y+17	; 0x11
    339a:	48 88       	ldd	r4, Y+16	; 0x10
    339c:	5f 84       	ldd	r5, Y+15	; 0x0f
    339e:	6e 84       	ldd	r6, Y+14	; 0x0e
    33a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33a8:	b9 84       	ldd	r11, Y+9	; 0x09
    33aa:	c8 84       	ldd	r12, Y+8	; 0x08
    33ac:	df 80       	ldd	r13, Y+7	; 0x07
    33ae:	ee 80       	ldd	r14, Y+6	; 0x06
    33b0:	fd 80       	ldd	r15, Y+5	; 0x05
    33b2:	0c 81       	ldd	r16, Y+4	; 0x04
    33b4:	1b 81       	ldd	r17, Y+3	; 0x03
    33b6:	aa 81       	ldd	r26, Y+2	; 0x02
    33b8:	b9 81       	ldd	r27, Y+1	; 0x01
    33ba:	ce 0f       	add	r28, r30
    33bc:	d1 1d       	adc	r29, r1
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	ed 01       	movw	r28, r26
    33ca:	08 95       	ret

000033cc <_exit>:
    33cc:	f8 94       	cli

000033ce <__stop_program>:
    33ce:	ff cf       	rjmp	.-2      	; 0x33ce <__stop_program>
