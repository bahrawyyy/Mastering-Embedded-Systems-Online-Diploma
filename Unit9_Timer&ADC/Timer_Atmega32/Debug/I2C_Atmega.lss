
I2C_Atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003bca  00003c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080012a  0080012a  00003d28  2**0
                  ALLOC
  3 .stab         00003ef4  00000000  00000000  00003d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002211  00000000  00000000  00007c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a11c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d262  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e1e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e626  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eeb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_1>
       8:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_2>
       c:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <main>
      8a:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_Init>:
// 		Initialization
// ==============================================


void UART_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	u8  UCSRC_var=0;
     caa:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_var=0;
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	19 82       	std	Y+1, r1	; 0x01

#if (SPEED_MODE==NORMAL_SPEED)
	CLR_BIT(UCSRA,U2X);
     cb0:	ab e2       	ldi	r26, 0x2B	; 43
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	eb e2       	ldi	r30, 0x2B	; 43
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	8c 93       	st	X, r24
#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
#endif

	// Set URSEL to write data to UCSRC register
	SET_BIT(UCSRC_var,URSEL);
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	80 68       	ori	r24, 0x80	; 128
     cc2:	8b 83       	std	Y+3, r24	; 0x03


#if (SYNCH_MODE==SYNCH)
	SET_BIT(UCSRC_var,UMSEL)
#elif (SYNCH_MODE==ASYNCH)
	CLR_BIT(UCSRC_var,UMSEL);
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	8f 7b       	andi	r24, 0xBF	; 191
     cc8:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if (PARITY_MODE==NO_PARITY)
	CLR_BIT(UCSRC_var,UPM0);
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRC_var,UPM1);
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	8f 7d       	andi	r24, 0xDF	; 223
     cd4:	8b 83       	std	Y+3, r24	; 0x03
#elif (N_DATA_BITS==_7_DATA_BITS)
	CLR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLR_BIT(UCSRB,UCSZ2);
#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSZ2);
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8b 7f       	andi	r24, 0xFB	; 251
     cee:	8c 93       	st	X, r24
	SET_BIT(UCSRC_var,UCSZ1);
	SET_BIT(UCSRB,UCSZ2);
#endif

#if (N_STOP_BITS==ONE_STOP_BIT)
	CLR_BIT(UCSRC_var,USBS);
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	87 7f       	andi	r24, 0xF7	; 247
     cf4:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,USBS);
#endif


	// Set UCSRC value
	UCSRC=UCSRC_var;
     cf6:	e0 e4       	ldi	r30, 0x40	; 64
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	80 83       	st	Z, r24


	// Baud rate
	UBRR_var = BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
     cfe:	80 91 e5 00 	lds	r24, 0x00E5
     d02:	90 91 e6 00 	lds	r25, 0x00E6
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(UBRR_var>>8);
     d0a:	e0 e4       	ldi	r30, 0x40	; 64
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	89 2f       	mov	r24, r25
     d14:	99 27       	eor	r25, r25
     d16:	80 83       	st	Z, r24
	UBRRL = (u8)UBRR_var;
     d18:	e9 e2       	ldi	r30, 0x29	; 41
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	80 83       	st	Z, r24


	// Enabling UART
	//enable UART  receiver
	SET_BIT(UCSRB,RXEN);
     d20:	aa e2       	ldi	r26, 0x2A	; 42
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 61       	ori	r24, 0x10	; 16
     d2c:	8c 93       	st	X, r24
	//enable UART  transmitter
	SET_BIT(UCSRB,TXEN);
     d2e:	aa e2       	ldi	r26, 0x2A	; 42
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e2       	ldi	r30, 0x2A	; 42
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	8c 93       	st	X, r24

}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <UART_SendByteNoBlock>:
// ========================================================



void UART_SendByteNoBlock(u8 data)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     d54:	ec e2       	ldi	r30, 0x2C	; 44
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	80 83       	st	Z, r24
}
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <UART_ReceiveByteNoBlock>:

u8 UART_ReceiveByteNoBlock(void)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
    return UDR;
     d6c:	ec e2       	ldi	r30, 0x2C	; 44
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <UART_Send_Char>:
// ========================================================
// 			Busy Wait Functions
// ========================================================

void UART_Send_Char(u8 data)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the buffer is empty and ready for transmitting
		a new byte so wait until this flag is set to one and it will cleared by
		hardware when u write new data to buffer */
	// Busy wait
	while(!GET_BIT(UCSRA,UDRE));
     d84:	eb e2       	ldi	r30, 0x2B	; 43
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	82 95       	swap	r24
     d8c:	86 95       	lsr	r24
     d8e:	87 70       	andi	r24, 0x07	; 7
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	81 70       	andi	r24, 0x01	; 1
     d96:	90 70       	andi	r25, 0x00	; 0
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	a1 f3       	breq	.-24     	; 0xd84 <UART_Send_Char+0xc>
	UDR = data;
     d9c:	ec e2       	ldi	r30, 0x2C	; 44
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	80 83       	st	Z, r24
}
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <UART_Receive_Char>:


u8 UART_Receive_Char(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receives data so wait until this flag
		is set to one and it will be cleared by hardware when u read data  */
	// The CPU is stucking here
	while(!GET_BIT(UCSRA,RXC));
     db4:	eb e2       	ldi	r30, 0x2B	; 43
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	dc f7       	brge	.-10     	; 0xdb4 <UART_Receive_Char+0x8>
	return UDR;
     dbe:	ec e2       	ldi	r30, 0x2C	; 44
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <UART_Send_String>:


void UART_Send_String(char* string)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <UART_Send_String+0x6>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9b 83       	std	Y+3, r25	; 0x03
     dd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <UART_Send_String+0x30>
	while(string[i] != '\0'){
		UART_Send_Char(string[i]);
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	80 81       	ld	r24, Z
     df0:	0e 94 bc 06 	call	0xd78	; 0xd78 <UART_Send_Char>
		i++;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	89 83       	std	Y+1, r24	; 0x01


void UART_Send_String(char* string)
{
	u8 i=0;
	while(string[i] != '\0'){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	fc 01       	movw	r30, r24
     e06:	e2 0f       	add	r30, r18
     e08:	f3 1f       	adc	r31, r19
     e0a:	80 81       	ld	r24, Z
     e0c:	88 23       	and	r24, r24
     e0e:	39 f7       	brne	.-50     	; 0xdde <UART_Send_String+0x14>
		UART_Send_Char(string[i]);
		i++;
	}
	// Send (Enter) as a terminating char
	UART_Send_Char(DefaultStop);
     e10:	8d e0       	ldi	r24, 0x0D	; 13
     e12:	0e 94 bc 06 	call	0xd78	; 0xd78 <UART_Send_Char>
}
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <UART_Receive_String>:


void UART_Receive_String(char *Buffer)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <UART_Receive_String+0xa>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <UART_Receive_String+0xc>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	9c 83       	std	Y+4, r25	; 0x04
     e34:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
     e36:	1a 82       	std	Y+2, r1	; 0x02
     e38:	19 82       	std	Y+1, r1	; 0x01

    Buffer[i] = UART_Receive_Char();
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	8c 01       	movw	r16, r24
     e44:	02 0f       	add	r16, r18
     e46:	13 1f       	adc	r17, r19
     e48:	0e 94 d6 06 	call	0xdac	; 0xdac <UART_Receive_Char>
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 83       	st	Z, r24
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <UART_Receive_String+0x50>
    while (Buffer[i] != DefaultStop) {
        i++;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
        Buffer[i] = UART_Receive_Char();
     e5c:	29 81       	ldd	r18, Y+1	; 0x01
     e5e:	3a 81       	ldd	r19, Y+2	; 0x02
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	8c 01       	movw	r16, r24
     e66:	02 0f       	add	r16, r18
     e68:	13 1f       	adc	r17, r19
     e6a:	0e 94 d6 06 	call	0xdac	; 0xdac <UART_Receive_Char>
     e6e:	f8 01       	movw	r30, r16
     e70:	80 83       	st	Z, r24
void UART_Receive_String(char *Buffer)
{
    int i = 0;

    Buffer[i] = UART_Receive_Char();
    while (Buffer[i] != DefaultStop) {
     e72:	29 81       	ldd	r18, Y+1	; 0x01
     e74:	3a 81       	ldd	r19, Y+2	; 0x02
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	fc 01       	movw	r30, r24
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	80 81       	ld	r24, Z
     e82:	8d 30       	cpi	r24, 0x0D	; 13
     e84:	31 f7       	brne	.-52     	; 0xe52 <UART_Receive_String+0x30>
        i++;
        Buffer[i] = UART_Receive_Char();

    }

    Buffer[i] = '\0'; // Null-terminate the string
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	f9 01       	movw	r30, r18
     e90:	e8 0f       	add	r30, r24
     e92:	f9 1f       	adc	r31, r25
     e94:	10 82       	st	Z, r1
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <UART_RX_InterruptEnable>:
// ==============================================


// Receive complete
void UART_RX_InterruptEnable(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
     eb0:	aa e2       	ldi	r26, 0x2A	; 42
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e2       	ldi	r30, 0x2A	; 42
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 68       	ori	r24, 0x80	; 128
     ebc:	8c 93       	st	X, r24
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <UART_TX_InterruptEnable>:

// Transmission complete
void UART_TX_InterruptEnable(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
     ecc:	aa e2       	ldi	r26, 0x2A	; 42
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ea e2       	ldi	r30, 0x2A	; 42
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 64       	ori	r24, 0x40	; 64
     ed8:	8c 93       	st	X, r24
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <UART_RX_InterruptDisable>:


// Receive complete
void UART_RX_InterruptDisable(void)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
     ee8:	aa e2       	ldi	r26, 0x2A	; 42
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ea e2       	ldi	r30, 0x2A	; 42
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 77       	andi	r24, 0x7F	; 127
     ef4:	8c 93       	st	X, r24
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <UART_TX_InterruptDisable>:

// Transmission complete
void UART_TX_InterruptDisable(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,TXCIE);
     f04:	aa e2       	ldi	r26, 0x2A	; 42
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e2       	ldi	r30, 0x2A	; 42
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 7b       	andi	r24, 0xBF	; 191
     f10:	8c 93       	st	X, r24
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <UART_RX_SetCallBack>:
// 		Call Back functions
// ==============================================


void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <UART_RX_SetCallBack+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	90 93 30 01 	sts	0x0130, r25
     f2e:	80 93 2f 01 	sts	0x012F, r24
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <UART_TX_SetCallBack+0x6>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	90 93 32 01 	sts	0x0132, r25
     f52:	80 93 31 01 	sts	0x0131, r24
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <__vector_15>:
// 		ISR
// ==============================================


ISR(USART_TXC_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_Fptr!=NULLPTR)
     f8a:	80 91 31 01 	lds	r24, 0x0131
     f8e:	90 91 32 01 	lds	r25, 0x0132
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_15+0x40>
	{
		UART_TX_Fptr();
     f96:	e0 91 31 01 	lds	r30, 0x0131
     f9a:	f0 91 32 01 	lds	r31, 0x0132
     f9e:	09 95       	icall
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_13>:


ISR(USART_RXC_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if(UART_RX_Fptr!=NULLPTR)
     ff0:	80 91 2f 01 	lds	r24, 0x012F
     ff4:	90 91 30 01 	lds	r25, 0x0130
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_13+0x40>
	{
		UART_RX_Fptr();
     ffc:	e0 91 2f 01 	lds	r30, 0x012F
    1000:	f0 91 30 01 	lds	r31, 0x0130
    1004:	09 95       	icall
	}
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <UART_Receive_NoBlock>:


u8 UART_Receive_NoBlock(u8 *pdata)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <UART_Receive_NoBlock+0x6>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9b 83       	std	Y+3, r25	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0;
    103c:	19 82       	std	Y+1, r1	; 0x01
	// Check if any data is received and store it in the passed buffer
	if(GET_BIT(UCSRA,RXC))
    103e:	eb e2       	ldi	r30, 0x2B	; 43
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	4c f4       	brge	.+18     	; 0x105a <UART_Receive_NoBlock+0x2e>
	{
		*pdata = UDR;
    1048:	ec e2       	ldi	r30, 0x2C	; 44
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	ea 81       	ldd	r30, Y+2	; 0x02
    1050:	fb 81       	ldd	r31, Y+3	; 0x03
    1052:	80 83       	st	Z, r24
		status=1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	01 c0       	rjmp	.+2      	; 0x105c <UART_Receive_NoBlock+0x30>
	}else{
		status = 0;
    105a:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <UART_SendString_ASYNCH>:
// 		Asynchronous functions
// ==============================================


void UART_SendString_ASYNCH(u8 *str)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <UART_SendString_ASYNCH+0x6>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str = str;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	90 93 2c 01 	sts	0x012C, r25
    1080:	80 93 2b 01 	sts	0x012B, r24
	UART_Send_Char(str[0]);
    1084:	e9 81       	ldd	r30, Y+1	; 0x01
    1086:	fa 81       	ldd	r31, Y+2	; 0x02
    1088:	80 81       	ld	r24, Z
    108a:	0e 94 bc 06 	call	0xd78	; 0xd78 <UART_Send_Char>

	UART_TX_SetCallBack(Func_TX);
    108e:	82 e5       	ldi	r24, 0x52	; 82
    1090:	98 e0       	ldi	r25, 0x08	; 8
    1092:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_TX_SetCallBack>
	UART_TX_InterruptEnable();
    1096:	0e 94 62 07 	call	0xec4	; 0xec4 <UART_TX_InterruptEnable>
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <Func_TX>:


static void Func_TX(void)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	static u8 i=1;
	if(Asynch_Send_Str[i] != '\0')
    10ac:	20 91 2b 01 	lds	r18, 0x012B
    10b0:	30 91 2c 01 	lds	r19, 0x012C
    10b4:	80 91 68 00 	lds	r24, 0x0068
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	e8 0f       	add	r30, r24
    10c0:	f9 1f       	adc	r31, r25
    10c2:	80 81       	ld	r24, Z
    10c4:	88 23       	and	r24, r24
    10c6:	a1 f0       	breq	.+40     	; 0x10f0 <Func_TX+0x4c>
	{
		UART_SendByteNoBlock(Asynch_Send_Str[i]);
    10c8:	20 91 2b 01 	lds	r18, 0x012B
    10cc:	30 91 2c 01 	lds	r19, 0x012C
    10d0:	80 91 68 00 	lds	r24, 0x0068
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	f9 01       	movw	r30, r18
    10da:	e8 0f       	add	r30, r24
    10dc:	f9 1f       	adc	r31, r25
    10de:	80 81       	ld	r24, Z
    10e0:	0e 94 a4 06 	call	0xd48	; 0xd48 <UART_SendByteNoBlock>
		i++;
    10e4:	80 91 68 00 	lds	r24, 0x0068
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	80 93 68 00 	sts	0x0068, r24
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <Func_TX+0x56>
	}else{
		i=1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 68 00 	sts	0x0068, r24
		UART_TX_InterruptDisable();
    10f6:	0e 94 7e 07 	call	0xefc	; 0xefc <UART_TX_InterruptDisable>
	}
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <UART_ReceiveString_ASYNCH>:

// -----------------------------------------------

void UART_ReceiveString_ASYNCH(u8* str)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <UART_ReceiveString_ASYNCH+0x6>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
	Asynch_receive_str = str;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	90 93 2e 01 	sts	0x012E, r25
    1116:	80 93 2d 01 	sts	0x012D, r24
	UART_RX_InterruptEnable();
    111a:	0e 94 54 07 	call	0xea8	; 0xea8 <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(Receive_Int_Function);
    111e:	88 e9       	ldi	r24, 0x98	; 152
    1120:	98 e0       	ldi	r25, 0x08	; 8
    1122:	0e 94 8c 07 	call	0xf18	; 0xf18 <UART_RX_SetCallBack>
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <Receive_Int_Function>:



static void Receive_Int_Function(void)
{
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	Asynch_receive_str[i] = UART_ReceiveByteNoBlock();
    113c:	20 91 2d 01 	lds	r18, 0x012D
    1140:	30 91 2e 01 	lds	r19, 0x012E
    1144:	80 91 2a 01 	lds	r24, 0x012A
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	89 01       	movw	r16, r18
    114e:	08 0f       	add	r16, r24
    1150:	19 1f       	adc	r17, r25
    1152:	0e 94 b2 06 	call	0xd64	; 0xd64 <UART_ReceiveByteNoBlock>
    1156:	f8 01       	movw	r30, r16
    1158:	80 83       	st	Z, r24
	i++;
    115a:	80 91 2a 01 	lds	r24, 0x012A
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 93 2a 01 	sts	0x012A, r24
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <Timer0_Init>:
#define NULLPTR   ((void*)0)

static void (*Timer0_OVF_Fptr)(void) = NULLPTR;

void Timer0_Init(Timer0Mode_type Mode, Timer0_Prescalar Prescalar,OC0Mode_type Oc0_Mode)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	27 97       	sbiw	r28, 0x07	; 7
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
    1186:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3f 83       	std	Y+7, r19	; 0x07
    1190:	2e 83       	std	Y+6, r18	; 0x06
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	21 f1       	breq	.+72     	; 0x11e4 <Timer0_Init+0x76>
    119c:	2e 81       	ldd	r18, Y+6	; 0x06
    119e:	3f 81       	ldd	r19, Y+7	; 0x07
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <Timer0_Init+0x42>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <Timer0_Init+0x58>
    11ae:	46 c0       	rjmp	.+140    	; 0x123c <Timer0_Init+0xce>
    11b0:	2e 81       	ldd	r18, Y+6	; 0x06
    11b2:	3f 81       	ldd	r19, Y+7	; 0x07
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	21 f1       	breq	.+72     	; 0x1202 <Timer0_Init+0x94>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <Timer0_Init+0xb2>
    11c4:	3b c0       	rjmp	.+118    	; 0x123c <Timer0_Init+0xce>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 7b       	andi	r24, 0xBF	; 191
    11d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	87 7f       	andi	r24, 0xF7	; 247
    11e0:	8c 93       	st	X, r24
    11e2:	2c c0       	rjmp	.+88     	; 0x123c <Timer0_Init+0xce>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    11e4:	a3 e5       	ldi	r26, 0x53	; 83
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e3 e5       	ldi	r30, 0x53	; 83
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	87 7f       	andi	r24, 0xF7	; 247
    11fe:	8c 93       	st	X, r24
    1200:	1d c0       	rjmp	.+58     	; 0x123c <Timer0_Init+0xce>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
    1202:	a3 e5       	ldi	r26, 0x53	; 83
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e3 e5       	ldi	r30, 0x53	; 83
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8f 7b       	andi	r24, 0xBF	; 191
    120e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1210:	a3 e5       	ldi	r26, 0x53	; 83
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e3 e5       	ldi	r30, 0x53	; 83
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 60       	ori	r24, 0x08	; 8
    121c:	8c 93       	st	X, r24
    121e:	0e c0       	rjmp	.+28     	; 0x123c <Timer0_Init+0xce>
		break;
	case TIMER0_FAST_PWM_MODE:
		SET_BIT(TCCR0,WGM00);
    1220:	a3 e5       	ldi	r26, 0x53	; 83
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e3 e5       	ldi	r30, 0x53	; 83
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 64       	ori	r24, 0x40	; 64
    122c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    122e:	a3 e5       	ldi	r26, 0x53	; 83
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	88 60       	ori	r24, 0x08	; 8
    123a:	8c 93       	st	X, r24
		break;
	}

	// To make sure the first three pins are zero
	// in case of old data written
	TCCR0 = TCCR0 & 0xf8;   // 11111000
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 7f       	andi	r24, 0xF8	; 248
    1248:	8c 93       	st	X, r24
	TCCR0 = TCCR0 | Prescalar;
    124a:	a3 e5       	ldi	r26, 0x53	; 83
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e5       	ldi	r30, 0x53	; 83
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	89 2b       	or	r24, r25
    1258:	8c 93       	st	X, r24


	// Hardware pin from OCU (Output compare unit) to output something
	// when there is matching between OCR and TCNT

	switch(Oc0_Mode)
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3d 83       	std	Y+5, r19	; 0x05
    1262:	2c 83       	std	Y+4, r18	; 0x04
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	21 f1       	breq	.+72     	; 0x12b6 <Timer0_Init+0x148>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <Timer0_Init+0x114>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <Timer0_Init+0x12a>
    1280:	46 c0       	rjmp	.+140    	; 0x130e <Timer0_Init+0x1a0>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	21 f1       	breq	.+72     	; 0x12d4 <Timer0_Init+0x166>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	71 f1       	breq	.+92     	; 0x12f2 <Timer0_Init+0x184>
    1296:	3b c0       	rjmp	.+118    	; 0x130e <Timer0_Init+0x1a0>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7e       	andi	r24, 0xEF	; 239
    12a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    12a6:	a3 e5       	ldi	r26, 0x53	; 83
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e3 e5       	ldi	r30, 0x53	; 83
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7d       	andi	r24, 0xDF	; 223
    12b2:	8c 93       	st	X, r24
    12b4:	2c c0       	rjmp	.+88     	; 0x130e <Timer0_Init+0x1a0>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0,COM00);
    12b6:	a3 e5       	ldi	r26, 0x53	; 83
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e3 e5       	ldi	r30, 0x53	; 83
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    12c4:	a3 e5       	ldi	r26, 0x53	; 83
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e3 e5       	ldi	r30, 0x53	; 83
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7d       	andi	r24, 0xDF	; 223
    12d0:	8c 93       	st	X, r24
    12d2:	1d c0       	rjmp	.+58     	; 0x130e <Timer0_Init+0x1a0>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
    12d4:	a3 e5       	ldi	r26, 0x53	; 83
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e3 e5       	ldi	r30, 0x53	; 83
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 7e       	andi	r24, 0xEF	; 239
    12e0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    12e2:	a3 e5       	ldi	r26, 0x53	; 83
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e3 e5       	ldi	r30, 0x53	; 83
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	8c 93       	st	X, r24
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <Timer0_Init+0x1a0>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0,COM00);
    12f2:	a3 e5       	ldi	r26, 0x53	; 83
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e3 e5       	ldi	r30, 0x53	; 83
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 61       	ori	r24, 0x10	; 16
    12fe:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1300:	a3 e5       	ldi	r26, 0x53	; 83
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e3 e5       	ldi	r30, 0x53	; 83
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 62       	ori	r24, 0x20	; 32
    130c:	8c 93       	st	X, r24
		break;
	}


}
    130e:	27 96       	adiw	r28, 0x07	; 7
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <Timer0_OVInterrupt_Enable>:

// Separately, in case you want to run the timer
// without interrupt
void Timer0_OVInterrupt_Enable(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1328:	a9 e5       	ldi	r26, 0x59	; 89
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e5       	ldi	r30, 0x59	; 89
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	81 60       	ori	r24, 0x01	; 1
    1334:	8c 93       	st	X, r24
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    1344:	a9 e5       	ldi	r26, 0x59	; 89
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e9 e5       	ldi	r30, 0x59	; 89
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8e 7f       	andi	r24, 0xFE	; 254
    1350:	8c 93       	st	X, r24
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <Timer0_OVF_SetCallBack>:

void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <Timer0_OVF_SetCallBack+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	90 93 34 01 	sts	0x0134, r25
    136e:	80 93 33 01 	sts	0x0133, r24
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <__vector_11>:


// used in delay
ISR(TIMER0_OVF_vect)
{
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	6f 93       	push	r22
    1390:	7f 93       	push	r23
    1392:	8f 93       	push	r24
    1394:	9f 93       	push	r25
    1396:	af 93       	push	r26
    1398:	bf 93       	push	r27
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULLPTR)
    13a6:	80 91 33 01 	lds	r24, 0x0133
    13aa:	90 91 34 01 	lds	r25, 0x0134
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	29 f0       	breq	.+10     	; 0x13bc <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    13b2:	e0 91 33 01 	lds	r30, 0x0133
    13b6:	f0 91 34 01 	lds	r31, 0x0134
    13ba:	09 95       	icall
	}
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <SPI_Init>:
#include "SPI.h"



void SPI_Init(SPI_Config_t * SPI_Cfg)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <SPI_Init+0x6>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
	if(SPI_Cfg->Device_Mode == SPI_DEVICE_MODE_MASTER)
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	80 81       	ld	r24, Z
    13f6:	80 31       	cpi	r24, 0x10	; 16
    13f8:	09 f0       	breq	.+2      	; 0x13fc <SPI_Init+0x1a>
    13fa:	d8 c0       	rjmp	.+432    	; 0x15ac <SPI_Init+0x1ca>
	{
		// SCK, MOSI, SS Output
		DIO_ES_tSetPinDirection(SPI_REG, SCK, OUTPUT);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	67 e0       	ldi	r22, 0x07	; 7
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, OUTPUT);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, OUTPUT);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	64 e0       	ldi	r22, 0x04	; 4
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>

		// Set MISO pin as INPUT
		DIO_ES_tSetPinDirection(SPI_REG, MISO, INPUT);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	66 e0       	ldi	r22, 0x06	; 6
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>


		SPCR |= SPI_DEVICE_MODE_MASTER;
    1424:	ad e2       	ldi	r26, 0x2D	; 45
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ed e2       	ldi	r30, 0x2D	; 45
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 61       	ori	r24, 0x10	; 16
    1430:	8c 93       	st	X, r24

		// The master is the one who generates the clock
		if(SPI_Cfg->Prescalar == SPI_Prescalar_4){
    1432:	e9 81       	ldd	r30, Y+1	; 0x01
    1434:	fa 81       	ldd	r31, Y+2	; 0x02
    1436:	84 81       	ldd	r24, Z+4	; 0x04
    1438:	88 23       	and	r24, r24
    143a:	b1 f4       	brne	.+44     	; 0x1468 <SPI_Init+0x86>
			CLR_BIT(SPCR,SPR0);
    143c:	ad e2       	ldi	r26, 0x2D	; 45
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ed e2       	ldi	r30, 0x2D	; 45
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    144a:	ad e2       	ldi	r26, 0x2D	; 45
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ed e2       	ldi	r30, 0x2D	; 45
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8d 7f       	andi	r24, 0xFD	; 253
    1456:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1458:	ae e2       	ldi	r26, 0x2E	; 46
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ee e2       	ldi	r30, 0x2E	; 46
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8e 7f       	andi	r24, 0xFE	; 254
    1464:	8c 93       	st	X, r24
    1466:	bd c0       	rjmp	.+378    	; 0x15e2 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_16){
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	84 81       	ldd	r24, Z+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	b1 f4       	brne	.+44     	; 0x149e <SPI_Init+0xbc>
			SET_BIT(SPCR,SPR0);
    1472:	ad e2       	ldi	r26, 0x2D	; 45
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ed e2       	ldi	r30, 0x2D	; 45
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	81 60       	ori	r24, 0x01	; 1
    147e:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1480:	ad e2       	ldi	r26, 0x2D	; 45
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ed e2       	ldi	r30, 0x2D	; 45
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8d 7f       	andi	r24, 0xFD	; 253
    148c:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    148e:	ae e2       	ldi	r26, 0x2E	; 46
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ee e2       	ldi	r30, 0x2E	; 46
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8c 93       	st	X, r24
    149c:	a2 c0       	rjmp	.+324    	; 0x15e2 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_64){
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	84 81       	ldd	r24, Z+4	; 0x04
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	b1 f4       	brne	.+44     	; 0x14d4 <SPI_Init+0xf2>
			CLR_BIT(SPCR,SPR0);
    14a8:	ad e2       	ldi	r26, 0x2D	; 45
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ed e2       	ldi	r30, 0x2D	; 45
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    14b6:	ad e2       	ldi	r26, 0x2D	; 45
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ed e2       	ldi	r30, 0x2D	; 45
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    14c4:	ae e2       	ldi	r26, 0x2E	; 46
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ee e2       	ldi	r30, 0x2E	; 46
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8e 7f       	andi	r24, 0xFE	; 254
    14d0:	8c 93       	st	X, r24
    14d2:	87 c0       	rjmp	.+270    	; 0x15e2 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_128){
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	b1 f4       	brne	.+44     	; 0x150a <SPI_Init+0x128>
			SET_BIT(SPCR,SPR0);
    14de:	ad e2       	ldi	r26, 0x2D	; 45
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ed e2       	ldi	r30, 0x2D	; 45
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	81 60       	ori	r24, 0x01	; 1
    14ea:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    14ec:	ad e2       	ldi	r26, 0x2D	; 45
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ed e2       	ldi	r30, 0x2D	; 45
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	82 60       	ori	r24, 0x02	; 2
    14f8:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    14fa:	ae e2       	ldi	r26, 0x2E	; 46
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ee e2       	ldi	r30, 0x2E	; 46
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	8c 93       	st	X, r24
    1508:	6c c0       	rjmp	.+216    	; 0x15e2 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_2){
    150a:	e9 81       	ldd	r30, Y+1	; 0x01
    150c:	fa 81       	ldd	r31, Y+2	; 0x02
    150e:	84 81       	ldd	r24, Z+4	; 0x04
    1510:	84 30       	cpi	r24, 0x04	; 4
    1512:	b1 f4       	brne	.+44     	; 0x1540 <SPI_Init+0x15e>
			CLR_BIT(SPCR,SPR0);
    1514:	ad e2       	ldi	r26, 0x2D	; 45
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ed e2       	ldi	r30, 0x2D	; 45
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8e 7f       	andi	r24, 0xFE	; 254
    1520:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1522:	ad e2       	ldi	r26, 0x2D	; 45
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ed e2       	ldi	r30, 0x2D	; 45
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8d 7f       	andi	r24, 0xFD	; 253
    152e:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1530:	ae e2       	ldi	r26, 0x2E	; 46
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e2       	ldi	r30, 0x2E	; 46
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
    153e:	51 c0       	rjmp	.+162    	; 0x15e2 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_8){
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	84 81       	ldd	r24, Z+4	; 0x04
    1546:	85 30       	cpi	r24, 0x05	; 5
    1548:	b1 f4       	brne	.+44     	; 0x1576 <SPI_Init+0x194>
			SET_BIT(SPCR,SPR0);
    154a:	ad e2       	ldi	r26, 0x2D	; 45
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ed e2       	ldi	r30, 0x2D	; 45
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	81 60       	ori	r24, 0x01	; 1
    1556:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1558:	ad e2       	ldi	r26, 0x2D	; 45
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ed e2       	ldi	r30, 0x2D	; 45
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8d 7f       	andi	r24, 0xFD	; 253
    1564:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1566:	ae e2       	ldi	r26, 0x2E	; 46
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ee e2       	ldi	r30, 0x2E	; 46
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	8c 93       	st	X, r24
    1574:	36 c0       	rjmp	.+108    	; 0x15e2 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_32){
    1576:	e9 81       	ldd	r30, Y+1	; 0x01
    1578:	fa 81       	ldd	r31, Y+2	; 0x02
    157a:	84 81       	ldd	r24, Z+4	; 0x04
    157c:	86 30       	cpi	r24, 0x06	; 6
    157e:	89 f5       	brne	.+98     	; 0x15e2 <SPI_Init+0x200>
			CLR_BIT(SPCR,SPR0);
    1580:	ad e2       	ldi	r26, 0x2D	; 45
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ed e2       	ldi	r30, 0x2D	; 45
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8e 7f       	andi	r24, 0xFE	; 254
    158c:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    158e:	ad e2       	ldi	r26, 0x2D	; 45
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ed e2       	ldi	r30, 0x2D	; 45
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	82 60       	ori	r24, 0x02	; 2
    159a:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    159c:	ae e2       	ldi	r26, 0x2E	; 46
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ee e2       	ldi	r30, 0x2E	; 46
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	81 60       	ori	r24, 0x01	; 1
    15a8:	8c 93       	st	X, r24
    15aa:	1b c0       	rjmp	.+54     	; 0x15e2 <SPI_Init+0x200>
		}

	}else
	{   // Slave

		DIO_ES_tSetPinDirection(SPI_REG, MISO, OUTPUT);
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	66 e0       	ldi	r22, 0x06	; 6
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>
		// Set SCK, MOSI, and SS pins as INPUT (slave mode doesn't need them as output)
		DIO_ES_tSetPinDirection(SPI_REG, SCK, INPUT);
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	67 e0       	ldi	r22, 0x07	; 7
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, INPUT);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	65 e0       	ldi	r22, 0x05	; 5
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, INPUT);
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	64 e0       	ldi	r22, 0x04	; 4
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_ES_tSetPinDirection>


		SPCR &= SPI_DEVICE_MODE_SLAVE;
    15d4:	ad e2       	ldi	r26, 0x2D	; 45
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ed e2       	ldi	r30, 0x2D	; 45
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8f 7e       	andi	r24, 0xEF	; 239
    15e0:	8c 93       	st	X, r24
	}



	// Common Configurations
	SPCR |= SPI_Cfg->CLK_Polarity;
    15e2:	ad e2       	ldi	r26, 0x2D	; 45
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	ed e2       	ldi	r30, 0x2D	; 45
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	90 81       	ld	r25, Z
    15ec:	e9 81       	ldd	r30, Y+1	; 0x01
    15ee:	fa 81       	ldd	r31, Y+2	; 0x02
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	89 2b       	or	r24, r25
    15f4:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->CLK_PHASE;
    15f6:	ad e2       	ldi	r26, 0x2D	; 45
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ed e2       	ldi	r30, 0x2D	; 45
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	90 81       	ld	r25, Z
    1600:	e9 81       	ldd	r30, Y+1	; 0x01
    1602:	fa 81       	ldd	r31, Y+2	; 0x02
    1604:	83 81       	ldd	r24, Z+3	; 0x03
    1606:	89 2b       	or	r24, r25
    1608:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->Data_Order;
    160a:	ad e2       	ldi	r26, 0x2D	; 45
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ed e2       	ldi	r30, 0x2D	; 45
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	90 81       	ld	r25, Z
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	81 81       	ldd	r24, Z+1	; 0x01
    161a:	89 2b       	or	r24, r25
    161c:	8c 93       	st	X, r24


	// Enable SPI
	SET_BIT(SPCR,SPE);
    161e:	ad e2       	ldi	r26, 0x2D	; 45
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ed e2       	ldi	r30, 0x2D	; 45
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 64       	ori	r24, 0x40	; 64
    162a:	8c 93       	st	X, r24
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <SPI_Transmit_Receive>:




u8 SPI_Transmit_Receive(u8 data)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1642:	ef e2       	ldi	r30, 0x2F	; 47
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    164a:	ee e2       	ldi	r30, 0x2E	; 46
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 23       	and	r24, r24
    1652:	dc f7       	brge	.-10     	; 0x164a <SPI_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
    1654:	ef e2       	ldi	r30, 0x2F	; 47
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z

}
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <I2C_Init>:
#include "I2C.h"



void I2C_Init(unsigned long SCL_Clock)
{
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <I2C_Init+0xa>
    166c:	00 d0       	rcall	.+0      	; 0x166e <I2C_Init+0xc>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	69 83       	std	Y+1, r22	; 0x01
    1674:	7a 83       	std	Y+2, r23	; 0x02
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	9c 83       	std	Y+4, r25	; 0x04
	TWBR = (unsigned char)(((F_CPU/SCL_Clock)-16)/(2*I2C_PRESCALAR));
    167a:	00 e2       	ldi	r16, 0x20	; 32
    167c:	10 e0       	ldi	r17, 0x00	; 0
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	94 e2       	ldi	r25, 0x24	; 36
    1682:	a4 ef       	ldi	r26, 0xF4	; 244
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	3a 81       	ldd	r19, Y+2	; 0x02
    168a:	4b 81       	ldd	r20, Y+3	; 0x03
    168c:	5c 81       	ldd	r21, Y+4	; 0x04
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodsi4>
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	40 97       	sbiw	r24, 0x10	; 16
    169c:	a1 09       	sbc	r26, r1
    169e:	b1 09       	sbc	r27, r1
    16a0:	b6 95       	lsr	r27
    16a2:	a7 95       	ror	r26
    16a4:	97 95       	ror	r25
    16a6:	87 95       	ror	r24
    16a8:	f8 01       	movw	r30, r16
    16aa:	80 83       	st	Z, r24

	switch(I2C_PRESCALAR)
	{
	case I2C_PRESCALAR_1:
		CLR_BIT(TWSR,TWPS0);
    16ac:	a1 e2       	ldi	r26, 0x21	; 33
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e1 e2       	ldi	r30, 0x21	; 33
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8e 7f       	andi	r24, 0xFE	; 254
    16b8:	8c 93       	st	X, r24
		CLR_BIT(TWSR,TWPS1);
    16ba:	a1 e2       	ldi	r26, 0x21	; 33
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e1 e2       	ldi	r30, 0x21	; 33
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	8c 93       	st	X, r24
	case I2C_PRESCALAR_64:
		SET_BIT(TWSR,TWPS0);
		SET_BIT(TWSR,TWPS1);
		break;
	}
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <I2C_Start>:




void I2C_Start(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	// Send start condition
	// Writing a one to TWINT clears the Flag.
	// The TWI will not start any operation as long as the
	// TWINT bit in TWCR is set
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    16e2:	e6 e5       	ldi	r30, 0x56	; 86
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	84 ea       	ldi	r24, 0xA4	; 164
    16e8:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// wait for transmission of START BIT
    16ea:	e6 e5       	ldi	r30, 0x56	; 86
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 23       	and	r24, r24
    16f2:	dc f7       	brge	.-10     	; 0x16ea <I2C_Start+0x10>
	while(TWSR != TWSR_START_TRANSMITTED);	// A START condition has been transmitted
    16f4:	e1 e2       	ldi	r30, 0x21	; 33
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	d9 f7       	brne	.-10     	; 0x16f4 <I2C_Start+0x1a>
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <I2C_Write>:



void I2C_Write(u8 cByte)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
	TWDR = cByte;
    1710:	e3 e2       	ldi	r30, 0x23	; 35
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	80 83       	st	Z, r24
	// Clear TWINT bit in TWCR to start transmission of (address/data)
	TWCR = (1<<TWINT) | (1<<TWEN);
    1718:	e6 e5       	ldi	r30, 0x56	; 86
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	84 e8       	ldi	r24, 0x84	; 132
    171e:	80 83       	st	Z, r24
	//	Wait for TWINT Flag set. This indicates
	//	that the SLA+W has been transmitted,
	//	and ACK/NACK has been received.
	while(!GET_BIT(TWCR,TWINT));
    1720:	e6 e5       	ldi	r30, 0x56	; 86
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	dc f7       	brge	.-10     	; 0x1720 <I2C_Write+0x1c>
}
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <I2C_Stop>:



void I2C_Stop(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    173a:	e6 e5       	ldi	r30, 0x56	; 86
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	84 e9       	ldi	r24, 0x94	; 148
    1740:	80 83       	st	Z, r24
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <I2C_Set_Address>:



void I2C_Set_Address(u8 slaveAddress)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
	//	The TWAR should be loaded with the 7-bit slave address (in the seven most significant
	//	bits of TWAR)
	TWAR = (slaveAddress << 1);
    1754:	e2 e2       	ldi	r30, 0x22	; 34
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	88 0f       	add	r24, r24
    175c:	80 83       	st	Z, r24
}
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <I2C_Slave_Read>:



// Read address and continue to read data byte
u8 I2C_Slave_Read(u8 *status)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <I2C_Slave_Read+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1774:	e6 e5       	ldi	r30, 0x56	; 86
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	84 ec       	ldi	r24, 0xC4	; 196
    177a:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
    177c:	e6 e5       	ldi	r30, 0x56	; 86
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	88 23       	and	r24, r24
    1784:	dc f7       	brge	.-10     	; 0x177c <I2C_Slave_Read+0x16>
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <I2C_Slave_Read+0x2a>
	// Flag is set and a valid status code can be read from TWSR

	while (TWSR != TWSR_Add_ACK_RETURNED) {
		// Handle error, expected SLA+R ACK not received
		*status = TWSR_Add_ACK_RETURNED;
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	80 e6       	ldi	r24, 0x60	; 96
    178e:	80 83       	st	Z, r24
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
	// Flag is set and a valid status code can be read from TWSR

	while (TWSR != TWSR_Add_ACK_RETURNED) {
    1790:	e1 e2       	ldi	r30, 0x21	; 33
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 36       	cpi	r24, 0x60	; 96
    1798:	b9 f7       	brne	.-18     	; 0x1788 <I2C_Slave_Read+0x22>
		// Handle error, expected SLA+R ACK not received
		*status = TWSR_Add_ACK_RETURNED;
	}
	// Continue Listening
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    179a:	e6 e5       	ldi	r30, 0x56	; 86
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	84 ec       	ldi	r24, 0xC4	; 196
    17a0:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));
    17a2:	e6 e5       	ldi	r30, 0x56	; 86
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	88 23       	and	r24, r24
    17aa:	dc f7       	brge	.-10     	; 0x17a2 <I2C_Slave_Read+0x3c>
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <I2C_Slave_Read+0x50>
	// Data has been received ACK has been returned
	while(TWSR != TWSR_Data_ACK_RETURNED){
		*status = TWSR_Data_ACK_RETURNED;
    17ae:	e9 81       	ldd	r30, Y+1	; 0x01
    17b0:	fa 81       	ldd	r31, Y+2	; 0x02
    17b2:	80 e8       	ldi	r24, 0x80	; 128
    17b4:	80 83       	st	Z, r24
	}
	// Continue Listening
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!GET_BIT(TWCR,TWINT));
	// Data has been received ACK has been returned
	while(TWSR != TWSR_Data_ACK_RETURNED){
    17b6:	e1 e2       	ldi	r30, 0x21	; 33
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	80 38       	cpi	r24, 0x80	; 128
    17be:	b9 f7       	brne	.-18     	; 0x17ae <I2C_Slave_Read+0x48>
		*status = TWSR_Data_ACK_RETURNED;
	}

	return TWDR;
    17c0:	e3 e2       	ldi	r30, 0x23	; 35
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <I2C_Read>:


// Just read a byte
u8 I2C_Read(void)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    17d8:	e6 e5       	ldi	r30, 0x56	; 86
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	84 ec       	ldi	r24, 0xC4	; 196
    17de:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
    17e0:	e6 e5       	ldi	r30, 0x56	; 86
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 23       	and	r24, r24
    17e8:	dc f7       	brge	.-10     	; 0x17e0 <I2C_Read+0x10>
	return TWDR;
    17ea:	e3 e2       	ldi	r30, 0x23	; 35
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <EXI_Set_CallBack+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <EXI_Set_CallBack+0x8>
    17fe:	0f 92       	push	r0
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	7b 83       	std	Y+3, r23	; 0x03
    1808:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3d 83       	std	Y+5, r19	; 0x05
    1812:	2c 83       	std	Y+4, r18	; 0x04
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	81 f0       	breq	.+32     	; 0x183e <EXI_Set_CallBack+0x48>
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	3d 81       	ldd	r19, Y+5	; 0x05
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	91 f0       	breq	.+36     	; 0x184c <EXI_Set_CallBack+0x56>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	a1 f4       	brne	.+40     	; 0x1858 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	90 93 36 01 	sts	0x0136, r25
    1838:	80 93 35 01 	sts	0x0135, r24
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	9b 81       	ldd	r25, Y+3	; 0x03
    1842:	90 93 38 01 	sts	0x0138, r25
    1846:	80 93 37 01 	sts	0x0137, r24
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	90 93 3a 01 	sts	0x013A, r25
    1854:	80 93 39 01 	sts	0x0139, r24
		break;
	}
}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <EXI_ENABLE+0x6>
    186e:	0f 92       	push	r0
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3b 83       	std	Y+3, r19	; 0x03
    187e:	2a 83       	std	Y+2, r18	; 0x02
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	9b 81       	ldd	r25, Y+3	; 0x03
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	89 f0       	breq	.+34     	; 0x18ac <EXI_ENABLE+0x44>
    188a:	2a 81       	ldd	r18, Y+2	; 0x02
    188c:	3b 81       	ldd	r19, Y+3	; 0x03
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	a1 f0       	breq	.+40     	; 0x18bc <EXI_ENABLE+0x54>
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	9b 81       	ldd	r25, Y+3	; 0x03
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	b9 f4       	brne	.+46     	; 0x18ca <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    189c:	ab e5       	ldi	r26, 0x5B	; 91
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	eb e5       	ldi	r30, 0x5B	; 91
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	80 64       	ori	r24, 0x40	; 64
    18a8:	8c 93       	st	X, r24
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    18ac:	ab e5       	ldi	r26, 0x5B	; 91
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e5       	ldi	r30, 0x5B	; 91
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	80 68       	ori	r24, 0x80	; 128
    18b8:	8c 93       	st	X, r24
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    18bc:	ab e5       	ldi	r26, 0x5B	; 91
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	eb e5       	ldi	r30, 0x5B	; 91
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 62       	ori	r24, 0x20	; 32
    18c8:	8c 93       	st	X, r24
		break;
	}
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <EXI_DISABLE+0x6>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3b 83       	std	Y+3, r19	; 0x03
    18ec:	2a 83       	std	Y+2, r18	; 0x02
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	89 f0       	breq	.+34     	; 0x191a <EXI_DISABLE+0x44>
    18f8:	2a 81       	ldd	r18, Y+2	; 0x02
    18fa:	3b 81       	ldd	r19, Y+3	; 0x03
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	a1 f0       	breq	.+40     	; 0x192a <EXI_DISABLE+0x54>
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	9b 81       	ldd	r25, Y+3	; 0x03
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	b9 f4       	brne	.+46     	; 0x1938 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    190a:	ab e5       	ldi	r26, 0x5B	; 91
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	eb e5       	ldi	r30, 0x5B	; 91
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8f 7b       	andi	r24, 0xBF	; 191
    1916:	8c 93       	st	X, r24
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    191a:	ab e5       	ldi	r26, 0x5B	; 91
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	eb e5       	ldi	r30, 0x5B	; 91
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 77       	andi	r24, 0x7F	; 127
    1926:	8c 93       	st	X, r24
    1928:	07 c0       	rjmp	.+14     	; 0x1938 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    192a:	ab e5       	ldi	r26, 0x5B	; 91
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	eb e5       	ldi	r30, 0x5B	; 91
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7d       	andi	r24, 0xDF	; 223
    1936:	8c 93       	st	X, r24
		break;
	}
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	2a 97       	sbiw	r28, 0x0a	; 10
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3a 87       	std	Y+10, r19	; 0x0a
    1964:	29 87       	std	Y+9, r18	; 0x09
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	91 05       	cpc	r25, r1
    196e:	09 f4       	brne	.+2      	; 0x1972 <EXI_TriggerEdge+0x2e>
    1970:	66 c0       	rjmp	.+204    	; 0x1a3e <EXI_TriggerEdge+0xfa>
    1972:	29 85       	ldd	r18, Y+9	; 0x09
    1974:	3a 85       	ldd	r19, Y+10	; 0x0a
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <EXI_TriggerEdge+0x3a>
    197c:	bb c0       	rjmp	.+374    	; 0x1af4 <EXI_TriggerEdge+0x1b0>
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	09 f0       	breq	.+2      	; 0x1988 <EXI_TriggerEdge+0x44>
    1986:	dd c0       	rjmp	.+442    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	38 87       	std	Y+8, r19	; 0x08
    1990:	2f 83       	std	Y+7, r18	; 0x07
    1992:	8f 81       	ldd	r24, Y+7	; 0x07
    1994:	98 85       	ldd	r25, Y+8	; 0x08
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	21 f1       	breq	.+72     	; 0x19e4 <EXI_TriggerEdge+0xa0>
    199c:	2f 81       	ldd	r18, Y+7	; 0x07
    199e:	38 85       	ldd	r19, Y+8	; 0x08
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <EXI_TriggerEdge+0x6c>
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <EXI_TriggerEdge+0x82>
    19ae:	c9 c0       	rjmp	.+402    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
    19b0:	2f 81       	ldd	r18, Y+7	; 0x07
    19b2:	38 85       	ldd	r19, Y+8	; 0x08
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	21 f1       	breq	.+72     	; 0x1a02 <EXI_TriggerEdge+0xbe>
    19ba:	8f 81       	ldd	r24, Y+7	; 0x07
    19bc:	98 85       	ldd	r25, Y+8	; 0x08
    19be:	83 30       	cpi	r24, 0x03	; 3
    19c0:	91 05       	cpc	r25, r1
    19c2:	71 f1       	breq	.+92     	; 0x1a20 <EXI_TriggerEdge+0xdc>
    19c4:	be c0       	rjmp	.+380    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    19d4:	a5 e5       	ldi	r26, 0x55	; 85
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e5       	ldi	r30, 0x55	; 85
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	8c 93       	st	X, r24
    19e2:	af c0       	rjmp	.+350    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    19f2:	a5 e5       	ldi	r26, 0x55	; 85
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e5       	ldi	r30, 0x55	; 85
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8d 7f       	andi	r24, 0xFD	; 253
    19fe:	8c 93       	st	X, r24
    1a00:	a0 c0       	rjmp	.+320    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    1a02:	a5 e5       	ldi	r26, 0x55	; 85
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e5       	ldi	r30, 0x55	; 85
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8e 7f       	andi	r24, 0xFE	; 254
    1a0e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1a10:	a5 e5       	ldi	r26, 0x55	; 85
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e5       	ldi	r30, 0x55	; 85
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	8c 93       	st	X, r24
    1a1e:	91 c0       	rjmp	.+290    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1a20:	a5 e5       	ldi	r26, 0x55	; 85
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e5       	ldi	r30, 0x55	; 85
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	81 60       	ori	r24, 0x01	; 1
    1a2c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1a2e:	a5 e5       	ldi	r26, 0x55	; 85
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e5       	ldi	r30, 0x55	; 85
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	82 60       	ori	r24, 0x02	; 2
    1a3a:	8c 93       	st	X, r24
    1a3c:	82 c0       	rjmp	.+260    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3e 83       	std	Y+6, r19	; 0x06
    1a46:	2d 83       	std	Y+5, r18	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	21 f1       	breq	.+72     	; 0x1a9a <EXI_TriggerEdge+0x156>
    1a52:	2d 81       	ldd	r18, Y+5	; 0x05
    1a54:	3e 81       	ldd	r19, Y+6	; 0x06
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <EXI_TriggerEdge+0x122>
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <EXI_TriggerEdge+0x138>
    1a64:	6e c0       	rjmp	.+220    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
    1a66:	2d 81       	ldd	r18, Y+5	; 0x05
    1a68:	3e 81       	ldd	r19, Y+6	; 0x06
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	21 f1       	breq	.+72     	; 0x1ab8 <EXI_TriggerEdge+0x174>
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	71 f1       	breq	.+92     	; 0x1ad6 <EXI_TriggerEdge+0x192>
    1a7a:	63 c0       	rjmp	.+198    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	87 7f       	andi	r24, 0xF7	; 247
    1a96:	8c 93       	st	X, r24
    1a98:	54 c0       	rjmp	.+168    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1a9a:	a5 e5       	ldi	r26, 0x55	; 85
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e5       	ldi	r30, 0x55	; 85
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	84 60       	ori	r24, 0x04	; 4
    1aa6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1aa8:	a5 e5       	ldi	r26, 0x55	; 85
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e5       	ldi	r30, 0x55	; 85
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	87 7f       	andi	r24, 0xF7	; 247
    1ab4:	8c 93       	st	X, r24
    1ab6:	45 c0       	rjmp	.+138    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    1ab8:	a5 e5       	ldi	r26, 0x55	; 85
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e5       	ldi	r30, 0x55	; 85
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8b 7f       	andi	r24, 0xFB	; 251
    1ac4:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1ac6:	a5 e5       	ldi	r26, 0x55	; 85
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e5       	ldi	r30, 0x55	; 85
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 60       	ori	r24, 0x08	; 8
    1ad2:	8c 93       	st	X, r24
    1ad4:	36 c0       	rjmp	.+108    	; 0x1b42 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1ad6:	a5 e5       	ldi	r26, 0x55	; 85
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	84 60       	ori	r24, 0x04	; 4
    1ae2:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1ae4:	a5 e5       	ldi	r26, 0x55	; 85
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e5       	ldi	r30, 0x55	; 85
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 60       	ori	r24, 0x08	; 8
    1af0:	8c 93       	st	X, r24
    1af2:	27 c0       	rjmp	.+78     	; 0x1b42 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	3c 83       	std	Y+4, r19	; 0x04
    1afc:	2b 83       	std	Y+3, r18	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	91 05       	cpc	r25, r1
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <EXI_TriggerEdge+0x1d0>
    1b08:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0c:	23 30       	cpi	r18, 0x03	; 3
    1b0e:	31 05       	cpc	r19, r1
    1b10:	49 f0       	breq	.+18     	; 0x1b24 <EXI_TriggerEdge+0x1e0>
    1b12:	10 c0       	rjmp	.+32     	; 0x1b34 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    1b14:	a4 e5       	ldi	r26, 0x54	; 84
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e4 e5       	ldi	r30, 0x54	; 84
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8f 7b       	andi	r24, 0xBF	; 191
    1b20:	8c 93       	st	X, r24
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1b24:	a4 e5       	ldi	r26, 0x54	; 84
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e4 e5       	ldi	r30, 0x54	; 84
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	8c 93       	st	X, r24
    1b32:	07 c0       	rjmp	.+14     	; 0x1b42 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1b34:	a4 e5       	ldi	r26, 0x54	; 84
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e4 e5       	ldi	r30, 0x54	; 84
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8f 7b       	andi	r24, 0xBF	; 191
    1b40:	8c 93       	st	X, r24
				}
				break;
	}
}
    1b42:	2a 96       	adiw	r28, 0x0a	; 10
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	0f 92       	push	r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1b7e:	80 91 35 01 	lds	r24, 0x0135
    1b82:	90 91 36 01 	lds	r25, 0x0136
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <__vector_1+0x40>
		INT0_Fptr();
    1b8a:	e0 91 35 01 	lds	r30, 0x0135
    1b8e:	f0 91 36 01 	lds	r31, 0x0136
    1b92:	09 95       	icall
	}
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <__vector_2>:

ISR(INT1_vect){
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	0f 92       	push	r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	ef 93       	push	r30
    1bda:	ff 93       	push	r31
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1be4:	80 91 37 01 	lds	r24, 0x0137
    1be8:	90 91 38 01 	lds	r25, 0x0138
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <__vector_2+0x40>
		INT1_Fptr();
    1bf0:	e0 91 37 01 	lds	r30, 0x0137
    1bf4:	f0 91 38 01 	lds	r31, 0x0138
    1bf8:	09 95       	icall
	}
}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	ff 91       	pop	r31
    1c00:	ef 91       	pop	r30
    1c02:	bf 91       	pop	r27
    1c04:	af 91       	pop	r26
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	7f 91       	pop	r23
    1c0c:	6f 91       	pop	r22
    1c0e:	5f 91       	pop	r21
    1c10:	4f 91       	pop	r20
    1c12:	3f 91       	pop	r19
    1c14:	2f 91       	pop	r18
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	0f 90       	pop	r0
    1c1c:	1f 90       	pop	r1
    1c1e:	18 95       	reti

00001c20 <__vector_3>:

ISR(INT2_vect){
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	0f 92       	push	r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	2f 93       	push	r18
    1c2c:	3f 93       	push	r19
    1c2e:	4f 93       	push	r20
    1c30:	5f 93       	push	r21
    1c32:	6f 93       	push	r22
    1c34:	7f 93       	push	r23
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	af 93       	push	r26
    1c3c:	bf 93       	push	r27
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1c4a:	80 91 39 01 	lds	r24, 0x0139
    1c4e:	90 91 3a 01 	lds	r25, 0x013A
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <__vector_3+0x40>
		INT2_Fptr();
    1c56:	e0 91 39 01 	lds	r30, 0x0139
    1c5a:	f0 91 3a 01 	lds	r31, 0x013A
    1c5e:	09 95       	icall
	}
}
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	ff 91       	pop	r31
    1c66:	ef 91       	pop	r30
    1c68:	bf 91       	pop	r27
    1c6a:	af 91       	pop	r26
    1c6c:	9f 91       	pop	r25
    1c6e:	8f 91       	pop	r24
    1c70:	7f 91       	pop	r23
    1c72:	6f 91       	pop	r22
    1c74:	5f 91       	pop	r21
    1c76:	4f 91       	pop	r20
    1c78:	3f 91       	pop	r19
    1c7a:	2f 91       	pop	r18
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f 90       	pop	r0
    1c82:	1f 90       	pop	r1
    1c84:	18 95       	reti

00001c86 <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_ES_tSetPinDirection+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_ES_tSetPinDirection+0x8>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	6a 83       	std	Y+2, r22	; 0x02
    1c96:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	88 30       	cpi	r24, 0x08	; 8
    1c9c:	18 f0       	brcs	.+6      	; 0x1ca4 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	8c 83       	std	Y+4, r24	; 0x04
    1ca2:	d8 c0       	rjmp	.+432    	; 0x1e54 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	88 23       	and	r24, r24
    1ca8:	91 f5       	brne	.+100    	; 0x1d0e <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	a1 f4       	brne	.+40     	; 0x1cd8 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1cb0:	aa e3       	ldi	r26, 0x3A	; 58
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ea e3       	ldi	r30, 0x3A	; 58
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <DIO_ES_tSetPinDirection+0x48>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <DIO_ES_tSetPinDirection+0x44>
    1cd2:	84 2b       	or	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	bd c0       	rjmp	.+378    	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 23       	and	r24, r24
    1cdc:	a9 f4       	brne	.+42     	; 0x1d08 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1cde:	aa e3       	ldi	r26, 0x3A	; 58
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	ea e3       	ldi	r30, 0x3A	; 58
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_ES_tSetPinDirection+0x76>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_ES_tSetPinDirection+0x72>
    1d00:	80 95       	com	r24
    1d02:	84 23       	and	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	a5 c0       	rjmp	.+330    	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	8c 83       	std	Y+4, r24	; 0x04
    1d0c:	a3 c0       	rjmp	.+326    	; 0x1e54 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	91 f5       	brne	.+100    	; 0x1d78 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	a1 f4       	brne	.+40     	; 0x1d42 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1d1a:	a7 e3       	ldi	r26, 0x37	; 55
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e7 e3       	ldi	r30, 0x37	; 55
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <DIO_ES_tSetPinDirection+0xb2>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <DIO_ES_tSetPinDirection+0xae>
    1d3c:	84 2b       	or	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	88 c0       	rjmp	.+272    	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	88 23       	and	r24, r24
    1d46:	a9 f4       	brne	.+42     	; 0x1d72 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1d48:	a7 e3       	ldi	r26, 0x37	; 55
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e7 e3       	ldi	r30, 0x37	; 55
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_ES_tSetPinDirection+0xe0>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_ES_tSetPinDirection+0xdc>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	70 c0       	rjmp	.+224    	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	8c 83       	std	Y+4, r24	; 0x04
    1d76:	6e c0       	rjmp	.+220    	; 0x1e54 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	91 f5       	brne	.+100    	; 0x1de2 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	a1 f4       	brne	.+40     	; 0x1dac <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1d84:	a4 e3       	ldi	r26, 0x34	; 52
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e4 e3       	ldi	r30, 0x34	; 52
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_ES_tSetPinDirection+0x11c>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_ES_tSetPinDirection+0x118>
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	53 c0       	rjmp	.+166    	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 23       	and	r24, r24
    1db0:	a9 f4       	brne	.+42     	; 0x1ddc <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1db2:	a4 e3       	ldi	r26, 0x34	; 52
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e4 e3       	ldi	r30, 0x34	; 52
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_ES_tSetPinDirection+0x14a>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_ES_tSetPinDirection+0x146>
    1dd4:	80 95       	com	r24
    1dd6:	84 23       	and	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	3b c0       	rjmp	.+118    	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	8c 83       	std	Y+4, r24	; 0x04
    1de0:	39 c0       	rjmp	.+114    	; 0x1e54 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	83 30       	cpi	r24, 0x03	; 3
    1de6:	91 f5       	brne	.+100    	; 0x1e4c <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	a1 f4       	brne	.+40     	; 0x1e16 <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1dee:	a1 e3       	ldi	r26, 0x31	; 49
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e1 e3       	ldi	r30, 0x31	; 49
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_ES_tSetPinDirection+0x186>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_ES_tSetPinDirection+0x182>
    1e10:	84 2b       	or	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	1e c0       	rjmp	.+60     	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	88 23       	and	r24, r24
    1e1a:	a9 f4       	brne	.+42     	; 0x1e46 <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1e1c:	a1 e3       	ldi	r26, 0x31	; 49
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e1 e3       	ldi	r30, 0x31	; 49
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_ES_tSetPinDirection+0x1b4>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_ES_tSetPinDirection+0x1b0>
    1e3e:	80 95       	com	r24
    1e40:	84 23       	and	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	8c 83       	std	Y+4, r24	; 0x04
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	8c 83       	std	Y+4, r24	; 0x04
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    1e52:	1c 82       	std	Y+4, r1	; 0x04
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_ES_tSetPinValue+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <DIO_ES_tSetPinValue+0x8>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	6a 83       	std	Y+2, r22	; 0x02
    1e74:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	88 30       	cpi	r24, 0x08	; 8
    1e7a:	18 f0       	brcs	.+6      	; 0x1e82 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	8c 83       	std	Y+4, r24	; 0x04
    1e80:	d8 c0       	rjmp	.+432    	; 0x2032 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	88 23       	and	r24, r24
    1e86:	91 f5       	brne	.+100    	; 0x1eec <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	a1 f4       	brne	.+40     	; 0x1eb6 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1e8e:	ab e3       	ldi	r26, 0x3B	; 59
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	eb e3       	ldi	r30, 0x3B	; 59
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_ES_tSetPinValue+0x48>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_ES_tSetPinValue+0x44>
    1eb0:	84 2b       	or	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	bd c0       	rjmp	.+378    	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	88 23       	and	r24, r24
    1eba:	a9 f4       	brne	.+42     	; 0x1ee6 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1ebc:	ab e3       	ldi	r26, 0x3B	; 59
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	eb e3       	ldi	r30, 0x3B	; 59
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_ES_tSetPinValue+0x76>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_ES_tSetPinValue+0x72>
    1ede:	80 95       	com	r24
    1ee0:	84 23       	and	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	a5 c0       	rjmp	.+330    	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    1eea:	a3 c0       	rjmp	.+326    	; 0x2032 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 f5       	brne	.+100    	; 0x1f56 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	a1 f4       	brne	.+40     	; 0x1f20 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1ef8:	a8 e3       	ldi	r26, 0x38	; 56
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e8 e3       	ldi	r30, 0x38	; 56
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	48 2f       	mov	r20, r24
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_ES_tSetPinValue+0xb2>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_ES_tSetPinValue+0xae>
    1f1a:	84 2b       	or	r24, r20
    1f1c:	8c 93       	st	X, r24
    1f1e:	88 c0       	rjmp	.+272    	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	88 23       	and	r24, r24
    1f24:	a9 f4       	brne	.+42     	; 0x1f50 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1f26:	a8 e3       	ldi	r26, 0x38	; 56
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e8 e3       	ldi	r30, 0x38	; 56
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_ES_tSetPinValue+0xe0>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_ES_tSetPinValue+0xdc>
    1f48:	80 95       	com	r24
    1f4a:	84 23       	and	r24, r20
    1f4c:	8c 93       	st	X, r24
    1f4e:	70 c0       	rjmp	.+224    	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	8c 83       	std	Y+4, r24	; 0x04
    1f54:	6e c0       	rjmp	.+220    	; 0x2032 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	91 f5       	brne	.+100    	; 0x1fc0 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	a1 f4       	brne	.+40     	; 0x1f8a <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1f62:	a5 e3       	ldi	r26, 0x35	; 53
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e5 e3       	ldi	r30, 0x35	; 53
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <DIO_ES_tSetPinValue+0x11c>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <DIO_ES_tSetPinValue+0x118>
    1f84:	84 2b       	or	r24, r20
    1f86:	8c 93       	st	X, r24
    1f88:	53 c0       	rjmp	.+166    	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	88 23       	and	r24, r24
    1f8e:	a9 f4       	brne	.+42     	; 0x1fba <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1f90:	a5 e3       	ldi	r26, 0x35	; 53
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e3       	ldi	r30, 0x35	; 53
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 2e       	mov	r0, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_ES_tSetPinValue+0x14a>
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_ES_tSetPinValue+0x146>
    1fb2:	80 95       	com	r24
    1fb4:	84 23       	and	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	3b c0       	rjmp	.+118    	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	8c 83       	std	Y+4, r24	; 0x04
    1fbe:	39 c0       	rjmp	.+114    	; 0x2032 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	91 f5       	brne	.+100    	; 0x202a <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	a1 f4       	brne	.+40     	; 0x1ff4 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1fcc:	a2 e3       	ldi	r26, 0x32	; 50
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e2 e3       	ldi	r30, 0x32	; 50
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <DIO_ES_tSetPinValue+0x186>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <DIO_ES_tSetPinValue+0x182>
    1fee:	84 2b       	or	r24, r20
    1ff0:	8c 93       	st	X, r24
    1ff2:	1e c0       	rjmp	.+60     	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	88 23       	and	r24, r24
    1ff8:	a9 f4       	brne	.+42     	; 0x2024 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1ffa:	a2 e3       	ldi	r26, 0x32	; 50
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e2 e3       	ldi	r30, 0x32	; 50
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 2e       	mov	r0, r18
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <DIO_ES_tSetPinValue+0x1b4>
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	0a 94       	dec	r0
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <DIO_ES_tSetPinValue+0x1b0>
    201c:	80 95       	com	r24
    201e:	84 23       	and	r24, r20
    2020:	8c 93       	st	X, r24
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	8c 83       	std	Y+4, r24	; 0x04
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    2030:	1c 82       	std	Y+4, r1	; 0x04
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <DIO_ES_tGetPinValue+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <DIO_ES_tGetPinValue+0x8>
    204a:	0f 92       	push	r0
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	6a 83       	std	Y+2, r22	; 0x02
    2054:	5c 83       	std	Y+4, r21	; 0x04
    2056:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	88 30       	cpi	r24, 0x08	; 8
    205c:	18 f0       	brcs	.+6      	; 0x2064 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	4d 83       	std	Y+5, r20	; 0x05
    2062:	60 c0       	rjmp	.+192    	; 0x2124 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	88 23       	and	r24, r24
    2068:	a1 f4       	brne	.+40     	; 0x2092 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    206a:	e9 e3       	ldi	r30, 0x39	; 57
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a9 01       	movw	r20, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_ES_tGetPinValue+0x40>
    207e:	55 95       	asr	r21
    2080:	47 95       	ror	r20
    2082:	8a 95       	dec	r24
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_ES_tGetPinValue+0x3c>
    2086:	ca 01       	movw	r24, r20
    2088:	81 70       	andi	r24, 0x01	; 1
    208a:	eb 81       	ldd	r30, Y+3	; 0x03
    208c:	fc 81       	ldd	r31, Y+4	; 0x04
    208e:	80 83       	st	Z, r24
    2090:	48 c0       	rjmp	.+144    	; 0x2122 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	a1 f4       	brne	.+40     	; 0x20c0 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    2098:	e6 e3       	ldi	r30, 0x36	; 54
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a9 01       	movw	r20, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <DIO_ES_tGetPinValue+0x6e>
    20ac:	55 95       	asr	r21
    20ae:	47 95       	ror	r20
    20b0:	8a 95       	dec	r24
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <DIO_ES_tGetPinValue+0x6a>
    20b4:	ca 01       	movw	r24, r20
    20b6:	81 70       	andi	r24, 0x01	; 1
    20b8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ba:	fc 81       	ldd	r31, Y+4	; 0x04
    20bc:	80 83       	st	Z, r24
    20be:	31 c0       	rjmp	.+98     	; 0x2122 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	82 30       	cpi	r24, 0x02	; 2
    20c4:	a1 f4       	brne	.+40     	; 0x20ee <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    20c6:	e3 e3       	ldi	r30, 0x33	; 51
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_ES_tGetPinValue+0x9c>
    20da:	55 95       	asr	r21
    20dc:	47 95       	ror	r20
    20de:	8a 95       	dec	r24
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_ES_tGetPinValue+0x98>
    20e2:	ca 01       	movw	r24, r20
    20e4:	81 70       	andi	r24, 0x01	; 1
    20e6:	eb 81       	ldd	r30, Y+3	; 0x03
    20e8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ea:	80 83       	st	Z, r24
    20ec:	1a c0       	rjmp	.+52     	; 0x2122 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	83 30       	cpi	r24, 0x03	; 3
    20f2:	a1 f4       	brne	.+40     	; 0x211c <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    20f4:	e0 e3       	ldi	r30, 0x30	; 48
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a9 01       	movw	r20, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_ES_tGetPinValue+0xca>
    2108:	55 95       	asr	r21
    210a:	47 95       	ror	r20
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_ES_tGetPinValue+0xc6>
    2110:	ca 01       	movw	r24, r20
    2112:	81 70       	andi	r24, 0x01	; 1
    2114:	eb 81       	ldd	r30, Y+3	; 0x03
    2116:	fc 81       	ldd	r31, Y+4	; 0x04
    2118:	80 83       	st	Z, r24
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    211c:	51 e0       	ldi	r21, 0x01	; 1
    211e:	5d 83       	std	Y+5, r21	; 0x05
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    2122:	1d 82       	std	Y+5, r1	; 0x05
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <DIO_ES_tSetPortDirection+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <DIO_ES_tSetPortDirection+0x8>
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	31 f0       	breq	.+12     	; 0x215a <DIO_ES_tSetPortDirection+0x24>
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	19 f0       	breq	.+6      	; 0x215a <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	2d 83       	std	Y+5, r18	; 0x05
    2158:	53 c0       	rjmp	.+166    	; 0x2200 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	3c 83       	std	Y+4, r19	; 0x04
    2162:	2b 83       	std	Y+3, r18	; 0x03
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	91 05       	cpc	r25, r1
    216c:	09 f1       	breq	.+66     	; 0x21b0 <DIO_ES_tSetPortDirection+0x7a>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	2c f4       	brge	.+10     	; 0x2182 <DIO_ES_tSetPortDirection+0x4c>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	61 f0       	breq	.+24     	; 0x2198 <DIO_ES_tSetPortDirection+0x62>
    2180:	3b c0       	rjmp	.+118    	; 0x21f8 <DIO_ES_tSetPortDirection+0xc2>
    2182:	2b 81       	ldd	r18, Y+3	; 0x03
    2184:	3c 81       	ldd	r19, Y+4	; 0x04
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	31 05       	cpc	r19, r1
    218a:	f1 f0       	breq	.+60     	; 0x21c8 <DIO_ES_tSetPortDirection+0x92>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	83 30       	cpi	r24, 0x03	; 3
    2192:	91 05       	cpc	r25, r1
    2194:	29 f1       	breq	.+74     	; 0x21e0 <DIO_ES_tSetPortDirection+0xaa>
    2196:	30 c0       	rjmp	.+96     	; 0x21f8 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	29 f4       	brne	.+10     	; 0x21a8 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    219e:	ea e3       	ldi	r30, 0x3A	; 58
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	80 83       	st	Z, r24
    21a6:	2b c0       	rjmp	.+86     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    21a8:	ea e3       	ldi	r30, 0x3A	; 58
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	10 82       	st	Z, r1
    21ae:	27 c0       	rjmp	.+78     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	29 f4       	brne	.+10     	; 0x21c0 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    21b6:	e7 e3       	ldi	r30, 0x37	; 55
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	8f ef       	ldi	r24, 0xFF	; 255
    21bc:	80 83       	st	Z, r24
    21be:	1f c0       	rjmp	.+62     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    21c0:	e7 e3       	ldi	r30, 0x37	; 55
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	10 82       	st	Z, r1
    21c6:	1b c0       	rjmp	.+54     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    21ce:	e4 e3       	ldi	r30, 0x34	; 52
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	80 83       	st	Z, r24
    21d6:	13 c0       	rjmp	.+38     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    21d8:	e4 e3       	ldi	r30, 0x34	; 52
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	10 82       	st	Z, r1
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	29 f4       	brne	.+10     	; 0x21f0 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    21e6:	e1 e3       	ldi	r30, 0x31	; 49
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8f ef       	ldi	r24, 0xFF	; 255
    21ec:	80 83       	st	Z, r24
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    21f0:	e1 e3       	ldi	r30, 0x31	; 49
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	10 82       	st	Z, r1
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	9d 83       	std	Y+5, r25	; 0x05
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    21fe:	1d 82       	std	Y+5, r1	; 0x05
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <DIO_ES_tSetPortValue+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <DIO_ES_tSetPortValue+0x8>
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	31 f0       	breq	.+12     	; 0x2236 <DIO_ES_tSetPortValue+0x24>
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	88 23       	and	r24, r24
    222e:	19 f0       	breq	.+6      	; 0x2236 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    2230:	21 e0       	ldi	r18, 0x01	; 1
    2232:	2d 83       	std	Y+5, r18	; 0x05
    2234:	53 c0       	rjmp	.+166    	; 0x22dc <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3c 83       	std	Y+4, r19	; 0x04
    223e:	2b 83       	std	Y+3, r18	; 0x03
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	91 05       	cpc	r25, r1
    2248:	09 f1       	breq	.+66     	; 0x228c <DIO_ES_tSetPortValue+0x7a>
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	2c f4       	brge	.+10     	; 0x225e <DIO_ES_tSetPortValue+0x4c>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	61 f0       	breq	.+24     	; 0x2274 <DIO_ES_tSetPortValue+0x62>
    225c:	3b c0       	rjmp	.+118    	; 0x22d4 <DIO_ES_tSetPortValue+0xc2>
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	f1 f0       	breq	.+60     	; 0x22a4 <DIO_ES_tSetPortValue+0x92>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	91 05       	cpc	r25, r1
    2270:	29 f1       	breq	.+74     	; 0x22bc <DIO_ES_tSetPortValue+0xaa>
    2272:	30 c0       	rjmp	.+96     	; 0x22d4 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	29 f4       	brne	.+10     	; 0x2284 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    227a:	eb e3       	ldi	r30, 0x3B	; 59
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	8f ef       	ldi	r24, 0xFF	; 255
    2280:	80 83       	st	Z, r24
    2282:	2b c0       	rjmp	.+86     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    2284:	eb e3       	ldi	r30, 0x3B	; 59
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	10 82       	st	Z, r1
    228a:	27 c0       	rjmp	.+78     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	29 f4       	brne	.+10     	; 0x229c <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    2292:	e8 e3       	ldi	r30, 0x38	; 56
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	8f ef       	ldi	r24, 0xFF	; 255
    2298:	80 83       	st	Z, r24
    229a:	1f c0       	rjmp	.+62     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    229c:	e8 e3       	ldi	r30, 0x38	; 56
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	10 82       	st	Z, r1
    22a2:	1b c0       	rjmp	.+54     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	29 f4       	brne	.+10     	; 0x22b4 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    22aa:	e5 e3       	ldi	r30, 0x35	; 53
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	80 83       	st	Z, r24
    22b2:	13 c0       	rjmp	.+38     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    22b4:	e5 e3       	ldi	r30, 0x35	; 53
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	10 82       	st	Z, r1
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	81 30       	cpi	r24, 0x01	; 1
    22c0:	29 f4       	brne	.+10     	; 0x22cc <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    22c2:	e2 e3       	ldi	r30, 0x32	; 50
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	80 83       	st	Z, r24
    22ca:	07 c0       	rjmp	.+14     	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    22cc:	e2 e3       	ldi	r30, 0x32	; 50
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	10 82       	st	Z, r1
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	9d 83       	std	Y+5, r25	; 0x05
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    22da:	1d 82       	std	Y+5, r1	; 0x05
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <DIO_ES_tTOGPin+0x6>
    22f4:	0f 92       	push	r0
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	88 30       	cpi	r24, 0x08	; 8
    2302:	18 f0       	brcs	.+6      	; 0x230a <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	60 c0       	rjmp	.+192    	; 0x23ca <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	88 23       	and	r24, r24
    230e:	a1 f4       	brne	.+40     	; 0x2338 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    2310:	ab e3       	ldi	r26, 0x3B	; 59
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	eb e3       	ldi	r30, 0x3B	; 59
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	48 2f       	mov	r20, r24
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 2e       	mov	r0, r18
    2328:	02 c0       	rjmp	.+4      	; 0x232e <DIO_ES_tTOGPin+0x40>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	0a 94       	dec	r0
    2330:	e2 f7       	brpl	.-8      	; 0x232a <DIO_ES_tTOGPin+0x3c>
    2332:	84 27       	eor	r24, r20
    2334:	8c 93       	st	X, r24
    2336:	48 c0       	rjmp	.+144    	; 0x23c8 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	a1 f4       	brne	.+40     	; 0x2366 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    233e:	a8 e3       	ldi	r26, 0x38	; 56
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e8 e3       	ldi	r30, 0x38	; 56
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	48 2f       	mov	r20, r24
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <DIO_ES_tTOGPin+0x6e>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <DIO_ES_tTOGPin+0x6a>
    2360:	84 27       	eor	r24, r20
    2362:	8c 93       	st	X, r24
    2364:	31 c0       	rjmp	.+98     	; 0x23c8 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	82 30       	cpi	r24, 0x02	; 2
    236a:	a1 f4       	brne	.+40     	; 0x2394 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    236c:	a5 e3       	ldi	r26, 0x35	; 53
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e5 e3       	ldi	r30, 0x35	; 53
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	48 2f       	mov	r20, r24
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <DIO_ES_tTOGPin+0x9c>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <DIO_ES_tTOGPin+0x98>
    238e:	84 27       	eor	r24, r20
    2390:	8c 93       	st	X, r24
    2392:	1a c0       	rjmp	.+52     	; 0x23c8 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	a1 f4       	brne	.+40     	; 0x23c2 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    239a:	a2 e3       	ldi	r26, 0x32	; 50
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e2 e3       	ldi	r30, 0x32	; 50
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <DIO_ES_tTOGPin+0xca>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <DIO_ES_tTOGPin+0xc6>
    23bc:	84 27       	eor	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	8b 83       	std	Y+3, r24	; 0x03
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    23c8:	1b 82       	std	Y+3, r1	; 0x03
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <DIO_ES_tInit+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    23e4:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    23e6:	1a 82       	std	Y+2, r1	; 0x02
    23e8:	19 82       	std	Y+1, r1	; 0x01
    23ea:	a3 c2       	rjmp	.+1350   	; 0x2932 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	fc 01       	movw	r30, r24
    23fa:	e7 59       	subi	r30, 0x97	; 151
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	88 23       	and	r24, r24
    2402:	09 f0       	breq	.+2      	; 0x2406 <DIO_ES_tInit+0x2e>
    2404:	9b c0       	rjmp	.+310    	; 0x253c <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	9a 81       	ldd	r25, Y+2	; 0x02
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	fc 01       	movw	r30, r24
    2416:	e7 59       	subi	r30, 0x97	; 151
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	e9 f4       	brne	.+58     	; 0x245a <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2420:	aa e3       	ldi	r26, 0x3A	; 58
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	ea e3       	ldi	r30, 0x3A	; 58
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	48 2f       	mov	r20, r24
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	fc 01       	movw	r30, r24
    243a:	e6 59       	subi	r30, 0x96	; 150
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 2e       	mov	r0, r18
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <DIO_ES_tInit+0x78>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <DIO_ES_tInit+0x74>
    2454:	84 2b       	or	r24, r20
    2456:	8c 93       	st	X, r24
    2458:	67 c2       	rjmp	.+1230   	; 0x2928 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    245a:	aa e3       	ldi	r26, 0x3A	; 58
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	ea e3       	ldi	r30, 0x3A	; 58
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	48 2f       	mov	r20, r24
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	fc 01       	movw	r30, r24
    2474:	e6 59       	subi	r30, 0x96	; 150
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_ES_tInit+0xb2>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_ES_tInit+0xae>
    248e:	80 95       	com	r24
    2490:	84 23       	and	r24, r20
    2492:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	fc 01       	movw	r30, r24
    24a2:	e4 59       	subi	r30, 0x94	; 148
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	e9 f4       	brne	.+58     	; 0x24e6 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    24ac:	ab e3       	ldi	r26, 0x3B	; 59
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	eb e3       	ldi	r30, 0x3B	; 59
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	fc 01       	movw	r30, r24
    24c6:	e6 59       	subi	r30, 0x96	; 150
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	02 2e       	mov	r0, r18
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <DIO_ES_tInit+0x104>
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	0a 94       	dec	r0
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <DIO_ES_tInit+0x100>
    24e0:	84 2b       	or	r24, r20
    24e2:	8c 93       	st	X, r24
    24e4:	21 c2       	rjmp	.+1090   	; 0x2928 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	fc 01       	movw	r30, r24
    24f4:	e4 59       	subi	r30, 0x94	; 148
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	88 23       	and	r24, r24
    24fc:	09 f0       	breq	.+2      	; 0x2500 <DIO_ES_tInit+0x128>
    24fe:	14 c2       	rjmp	.+1064   	; 0x2928 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2500:	ab e3       	ldi	r26, 0x3B	; 59
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	eb e3       	ldi	r30, 0x3B	; 59
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	48 2f       	mov	r20, r24
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	fc 01       	movw	r30, r24
    251a:	e6 59       	subi	r30, 0x96	; 150
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	02 2e       	mov	r0, r18
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <DIO_ES_tInit+0x158>
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	0a 94       	dec	r0
    2532:	e2 f7       	brpl	.-8      	; 0x252c <DIO_ES_tInit+0x154>
    2534:	80 95       	com	r24
    2536:	84 23       	and	r24, r20
    2538:	8c 93       	st	X, r24
    253a:	f6 c1       	rjmp	.+1004   	; 0x2928 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	fc 01       	movw	r30, r24
    254a:	e7 59       	subi	r30, 0x97	; 151
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	09 f0       	breq	.+2      	; 0x2556 <DIO_ES_tInit+0x17e>
    2554:	9b c0       	rjmp	.+310    	; 0x268c <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	fc 01       	movw	r30, r24
    2566:	e7 59       	subi	r30, 0x97	; 151
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	e9 f4       	brne	.+58     	; 0x25aa <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2570:	a7 e3       	ldi	r26, 0x37	; 55
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e7 e3       	ldi	r30, 0x37	; 55
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	48 2f       	mov	r20, r24
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	fc 01       	movw	r30, r24
    258a:	e6 59       	subi	r30, 0x96	; 150
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <DIO_ES_tInit+0x1c8>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <DIO_ES_tInit+0x1c4>
    25a4:	84 2b       	or	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	bf c1       	rjmp	.+894    	; 0x2928 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    25aa:	a7 e3       	ldi	r26, 0x37	; 55
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e7 e3       	ldi	r30, 0x37	; 55
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	fc 01       	movw	r30, r24
    25c4:	e6 59       	subi	r30, 0x96	; 150
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	02 2e       	mov	r0, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <DIO_ES_tInit+0x202>
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	0a 94       	dec	r0
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <DIO_ES_tInit+0x1fe>
    25de:	80 95       	com	r24
    25e0:	84 23       	and	r24, r20
    25e2:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	fc 01       	movw	r30, r24
    25f2:	e4 59       	subi	r30, 0x94	; 148
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	e9 f4       	brne	.+58     	; 0x2636 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    25fc:	a8 e3       	ldi	r26, 0x38	; 56
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e8 e3       	ldi	r30, 0x38	; 56
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	48 2f       	mov	r20, r24
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	fc 01       	movw	r30, r24
    2616:	e6 59       	subi	r30, 0x96	; 150
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	02 2e       	mov	r0, r18
    2626:	02 c0       	rjmp	.+4      	; 0x262c <DIO_ES_tInit+0x254>
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	0a 94       	dec	r0
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <DIO_ES_tInit+0x250>
    2630:	84 2b       	or	r24, r20
    2632:	8c 93       	st	X, r24
    2634:	79 c1       	rjmp	.+754    	; 0x2928 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	fc 01       	movw	r30, r24
    2644:	e4 59       	subi	r30, 0x94	; 148
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	88 23       	and	r24, r24
    264c:	09 f0       	breq	.+2      	; 0x2650 <DIO_ES_tInit+0x278>
    264e:	6c c1       	rjmp	.+728    	; 0x2928 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2650:	ab e3       	ldi	r26, 0x3B	; 59
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	eb e3       	ldi	r30, 0x3B	; 59
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	48 2f       	mov	r20, r24
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	fc 01       	movw	r30, r24
    266a:	e6 59       	subi	r30, 0x96	; 150
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	02 2e       	mov	r0, r18
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <DIO_ES_tInit+0x2a8>
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	0a 94       	dec	r0
    2682:	e2 f7       	brpl	.-8      	; 0x267c <DIO_ES_tInit+0x2a4>
    2684:	80 95       	com	r24
    2686:	84 23       	and	r24, r20
    2688:	8c 93       	st	X, r24
    268a:	4e c1       	rjmp	.+668    	; 0x2928 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	9a 81       	ldd	r25, Y+2	; 0x02
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	fc 01       	movw	r30, r24
    269a:	e7 59       	subi	r30, 0x97	; 151
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	82 30       	cpi	r24, 0x02	; 2
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <DIO_ES_tInit+0x2ce>
    26a4:	9b c0       	rjmp	.+310    	; 0x27dc <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	fc 01       	movw	r30, r24
    26b6:	e7 59       	subi	r30, 0x97	; 151
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	81 30       	cpi	r24, 0x01	; 1
    26be:	e9 f4       	brne	.+58     	; 0x26fa <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    26c0:	a4 e3       	ldi	r26, 0x34	; 52
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e4 e3       	ldi	r30, 0x34	; 52
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	48 2f       	mov	r20, r24
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	fc 01       	movw	r30, r24
    26da:	e6 59       	subi	r30, 0x96	; 150
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	02 2e       	mov	r0, r18
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <DIO_ES_tInit+0x318>
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <DIO_ES_tInit+0x314>
    26f4:	84 2b       	or	r24, r20
    26f6:	8c 93       	st	X, r24
    26f8:	17 c1       	rjmp	.+558    	; 0x2928 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    26fa:	a4 e3       	ldi	r26, 0x34	; 52
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e4 e3       	ldi	r30, 0x34	; 52
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	48 2f       	mov	r20, r24
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	fc 01       	movw	r30, r24
    2714:	e6 59       	subi	r30, 0x96	; 150
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <DIO_ES_tInit+0x352>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <DIO_ES_tInit+0x34e>
    272e:	80 95       	com	r24
    2730:	84 23       	and	r24, r20
    2732:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	fc 01       	movw	r30, r24
    2742:	e4 59       	subi	r30, 0x94	; 148
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	e9 f4       	brne	.+58     	; 0x2786 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    274c:	a5 e3       	ldi	r26, 0x35	; 53
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e5 e3       	ldi	r30, 0x35	; 53
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	48 2f       	mov	r20, r24
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	fc 01       	movw	r30, r24
    2766:	e6 59       	subi	r30, 0x96	; 150
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	02 2e       	mov	r0, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <DIO_ES_tInit+0x3a4>
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	0a 94       	dec	r0
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <DIO_ES_tInit+0x3a0>
    2780:	84 2b       	or	r24, r20
    2782:	8c 93       	st	X, r24
    2784:	d1 c0       	rjmp	.+418    	; 0x2928 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	fc 01       	movw	r30, r24
    2794:	e4 59       	subi	r30, 0x94	; 148
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	88 23       	and	r24, r24
    279c:	09 f0       	breq	.+2      	; 0x27a0 <DIO_ES_tInit+0x3c8>
    279e:	c4 c0       	rjmp	.+392    	; 0x2928 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    27a0:	ab e3       	ldi	r26, 0x3B	; 59
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	eb e3       	ldi	r30, 0x3B	; 59
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	48 2f       	mov	r20, r24
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	fc 01       	movw	r30, r24
    27ba:	e6 59       	subi	r30, 0x96	; 150
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	02 2e       	mov	r0, r18
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <DIO_ES_tInit+0x3f8>
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	0a 94       	dec	r0
    27d2:	e2 f7       	brpl	.-8      	; 0x27cc <DIO_ES_tInit+0x3f4>
    27d4:	80 95       	com	r24
    27d6:	84 23       	and	r24, r20
    27d8:	8c 93       	st	X, r24
    27da:	a6 c0       	rjmp	.+332    	; 0x2928 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	fc 01       	movw	r30, r24
    27ea:	e7 59       	subi	r30, 0x97	; 151
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	83 30       	cpi	r24, 0x03	; 3
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <DIO_ES_tInit+0x41e>
    27f4:	99 c0       	rjmp	.+306    	; 0x2928 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	9a 81       	ldd	r25, Y+2	; 0x02
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	fc 01       	movw	r30, r24
    2806:	e7 59       	subi	r30, 0x97	; 151
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	e9 f4       	brne	.+58     	; 0x284a <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2810:	a1 e3       	ldi	r26, 0x31	; 49
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e1 e3       	ldi	r30, 0x31	; 49
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	48 2f       	mov	r20, r24
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	fc 01       	movw	r30, r24
    282a:	e6 59       	subi	r30, 0x96	; 150
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <DIO_ES_tInit+0x468>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <DIO_ES_tInit+0x464>
    2844:	84 2b       	or	r24, r20
    2846:	8c 93       	st	X, r24
    2848:	6f c0       	rjmp	.+222    	; 0x2928 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    284a:	a1 e3       	ldi	r26, 0x31	; 49
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e1 e3       	ldi	r30, 0x31	; 49
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	48 2f       	mov	r20, r24
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	fc 01       	movw	r30, r24
    2864:	e6 59       	subi	r30, 0x96	; 150
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 2e       	mov	r0, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <DIO_ES_tInit+0x4a2>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0a 94       	dec	r0
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <DIO_ES_tInit+0x49e>
    287e:	80 95       	com	r24
    2880:	84 23       	and	r24, r20
    2882:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	fc 01       	movw	r30, r24
    2892:	e4 59       	subi	r30, 0x94	; 148
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 81       	ld	r24, Z
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	e9 f4       	brne	.+58     	; 0x28d6 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    289c:	a2 e3       	ldi	r26, 0x32	; 50
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e2 e3       	ldi	r30, 0x32	; 50
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	48 2f       	mov	r20, r24
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	9a 81       	ldd	r25, Y+2	; 0x02
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	fc 01       	movw	r30, r24
    28b6:	e6 59       	subi	r30, 0x96	; 150
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	02 2e       	mov	r0, r18
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <DIO_ES_tInit+0x4f4>
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <DIO_ES_tInit+0x4f0>
    28d0:	84 2b       	or	r24, r20
    28d2:	8c 93       	st	X, r24
    28d4:	29 c0       	rjmp	.+82     	; 0x2928 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	fc 01       	movw	r30, r24
    28e4:	e4 59       	subi	r30, 0x94	; 148
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	88 23       	and	r24, r24
    28ec:	e9 f4       	brne	.+58     	; 0x2928 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    28ee:	ab e3       	ldi	r26, 0x3B	; 59
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	eb e3       	ldi	r30, 0x3B	; 59
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	48 2f       	mov	r20, r24
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	fc 01       	movw	r30, r24
    2908:	e6 59       	subi	r30, 0x96	; 150
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	02 2e       	mov	r0, r18
    2918:	02 c0       	rjmp	.+4      	; 0x291e <DIO_ES_tInit+0x546>
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	0a 94       	dec	r0
    2920:	e2 f7       	brpl	.-8      	; 0x291a <DIO_ES_tInit+0x542>
    2922:	80 95       	com	r24
    2924:	84 23       	and	r24, r20
    2926:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	88 31       	cpi	r24, 0x18	; 24
    2938:	91 05       	cpc	r25, r1
    293a:	0c f4       	brge	.+2      	; 0x293e <DIO_ES_tInit+0x566>
    293c:	57 cd       	rjmp	.-1362   	; 0x23ec <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    293e:	80 e0       	ldi	r24, 0x00	; 0
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	e0 97       	sbiw	r28, 0x30	; 48
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	62 e0       	ldi	r22, 0x02	; 2
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a0 e2       	ldi	r26, 0x20	; 32
    296e:	b1 e4       	ldi	r27, 0x41	; 65
    2970:	8d a7       	std	Y+45, r24	; 0x2d
    2972:	9e a7       	std	Y+46, r25	; 0x2e
    2974:	af a7       	std	Y+47, r26	; 0x2f
    2976:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2978:	6d a5       	ldd	r22, Y+45	; 0x2d
    297a:	7e a5       	ldd	r23, Y+46	; 0x2e
    297c:	8f a5       	ldd	r24, Y+47	; 0x2f
    297e:	98 a9       	ldd	r25, Y+48	; 0x30
    2980:	2b ea       	ldi	r18, 0xAB	; 171
    2982:	3a ea       	ldi	r19, 0xAA	; 170
    2984:	4a ea       	ldi	r20, 0xAA	; 170
    2986:	50 e4       	ldi	r21, 0x40	; 64
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	89 a7       	std	Y+41, r24	; 0x29
    2992:	9a a7       	std	Y+42, r25	; 0x2a
    2994:	ab a7       	std	Y+43, r26	; 0x2b
    2996:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2998:	69 a5       	ldd	r22, Y+41	; 0x29
    299a:	7a a5       	ldd	r23, Y+42	; 0x2a
    299c:	8b a5       	ldd	r24, Y+43	; 0x2b
    299e:	9c a5       	ldd	r25, Y+44	; 0x2c
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	1c f4       	brge	.+6      	; 0x29b6 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	88 a7       	std	Y+40, r24	; 0x28
    29b4:	91 c0       	rjmp	.+290    	; 0x2ad8 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    29b6:	69 a5       	ldd	r22, Y+41	; 0x29
    29b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    29bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	53 e4       	ldi	r21, 0x43	; 67
    29c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <LCD_ES_tTrigger_Enable+0x86>
    29ce:	7b c0       	rjmp	.+246    	; 0x2ac6 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    29d0:	6d a5       	ldd	r22, Y+45	; 0x2d
    29d2:	7e a5       	ldd	r23, Y+46	; 0x2e
    29d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d6:	98 a9       	ldd	r25, Y+48	; 0x30
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	4a e7       	ldi	r20, 0x7A	; 122
    29de:	54 e4       	ldi	r21, 0x44	; 68
    29e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	8c a3       	std	Y+36, r24	; 0x24
    29ea:	9d a3       	std	Y+37, r25	; 0x25
    29ec:	ae a3       	std	Y+38, r26	; 0x26
    29ee:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6c a1       	ldd	r22, Y+36	; 0x24
    29f2:	7d a1       	ldd	r23, Y+37	; 0x25
    29f4:	8e a1       	ldd	r24, Y+38	; 0x26
    29f6:	9f a1       	ldd	r25, Y+39	; 0x27
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a e7       	ldi	r20, 0x7A	; 122
    29fe:	55 e4       	ldi	r21, 0x45	; 69
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	88 a3       	std	Y+32, r24	; 0x20
    2a0a:	99 a3       	std	Y+33, r25	; 0x21
    2a0c:	aa a3       	std	Y+34, r26	; 0x22
    2a0e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a10:	68 a1       	ldd	r22, Y+32	; 0x20
    2a12:	79 a1       	ldd	r23, Y+33	; 0x21
    2a14:	8a a1       	ldd	r24, Y+34	; 0x22
    2a16:	9b a1       	ldd	r25, Y+35	; 0x23
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a2e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2a32:	68 a1       	ldd	r22, Y+32	; 0x20
    2a34:	79 a1       	ldd	r23, Y+33	; 0x21
    2a36:	8a a1       	ldd	r24, Y+34	; 0x22
    2a38:	9b a1       	ldd	r25, Y+35	; 0x23
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6c a1       	ldd	r22, Y+36	; 0x24
    2a4c:	7d a1       	ldd	r23, Y+37	; 0x25
    2a4e:	8e a1       	ldd	r24, Y+38	; 0x26
    2a50:	9f a1       	ldd	r25, Y+39	; 0x27
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a70:	8e 8f       	std	Y+30, r24	; 0x1e
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_ES_tTrigger_Enable+0x148>
    2a74:	80 e9       	ldi	r24, 0x90	; 144
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	9d 8f       	std	Y+29, r25	; 0x1d
    2a7a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_ES_tTrigger_Enable+0x136>
    2a84:	9d 8f       	std	Y+29, r25	; 0x1d
    2a86:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a90:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_ES_tTrigger_Enable+0x12a>
    2a9a:	24 c0       	rjmp	.+72     	; 0x2ae4 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	68 a1       	ldd	r22, Y+32	; 0x20
    2a9e:	79 a1       	ldd	r23, Y+33	; 0x21
    2aa0:	8a a1       	ldd	r24, Y+34	; 0x22
    2aa2:	9b a1       	ldd	r25, Y+35	; 0x23
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9f 8f       	std	Y+31, r25	; 0x1f
    2aae:	8e 8f       	std	Y+30, r24	; 0x1e
    2ab0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ab4:	9b 8f       	std	Y+27, r25	; 0x1b
    2ab6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ab8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_ES_tTrigger_Enable+0x172>
    2ac0:	9b 8f       	std	Y+27, r25	; 0x1b
    2ac2:	8a 8f       	std	Y+26, r24	; 0x1a
    2ac4:	0f c0       	rjmp	.+30     	; 0x2ae4 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ac6:	69 a5       	ldd	r22, Y+41	; 0x29
    2ac8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2aca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2acc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	88 a7       	std	Y+40, r24	; 0x28
    2ad8:	88 a5       	ldd	r24, Y+40	; 0x28
    2ada:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2adc:	89 8d       	ldd	r24, Y+25	; 0x19
    2ade:	8a 95       	dec	r24
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_ES_tTrigger_Enable+0x194>
    2ae2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	62 e0       	ldi	r22, 0x02	; 2
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	aa ef       	ldi	r26, 0xFA	; 250
    2af4:	b4 e4       	ldi	r27, 0x44	; 68
    2af6:	8d 8b       	std	Y+21, r24	; 0x15
    2af8:	9e 8b       	std	Y+22, r25	; 0x16
    2afa:	af 8b       	std	Y+23, r26	; 0x17
    2afc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2afe:	6d 89       	ldd	r22, Y+21	; 0x15
    2b00:	7e 89       	ldd	r23, Y+22	; 0x16
    2b02:	8f 89       	ldd	r24, Y+23	; 0x17
    2b04:	98 8d       	ldd	r25, Y+24	; 0x18
    2b06:	2b ea       	ldi	r18, 0xAB	; 171
    2b08:	3a ea       	ldi	r19, 0xAA	; 170
    2b0a:	4a ea       	ldi	r20, 0xAA	; 170
    2b0c:	50 e4       	ldi	r21, 0x40	; 64
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	89 8b       	std	Y+17, r24	; 0x11
    2b18:	9a 8b       	std	Y+18, r25	; 0x12
    2b1a:	ab 8b       	std	Y+19, r26	; 0x13
    2b1c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b1e:	69 89       	ldd	r22, Y+17	; 0x11
    2b20:	7a 89       	ldd	r23, Y+18	; 0x12
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	1c f4       	brge	.+6      	; 0x2b3c <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	88 8b       	std	Y+16, r24	; 0x10
    2b3a:	91 c0       	rjmp	.+290    	; 0x2c5e <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2b3c:	69 89       	ldd	r22, Y+17	; 0x11
    2b3e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b40:	8b 89       	ldd	r24, Y+19	; 0x13
    2b42:	9c 89       	ldd	r25, Y+20	; 0x14
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4f e7       	ldi	r20, 0x7F	; 127
    2b4a:	53 e4       	ldi	r21, 0x43	; 67
    2b4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b50:	18 16       	cp	r1, r24
    2b52:	0c f0       	brlt	.+2      	; 0x2b56 <LCD_ES_tTrigger_Enable+0x20c>
    2b54:	7b c0       	rjmp	.+246    	; 0x2c4c <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a e7       	ldi	r20, 0x7A	; 122
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8c 87       	std	Y+12, r24	; 0x0c
    2b70:	9d 87       	std	Y+13, r25	; 0x0d
    2b72:	ae 87       	std	Y+14, r26	; 0x0e
    2b74:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b78:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a e7       	ldi	r20, 0x7A	; 122
    2b84:	55 e4       	ldi	r21, 0x45	; 69
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	88 87       	std	Y+8, r24	; 0x08
    2b90:	99 87       	std	Y+9, r25	; 0x09
    2b92:	aa 87       	std	Y+10, r26	; 0x0a
    2b94:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b96:	68 85       	ldd	r22, Y+8	; 0x08
    2b98:	79 85       	ldd	r23, Y+9	; 0x09
    2b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	2c f4       	brge	.+10     	; 0x2bb8 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9f 83       	std	Y+7, r25	; 0x07
    2bb4:	8e 83       	std	Y+6, r24	; 0x06
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    2bb8:	68 85       	ldd	r22, Y+8	; 0x08
    2bba:	79 85       	ldd	r23, Y+9	; 0x09
    2bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	4c f5       	brge	.+82     	; 0x2c22 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bd2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9f 83       	std	Y+7, r25	; 0x07
    2bf6:	8e 83       	std	Y+6, r24	; 0x06
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <LCD_ES_tTrigger_Enable+0x2ce>
    2bfa:	80 e9       	ldi	r24, 0x90	; 144
    2bfc:	91 e0       	ldi	r25, 0x01	; 1
    2bfe:	9d 83       	std	Y+5, r25	; 0x05
    2c00:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c02:	8c 81       	ldd	r24, Y+4	; 0x04
    2c04:	9d 81       	ldd	r25, Y+5	; 0x05
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <LCD_ES_tTrigger_Enable+0x2bc>
    2c0a:	9d 83       	std	Y+5, r25	; 0x05
    2c0c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c10:	9f 81       	ldd	r25, Y+7	; 0x07
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	9f 83       	std	Y+7, r25	; 0x07
    2c16:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c18:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	69 f7       	brne	.-38     	; 0x2bfa <LCD_ES_tTrigger_Enable+0x2b0>
    2c20:	24 c0       	rjmp	.+72     	; 0x2c6a <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	68 85       	ldd	r22, Y+8	; 0x08
    2c24:	79 85       	ldd	r23, Y+9	; 0x09
    2c26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9f 83       	std	Y+7, r25	; 0x07
    2c34:	8e 83       	std	Y+6, r24	; 0x06
    2c36:	8e 81       	ldd	r24, Y+6	; 0x06
    2c38:	9f 81       	ldd	r25, Y+7	; 0x07
    2c3a:	9b 83       	std	Y+3, r25	; 0x03
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_ES_tTrigger_Enable+0x2f8>
    2c46:	9b 83       	std	Y+3, r25	; 0x03
    2c48:	8a 83       	std	Y+2, r24	; 0x02
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c4c:	69 89       	ldd	r22, Y+17	; 0x11
    2c4e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c50:	8b 89       	ldd	r24, Y+19	; 0x13
    2c52:	9c 89       	ldd	r25, Y+20	; 0x14
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	88 8b       	std	Y+16, r24	; 0x10
    2c5e:	88 89       	ldd	r24, Y+16	; 0x10
    2c60:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	8a 95       	dec	r24
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <LCD_ES_tTrigger_Enable+0x31a>
    2c68:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c6c:	e0 96       	adiw	r28, 0x30	; 48
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2c8c:	88 e2       	ldi	r24, 0x28	; 40
    2c8e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2c92:	8e e0       	ldi	r24, 0x0E	; 14
    2c94:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2c98:	86 e0       	ldi	r24, 0x06	; 6
    2c9a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
	return ES_OK;
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a0 e0       	ldi	r26, 0x00	; 0
    2ccc:	b0 e4       	ldi	r27, 0x40	; 64
    2cce:	8b 87       	std	Y+11, r24	; 0x0b
    2cd0:	9c 87       	std	Y+12, r25	; 0x0c
    2cd2:	ad 87       	std	Y+13, r26	; 0x0d
    2cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a e7       	ldi	r20, 0x7A	; 122
    2ce4:	55 e4       	ldi	r21, 0x45	; 69
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8f 83       	std	Y+7, r24	; 0x07
    2cf0:	98 87       	std	Y+8, r25	; 0x08
    2cf2:	a9 87       	std	Y+9, r26	; 0x09
    2cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	5f e3       	ldi	r21, 0x3F	; 63
    2d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	2c f4       	brge	.+10     	; 0x2d18 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	3f c0       	rjmp	.+126    	; 0x2d96 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    2d18:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1a:	78 85       	ldd	r23, Y+8	; 0x08
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	57 e4       	ldi	r21, 0x47	; 71
    2d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	4c f5       	brge	.+82     	; 0x2d82 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <lcd_ES_tclear+0xcc>
    2d5a:	80 e9       	ldi	r24, 0x90	; 144
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <lcd_ES_tclear+0xba>
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <lcd_ES_tclear+0xae>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9e 83       	std	Y+6, r25	; 0x06
    2d94:	8d 83       	std	Y+5, r24	; 0x05
    2d96:	8d 81       	ldd	r24, Y+5	; 0x05
    2d98:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <lcd_ES_tclear+0xf6>
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2daa:	80 e0       	ldi	r24, 0x00	; 0
}
    2dac:	2e 96       	adiw	r28, 0x0e	; 14
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	0f 92       	push	r0
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	61 e0       	ldi	r22, 0x01	; 1
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	88 23       	and	r24, r24
    2de2:	34 f4       	brge	.+12     	; 0x2df0 <Lcd_ES_tsendCmd+0x32>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	66 e0       	ldi	r22, 0x06	; 6
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <Lcd_ES_tsendCmd+0x3c>
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	66 e0       	ldi	r22, 0x06	; 6
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	82 95       	swap	r24
    2dfe:	86 95       	lsr	r24
    2e00:	86 95       	lsr	r24
    2e02:	83 70       	andi	r24, 0x03	; 3
    2e04:	88 2f       	mov	r24, r24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	81 70       	andi	r24, 0x01	; 1
    2e0a:	90 70       	andi	r25, 0x00	; 0
    2e0c:	88 23       	and	r24, r24
    2e0e:	31 f0       	breq	.+12     	; 0x2e1c <Lcd_ES_tsendCmd+0x5e>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	65 e0       	ldi	r22, 0x05	; 5
    2e14:	41 e0       	ldi	r20, 0x01	; 1
    2e16:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <Lcd_ES_tsendCmd+0x68>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	65 e0       	ldi	r22, 0x05	; 5
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	82 95       	swap	r24
    2e2a:	86 95       	lsr	r24
    2e2c:	87 70       	andi	r24, 0x07	; 7
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	81 70       	andi	r24, 0x01	; 1
    2e34:	90 70       	andi	r25, 0x00	; 0
    2e36:	88 23       	and	r24, r24
    2e38:	31 f0       	breq	.+12     	; 0x2e46 <Lcd_ES_tsendCmd+0x88>
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	64 e0       	ldi	r22, 0x04	; 4
    2e3e:	41 e0       	ldi	r20, 0x01	; 1
    2e40:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <Lcd_ES_tsendCmd+0x92>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	64 e0       	ldi	r22, 0x04	; 4
    2e4a:	40 e0       	ldi	r20, 0x00	; 0
    2e4c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	82 95       	swap	r24
    2e54:	8f 70       	andi	r24, 0x0F	; 15
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	81 70       	andi	r24, 0x01	; 1
    2e5c:	90 70       	andi	r25, 0x00	; 0
    2e5e:	88 23       	and	r24, r24
    2e60:	31 f0       	breq	.+12     	; 0x2e6e <Lcd_ES_tsendCmd+0xb0>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	63 e0       	ldi	r22, 0x03	; 3
    2e66:	41 e0       	ldi	r20, 0x01	; 1
    2e68:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2e6c:	05 c0       	rjmp	.+10     	; 0x2e78 <Lcd_ES_tsendCmd+0xba>
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	63 e0       	ldi	r22, 0x03	; 3
    2e72:	40 e0       	ldi	r20, 0x00	; 0
    2e74:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2e78:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	86 95       	lsr	r24
    2e80:	86 95       	lsr	r24
    2e82:	86 95       	lsr	r24
    2e84:	88 2f       	mov	r24, r24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	81 70       	andi	r24, 0x01	; 1
    2e8a:	90 70       	andi	r25, 0x00	; 0
    2e8c:	88 23       	and	r24, r24
    2e8e:	31 f0       	breq	.+12     	; 0x2e9c <Lcd_ES_tsendCmd+0xde>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	66 e0       	ldi	r22, 0x06	; 6
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2e9a:	05 c0       	rjmp	.+10     	; 0x2ea6 <Lcd_ES_tsendCmd+0xe8>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	66 e0       	ldi	r22, 0x06	; 6
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	86 95       	lsr	r24
    2eaa:	86 95       	lsr	r24
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	90 70       	andi	r25, 0x00	; 0
    2eb4:	88 23       	and	r24, r24
    2eb6:	31 f0       	breq	.+12     	; 0x2ec4 <Lcd_ES_tsendCmd+0x106>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	65 e0       	ldi	r22, 0x05	; 5
    2ebc:	41 e0       	ldi	r20, 0x01	; 1
    2ebe:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2ec2:	05 c0       	rjmp	.+10     	; 0x2ece <Lcd_ES_tsendCmd+0x110>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	65 e0       	ldi	r22, 0x05	; 5
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	86 95       	lsr	r24
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	81 70       	andi	r24, 0x01	; 1
    2ed8:	90 70       	andi	r25, 0x00	; 0
    2eda:	88 23       	and	r24, r24
    2edc:	31 f0       	breq	.+12     	; 0x2eea <Lcd_ES_tsendCmd+0x12c>
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	64 e0       	ldi	r22, 0x04	; 4
    2ee2:	41 e0       	ldi	r20, 0x01	; 1
    2ee4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2ee8:	05 c0       	rjmp	.+10     	; 0x2ef4 <Lcd_ES_tsendCmd+0x136>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	64 e0       	ldi	r22, 0x04	; 4
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	81 70       	andi	r24, 0x01	; 1
    2efc:	90 70       	andi	r25, 0x00	; 0
    2efe:	88 23       	and	r24, r24
    2f00:	31 f0       	breq	.+12     	; 0x2f0e <Lcd_ES_tsendCmd+0x150>
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	63 e0       	ldi	r22, 0x03	; 3
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <Lcd_ES_tsendCmd+0x15a>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	63 e0       	ldi	r22, 0x03	; 3
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2f18:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	0f 92       	push	r0
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	61 e0       	ldi	r22, 0x01	; 1
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	88 23       	and	r24, r24
    2f4a:	34 f4       	brge	.+12     	; 0x2f58 <Lcd_ES_tsendChar+0x32>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	66 e0       	ldi	r22, 0x06	; 6
    2f50:	41 e0       	ldi	r20, 0x01	; 1
    2f52:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <Lcd_ES_tsendChar+0x3c>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	66 e0       	ldi	r22, 0x06	; 6
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	82 95       	swap	r24
    2f66:	86 95       	lsr	r24
    2f68:	86 95       	lsr	r24
    2f6a:	83 70       	andi	r24, 0x03	; 3
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	81 70       	andi	r24, 0x01	; 1
    2f72:	90 70       	andi	r25, 0x00	; 0
    2f74:	88 23       	and	r24, r24
    2f76:	31 f0       	breq	.+12     	; 0x2f84 <Lcd_ES_tsendChar+0x5e>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	65 e0       	ldi	r22, 0x05	; 5
    2f7c:	41 e0       	ldi	r20, 0x01	; 1
    2f7e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <Lcd_ES_tsendChar+0x68>
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	65 e0       	ldi	r22, 0x05	; 5
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	82 95       	swap	r24
    2f92:	86 95       	lsr	r24
    2f94:	87 70       	andi	r24, 0x07	; 7
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	81 70       	andi	r24, 0x01	; 1
    2f9c:	90 70       	andi	r25, 0x00	; 0
    2f9e:	88 23       	and	r24, r24
    2fa0:	31 f0       	breq	.+12     	; 0x2fae <Lcd_ES_tsendChar+0x88>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	64 e0       	ldi	r22, 0x04	; 4
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2fac:	05 c0       	rjmp	.+10     	; 0x2fb8 <Lcd_ES_tsendChar+0x92>
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	64 e0       	ldi	r22, 0x04	; 4
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	82 95       	swap	r24
    2fbc:	8f 70       	andi	r24, 0x0F	; 15
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	81 70       	andi	r24, 0x01	; 1
    2fc4:	90 70       	andi	r25, 0x00	; 0
    2fc6:	88 23       	and	r24, r24
    2fc8:	31 f0       	breq	.+12     	; 0x2fd6 <Lcd_ES_tsendChar+0xb0>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	63 e0       	ldi	r22, 0x03	; 3
    2fce:	41 e0       	ldi	r20, 0x01	; 1
    2fd0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    2fd4:	05 c0       	rjmp	.+10     	; 0x2fe0 <Lcd_ES_tsendChar+0xba>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	63 e0       	ldi	r22, 0x03	; 3
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2fe0:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	86 95       	lsr	r24
    2fe8:	86 95       	lsr	r24
    2fea:	86 95       	lsr	r24
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	81 70       	andi	r24, 0x01	; 1
    2ff2:	90 70       	andi	r25, 0x00	; 0
    2ff4:	88 23       	and	r24, r24
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <Lcd_ES_tsendChar+0xde>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	66 e0       	ldi	r22, 0x06	; 6
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    3002:	05 c0       	rjmp	.+10     	; 0x300e <Lcd_ES_tsendChar+0xe8>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	66 e0       	ldi	r22, 0x06	; 6
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	86 95       	lsr	r24
    3012:	86 95       	lsr	r24
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	81 70       	andi	r24, 0x01	; 1
    301a:	90 70       	andi	r25, 0x00	; 0
    301c:	88 23       	and	r24, r24
    301e:	31 f0       	breq	.+12     	; 0x302c <Lcd_ES_tsendChar+0x106>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	65 e0       	ldi	r22, 0x05	; 5
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <Lcd_ES_tsendChar+0x110>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	65 e0       	ldi	r22, 0x05	; 5
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	86 95       	lsr	r24
    303a:	88 2f       	mov	r24, r24
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	81 70       	andi	r24, 0x01	; 1
    3040:	90 70       	andi	r25, 0x00	; 0
    3042:	88 23       	and	r24, r24
    3044:	31 f0       	breq	.+12     	; 0x3052 <Lcd_ES_tsendChar+0x12c>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	64 e0       	ldi	r22, 0x04	; 4
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    3050:	05 c0       	rjmp	.+10     	; 0x305c <Lcd_ES_tsendChar+0x136>
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	64 e0       	ldi	r22, 0x04	; 4
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	81 70       	andi	r24, 0x01	; 1
    3064:	90 70       	andi	r25, 0x00	; 0
    3066:	88 23       	and	r24, r24
    3068:	31 f0       	breq	.+12     	; 0x3076 <Lcd_ES_tsendChar+0x150>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	63 e0       	ldi	r22, 0x03	; 3
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
    3074:	05 c0       	rjmp	.+10     	; 0x3080 <Lcd_ES_tsendChar+0x15a>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	63 e0       	ldi	r22, 0x03	; 3
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3080:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_ES_tTrigger_Enable>
	return ES_OK;
    3084:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    3086:	0f 90       	pop	r0
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	00 d0       	rcall	.+0      	; 0x3094 <Lcd_ES_tsendString+0x6>
    3094:	0f 92       	push	r0
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	9b 83       	std	Y+3, r25	; 0x03
    309c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	61 e0       	ldi	r22, 0x01	; 1
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    30b2:	19 82       	std	Y+1, r1	; 0x01
    30b4:	0e c0       	rjmp	.+28     	; 0x30d2 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	28 2f       	mov	r18, r24
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	fc 01       	movw	r30, r24
    30c2:	e2 0f       	add	r30, r18
    30c4:	f3 1f       	adc	r31, r19
    30c6:	80 81       	ld	r24, Z
    30c8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Lcd_ES_tsendChar>
		i++;
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	8f 5f       	subi	r24, 0xFF	; 255
    30d0:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	fc 01       	movw	r30, r24
    30de:	e2 0f       	add	r30, r18
    30e0:	f3 1f       	adc	r31, r19
    30e2:	80 81       	ld	r24, Z
    30e4:	88 23       	and	r24, r24
    30e6:	39 f7       	brne	.-50     	; 0x30b6 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    30e8:	80 e0       	ldi	r24, 0x00	; 0
}
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <Lcd_ES_tsendString_xy+0x6>
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <Lcd_ES_tsendString_xy+0x8>
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	9a 83       	std	Y+2, r25	; 0x02
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	6b 83       	std	Y+3, r22	; 0x03
    3108:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	61 e0       	ldi	r22, 0x01	; 1
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	6c 81       	ldd	r22, Y+4	; 0x04
    3122:	0e 94 66 1b 	call	0x36cc	; 0x36cc <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	0e 94 47 18 	call	0x308e	; 0x308e <Lcd_ES_tsendString>
	return ES_OK;
    312e:	80 e0       	ldi	r24, 0x00	; 0

}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	2e 97       	sbiw	r28, 0x0e	; 14
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	9e 87       	std	Y+14, r25	; 0x0e
    3154:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	61 e0       	ldi	r22, 0x01	; 1
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	60 e0       	ldi	r22, 0x00	; 0
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    316a:	1a 82       	std	Y+2, r1	; 0x02
    316c:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    316e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3170:	9e 85       	ldd	r25, Y+14	; 0x0e
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	11 f5       	brne	.+68     	; 0x31ba <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    3176:	80 e3       	ldi	r24, 0x30	; 48
    3178:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Lcd_ES_tsendChar>
    317c:	39 c0       	rjmp	.+114    	; 0x31f0 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	e8 2f       	mov	r30, r24
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	8d 85       	ldd	r24, Y+13	; 0x0d
    3186:	9e 85       	ldd	r25, Y+14	; 0x0e
    3188:	2a e0       	ldi	r18, 0x0A	; 10
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	b9 01       	movw	r22, r18
    318e:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodhi4>
    3192:	28 2f       	mov	r18, r24
    3194:	20 5d       	subi	r18, 0xD0	; 208
    3196:	ce 01       	movw	r24, r28
    3198:	03 96       	adiw	r24, 0x03	; 3
    319a:	e8 0f       	add	r30, r24
    319c:	f9 1f       	adc	r31, r25
    319e:	20 83       	st	Z, r18
			num /= 10;
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	2a e0       	ldi	r18, 0x0A	; 10
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	b9 01       	movw	r22, r18
    31aa:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodhi4>
    31ae:	cb 01       	movw	r24, r22
    31b0:	9e 87       	std	Y+14, r25	; 0x0e
    31b2:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	f1 f6       	brne	.-68     	; 0x317e <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	11 c0       	rjmp	.+34     	; 0x31ea <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9c 01       	movw	r18, r24
    31d0:	21 50       	subi	r18, 0x01	; 1
    31d2:	30 40       	sbci	r19, 0x00	; 0
    31d4:	ce 01       	movw	r24, r28
    31d6:	03 96       	adiw	r24, 0x03	; 3
    31d8:	fc 01       	movw	r30, r24
    31da:	e2 0f       	add	r30, r18
    31dc:	f3 1f       	adc	r31, r19
    31de:	80 81       	ld	r24, Z
    31e0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	81 50       	subi	r24, 0x01	; 1
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	88 23       	and	r24, r24
    31ee:	61 f7       	brne	.-40     	; 0x31c8 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    31f0:	80 e0       	ldi	r24, 0x00	; 0
}
    31f2:	2e 96       	adiw	r28, 0x0e	; 14
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	a3 97       	sbiw	r28, 0x23	; 35
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	98 a3       	std	Y+32, r25	; 0x20
    321a:	8f 8f       	std	Y+31, r24	; 0x1f
    321c:	69 a3       	std	Y+33, r22	; 0x21
    321e:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	61 e0       	ldi	r22, 0x01	; 1
    3224:	41 e0       	ldi	r20, 0x01	; 1
    3226:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>


	if(row == 1){
    3234:	89 a1       	ldd	r24, Y+33	; 0x21
    3236:	81 30       	cpi	r24, 0x01	; 1
    3238:	09 f0       	breq	.+2      	; 0x323c <Lcd_ES_tdisplayNum_xy+0x38>
    323a:	76 c0       	rjmp	.+236    	; 0x3328 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    323c:	80 e8       	ldi	r24, 0x80	; 128
    323e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 e8       	ldi	r26, 0x80	; 128
    3248:	bf e3       	ldi	r27, 0x3F	; 63
    324a:	89 8f       	std	Y+25, r24	; 0x19
    324c:	9a 8f       	std	Y+26, r25	; 0x1a
    324e:	ab 8f       	std	Y+27, r26	; 0x1b
    3250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a e7       	ldi	r20, 0x7A	; 122
    3260:	55 e4       	ldi	r21, 0x45	; 69
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8d 8b       	std	Y+21, r24	; 0x15
    326c:	9e 8b       	std	Y+22, r25	; 0x16
    326e:	af 8b       	std	Y+23, r26	; 0x17
    3270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3272:	6d 89       	ldd	r22, Y+21	; 0x15
    3274:	7e 89       	ldd	r23, Y+22	; 0x16
    3276:	8f 89       	ldd	r24, Y+23	; 0x17
    3278:	98 8d       	ldd	r25, Y+24	; 0x18
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    3294:	6d 89       	ldd	r22, Y+21	; 0x15
    3296:	7e 89       	ldd	r23, Y+22	; 0x16
    3298:	8f 89       	ldd	r24, Y+23	; 0x17
    329a:	98 8d       	ldd	r25, Y+24	; 0x18
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	69 8d       	ldd	r22, Y+25	; 0x19
    32ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <Lcd_ES_tdisplayNum_xy+0xf0>
    32d6:	80 e9       	ldi	r24, 0x90	; 144
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
    32de:	89 89       	ldd	r24, Y+17	; 0x11
    32e0:	9a 89       	ldd	r25, Y+18	; 0x12
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <Lcd_ES_tdisplayNum_xy+0xde>
    32e6:	9a 8b       	std	Y+18, r25	; 0x12
    32e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8b 89       	ldd	r24, Y+19	; 0x13
    32ec:	9c 89       	ldd	r25, Y+20	; 0x14
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <Lcd_ES_tdisplayNum_xy+0xd2>
    32fc:	92 c0       	rjmp	.+292    	; 0x3422 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3300:	7e 89       	ldd	r23, Y+22	; 0x16
    3302:	8f 89       	ldd	r24, Y+23	; 0x17
    3304:	98 8d       	ldd	r25, Y+24	; 0x18
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9c 8b       	std	Y+20, r25	; 0x14
    3310:	8b 8b       	std	Y+19, r24	; 0x13
    3312:	8b 89       	ldd	r24, Y+19	; 0x13
    3314:	9c 89       	ldd	r25, Y+20	; 0x14
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
    331a:	8f 85       	ldd	r24, Y+15	; 0x0f
    331c:	98 89       	ldd	r25, Y+16	; 0x10
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <Lcd_ES_tdisplayNum_xy+0x11a>
    3322:	98 8b       	std	Y+16, r25	; 0x10
    3324:	8f 87       	std	Y+15, r24	; 0x0f
    3326:	7d c0       	rjmp	.+250    	; 0x3422 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    3328:	89 a1       	ldd	r24, Y+33	; 0x21
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	09 f0       	breq	.+2      	; 0x3330 <Lcd_ES_tdisplayNum_xy+0x12c>
    332e:	76 c0       	rjmp	.+236    	; 0x341c <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    3330:	80 ec       	ldi	r24, 0xC0	; 192
    3332:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a0 e2       	ldi	r26, 0x20	; 32
    333c:	b1 e4       	ldi	r27, 0x41	; 65
    333e:	8b 87       	std	Y+11, r24	; 0x0b
    3340:	9c 87       	std	Y+12, r25	; 0x0c
    3342:	ad 87       	std	Y+13, r26	; 0x0d
    3344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3346:	6b 85       	ldd	r22, Y+11	; 0x0b
    3348:	7c 85       	ldd	r23, Y+12	; 0x0c
    334a:	8d 85       	ldd	r24, Y+13	; 0x0d
    334c:	9e 85       	ldd	r25, Y+14	; 0x0e
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	4a e7       	ldi	r20, 0x7A	; 122
    3354:	55 e4       	ldi	r21, 0x45	; 69
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8f 83       	std	Y+7, r24	; 0x07
    3360:	98 87       	std	Y+8, r25	; 0x08
    3362:	a9 87       	std	Y+9, r26	; 0x09
    3364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3366:	6f 81       	ldd	r22, Y+7	; 0x07
    3368:	78 85       	ldd	r23, Y+8	; 0x08
    336a:	89 85       	ldd	r24, Y+9	; 0x09
    336c:	9a 85       	ldd	r25, Y+10	; 0x0a
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e8       	ldi	r20, 0x80	; 128
    3374:	5f e3       	ldi	r21, 0x3F	; 63
    3376:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    337a:	88 23       	and	r24, r24
    337c:	2c f4       	brge	.+10     	; 0x3388 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	3f c0       	rjmp	.+126    	; 0x3406 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	3f ef       	ldi	r19, 0xFF	; 255
    3394:	4f e7       	ldi	r20, 0x7F	; 127
    3396:	57 e4       	ldi	r21, 0x47	; 71
    3398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    339c:	18 16       	cp	r1, r24
    339e:	4c f5       	brge	.+82     	; 0x33f2 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	8d 83       	std	Y+5, r24	; 0x05
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <Lcd_ES_tdisplayNum_xy+0x1e4>
    33ca:	80 e9       	ldi	r24, 0x90	; 144
    33cc:	91 e0       	ldi	r25, 0x01	; 1
    33ce:	9c 83       	std	Y+4, r25	; 0x04
    33d0:	8b 83       	std	Y+3, r24	; 0x03
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <Lcd_ES_tdisplayNum_xy+0x1d2>
    33da:	9c 83       	std	Y+4, r25	; 0x04
    33dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	9e 83       	std	Y+6, r25	; 0x06
    33e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ea:	9e 81       	ldd	r25, Y+6	; 0x06
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	69 f7       	brne	.-38     	; 0x33ca <Lcd_ES_tdisplayNum_xy+0x1c6>
    33f0:	18 c0       	rjmp	.+48     	; 0x3422 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	9e 83       	std	Y+6, r25	; 0x06
    3404:	8d 83       	std	Y+5, r24	; 0x05
    3406:	8d 81       	ldd	r24, Y+5	; 0x05
    3408:	9e 81       	ldd	r25, Y+6	; 0x06
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <Lcd_ES_tdisplayNum_xy+0x20e>
    3416:	9a 83       	std	Y+2, r25	; 0x02
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	03 c0       	rjmp	.+6      	; 0x3422 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	8b a3       	std	Y+35, r24	; 0x23
    3420:	1a c0       	rjmp	.+52     	; 0x3456 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9e 8f       	std	Y+30, r25	; 0x1e
    3428:	8d 8f       	std	Y+29, r24	; 0x1d
    342a:	08 c0       	rjmp	.+16     	; 0x343c <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    342c:	8c e1       	ldi	r24, 0x1C	; 28
    342e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3436:	01 96       	adiw	r24, 0x01	; 1
    3438:	9e 8f       	std	Y+30, r25	; 0x1e
    343a:	8d 8f       	std	Y+29, r24	; 0x1d
    343c:	8a a1       	ldd	r24, Y+34	; 0x22
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	28 17       	cp	r18, r24
    3448:	39 07       	cpc	r19, r25
    344a:	84 f7       	brge	.-32     	; 0x342c <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    344c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    344e:	98 a1       	ldd	r25, Y+32	; 0x20
    3450:	0e 94 9f 18 	call	0x313e	; 0x313e <Lcd_ES_tdisplayNum>
	return ES_OK;
    3454:	1b a2       	std	Y+35, r1	; 0x23
    3456:	8b a1       	ldd	r24, Y+35	; 0x23

}
    3458:	a3 96       	adiw	r28, 0x23	; 35
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	a2 97       	sbiw	r28, 0x22	; 34
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	8f 8f       	std	Y+31, r24	; 0x1f
    3480:	68 a3       	std	Y+32, r22	; 0x20
    3482:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	61 e0       	ldi	r22, 0x01	; 1
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	60 e0       	ldi	r22, 0x00	; 0
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>


	if(row == 1){
    3498:	88 a1       	ldd	r24, Y+32	; 0x20
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	09 f0       	breq	.+2      	; 0x34a0 <Lcd_ES_tsendChar_xy+0x36>
    349e:	76 c0       	rjmp	.+236    	; 0x358c <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    34a0:	80 e8       	ldi	r24, 0x80	; 128
    34a2:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	a0 e8       	ldi	r26, 0x80	; 128
    34ac:	bf e3       	ldi	r27, 0x3F	; 63
    34ae:	89 8f       	std	Y+25, r24	; 0x19
    34b0:	9a 8f       	std	Y+26, r25	; 0x1a
    34b2:	ab 8f       	std	Y+27, r26	; 0x1b
    34b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	69 8d       	ldd	r22, Y+25	; 0x19
    34b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a e7       	ldi	r20, 0x7A	; 122
    34c4:	55 e4       	ldi	r21, 0x45	; 69
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	8d 8b       	std	Y+21, r24	; 0x15
    34d0:	9e 8b       	std	Y+22, r25	; 0x16
    34d2:	af 8b       	std	Y+23, r26	; 0x17
    34d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9c 8b       	std	Y+20, r25	; 0x14
    34f4:	8b 8b       	std	Y+19, r24	; 0x13
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    34f8:	6d 89       	ldd	r22, Y+21	; 0x15
    34fa:	7e 89       	ldd	r23, Y+22	; 0x16
    34fc:	8f 89       	ldd	r24, Y+23	; 0x17
    34fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	69 8d       	ldd	r22, Y+25	; 0x19
    3512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9c 8b       	std	Y+20, r25	; 0x14
    3536:	8b 8b       	std	Y+19, r24	; 0x13
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <Lcd_ES_tsendChar_xy+0xee>
    353a:	80 e9       	ldi	r24, 0x90	; 144
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	89 8b       	std	Y+17, r24	; 0x11
    3542:	89 89       	ldd	r24, Y+17	; 0x11
    3544:	9a 89       	ldd	r25, Y+18	; 0x12
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <Lcd_ES_tsendChar_xy+0xdc>
    354a:	9a 8b       	std	Y+18, r25	; 0x12
    354c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	8b 89       	ldd	r24, Y+19	; 0x13
    3550:	9c 89       	ldd	r25, Y+20	; 0x14
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9c 8b       	std	Y+20, r25	; 0x14
    3556:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	8b 89       	ldd	r24, Y+19	; 0x13
    355a:	9c 89       	ldd	r25, Y+20	; 0x14
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	69 f7       	brne	.-38     	; 0x353a <Lcd_ES_tsendChar_xy+0xd0>
    3560:	92 c0       	rjmp	.+292    	; 0x3686 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	6d 89       	ldd	r22, Y+21	; 0x15
    3564:	7e 89       	ldd	r23, Y+22	; 0x16
    3566:	8f 89       	ldd	r24, Y+23	; 0x17
    3568:	98 8d       	ldd	r25, Y+24	; 0x18
    356a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9c 8b       	std	Y+20, r25	; 0x14
    3574:	8b 8b       	std	Y+19, r24	; 0x13
    3576:	8b 89       	ldd	r24, Y+19	; 0x13
    3578:	9c 89       	ldd	r25, Y+20	; 0x14
    357a:	98 8b       	std	Y+16, r25	; 0x10
    357c:	8f 87       	std	Y+15, r24	; 0x0f
    357e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3580:	98 89       	ldd	r25, Y+16	; 0x10
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <Lcd_ES_tsendChar_xy+0x118>
    3586:	98 8b       	std	Y+16, r25	; 0x10
    3588:	8f 87       	std	Y+15, r24	; 0x0f
    358a:	7d c0       	rjmp	.+250    	; 0x3686 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    358c:	88 a1       	ldd	r24, Y+32	; 0x20
    358e:	82 30       	cpi	r24, 0x02	; 2
    3590:	09 f0       	breq	.+2      	; 0x3594 <Lcd_ES_tsendChar_xy+0x12a>
    3592:	76 c0       	rjmp	.+236    	; 0x3680 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    3594:	80 ec       	ldi	r24, 0xC0	; 192
    3596:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	a0 e2       	ldi	r26, 0x20	; 32
    35a0:	b1 e4       	ldi	r27, 0x41	; 65
    35a2:	8b 87       	std	Y+11, r24	; 0x0b
    35a4:	9c 87       	std	Y+12, r25	; 0x0c
    35a6:	ad 87       	std	Y+13, r26	; 0x0d
    35a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a e7       	ldi	r20, 0x7A	; 122
    35b8:	55 e4       	ldi	r21, 0x45	; 69
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	8f 83       	std	Y+7, r24	; 0x07
    35c4:	98 87       	std	Y+8, r25	; 0x08
    35c6:	a9 87       	std	Y+9, r26	; 0x09
    35c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f e3       	ldi	r21, 0x3F	; 63
    35da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35de:	88 23       	and	r24, r24
    35e0:	2c f4       	brge	.+10     	; 0x35ec <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	4c f5       	brge	.+82     	; 0x3656 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	6b 85       	ldd	r22, Y+11	; 0x0b
    3606:	7c 85       	ldd	r23, Y+12	; 0x0c
    3608:	8d 85       	ldd	r24, Y+13	; 0x0d
    360a:	9e 85       	ldd	r25, Y+14	; 0x0e
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	0f c0       	rjmp	.+30     	; 0x364c <Lcd_ES_tsendChar_xy+0x1e2>
    362e:	80 e9       	ldi	r24, 0x90	; 144
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	9c 83       	std	Y+4, r25	; 0x04
    3634:	8b 83       	std	Y+3, r24	; 0x03
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <Lcd_ES_tsendChar_xy+0x1d0>
    363e:	9c 83       	std	Y+4, r25	; 0x04
    3640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <Lcd_ES_tsendChar_xy+0x1c4>
    3654:	18 c0       	rjmp	.+48     	; 0x3686 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <Lcd_ES_tsendChar_xy+0x20c>
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	8a a3       	std	Y+34, r24	; 0x22
    3684:	19 c0       	rjmp	.+50     	; 0x36b8 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	9e 8f       	std	Y+30, r25	; 0x1e
    368c:	8d 8f       	std	Y+29, r24	; 0x1d
    368e:	08 c0       	rjmp	.+16     	; 0x36a0 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    3690:	8c e1       	ldi	r24, 0x1C	; 28
    3692:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3698:	9e 8d       	ldd	r25, Y+30	; 0x1e
    369a:	01 96       	adiw	r24, 0x01	; 1
    369c:	9e 8f       	std	Y+30, r25	; 0x1e
    369e:	8d 8f       	std	Y+29, r24	; 0x1d
    36a0:	89 a1       	ldd	r24, Y+33	; 0x21
    36a2:	28 2f       	mov	r18, r24
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36aa:	28 17       	cp	r18, r24
    36ac:	39 07       	cpc	r19, r25
    36ae:	84 f7       	brge	.-32     	; 0x3690 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    36b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36b2:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Lcd_ES_tsendChar>
	return ES_OK;
    36b6:	1a a2       	std	Y+34, r1	; 0x22
    36b8:	8a a1       	ldd	r24, Y+34	; 0x22
}
    36ba:	a2 96       	adiw	r28, 0x22	; 34
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <LCD_ES_tSet_Cursor_Pos+0x6>
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <LCD_ES_tSet_Cursor_Pos+0x8>
    36d4:	0f 92       	push	r0
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	81 50       	subi	r24, 0x01	; 1
    36e2:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	28 2f       	mov	r18, r24
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	3d 83       	std	Y+5, r19	; 0x05
    36ec:	2c 83       	std	Y+4, r18	; 0x04
    36ee:	8c 81       	ldd	r24, Y+4	; 0x04
    36f0:	9d 81       	ldd	r25, Y+5	; 0x05
    36f2:	81 30       	cpi	r24, 0x01	; 1
    36f4:	91 05       	cpc	r25, r1
    36f6:	31 f0       	breq	.+12     	; 0x3704 <LCD_ES_tSet_Cursor_Pos+0x38>
    36f8:	2c 81       	ldd	r18, Y+4	; 0x04
    36fa:	3d 81       	ldd	r19, Y+5	; 0x05
    36fc:	22 30       	cpi	r18, 0x02	; 2
    36fe:	31 05       	cpc	r19, r1
    3700:	31 f0       	breq	.+12     	; 0x370e <LCD_ES_tSet_Cursor_Pos+0x42>
    3702:	0a c0       	rjmp	.+20     	; 0x3718 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    3704:	8a 81       	ldd	r24, Y+2	; 0x02
    3706:	80 58       	subi	r24, 0x80	; 128
    3708:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    370c:	08 c0       	rjmp	.+16     	; 0x371e <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	80 54       	subi	r24, 0x40	; 64
    3712:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    3716:	03 c0       	rjmp	.+6      	; 0x371e <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    3718:	31 e0       	ldi	r19, 0x01	; 1
    371a:	3b 83       	std	Y+3, r19	; 0x03
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    371e:	1b 82       	std	Y+3, r1	; 0x03
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	00 d0       	rcall	.+0      	; 0x3738 <LCD_ES_tGoTo+0x6>
    3738:	0f 92       	push	r0
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	89 83       	std	Y+1, r24	; 0x01
    3740:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	88 23       	and	r24, r24
    3746:	41 f4       	brne	.+16     	; 0x3758 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	80 31       	cpi	r24, 0x10	; 16
    374c:	98 f4       	brcc	.+38     	; 0x3774 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    374e:	8a 81       	ldd	r24, Y+2	; 0x02
    3750:	80 58       	subi	r24, 0x80	; 128
    3752:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    3756:	0e c0       	rjmp	.+28     	; 0x3774 <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	81 30       	cpi	r24, 0x01	; 1
    375c:	41 f4       	brne	.+16     	; 0x376e <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    375e:	8a 81       	ldd	r24, Y+2	; 0x02
    3760:	80 31       	cpi	r24, 0x10	; 16
    3762:	40 f4       	brcc	.+16     	; 0x3774 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	80 54       	subi	r24, 0x40	; 64
    3768:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <Lcd_ES_tsendCmd>
    376c:	03 c0       	rjmp	.+6      	; 0x3774 <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	8b 83       	std	Y+3, r24	; 0x03
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    3774:	1b 82       	std	Y+3, r1	; 0x03
    3776:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	65 97       	sbiw	r28, 0x15	; 21
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	9c 8b       	std	Y+20, r25	; 0x14
    379a:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    379c:	eb 89       	ldd	r30, Y+19	; 0x13
    379e:	fc 89       	ldd	r31, Y+20	; 0x14
    37a0:	8f ef       	ldi	r24, 0xFF	; 255
    37a2:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    37a4:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    37a6:	8b 89       	ldd	r24, Y+19	; 0x13
    37a8:	9c 89       	ldd	r25, Y+20	; 0x14
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <KPD_ES_tGetKeyPressed+0x2c>
    37ae:	ed c0       	rjmp	.+474    	; 0x398a <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    37b0:	19 8a       	std	Y+17, r1	; 0x11
    37b2:	e5 c0       	rjmp	.+458    	; 0x397e <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    37b4:	89 89       	ldd	r24, Y+17	; 0x11
    37b6:	88 2f       	mov	r24, r24
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	fc 01       	movw	r30, r24
    37bc:	ef 5d       	subi	r30, 0xDF	; 223
    37be:	fe 4f       	sbci	r31, 0xFE	; 254
    37c0:	90 81       	ld	r25, Z
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	69 2f       	mov	r22, r25
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    37cc:	18 8a       	std	Y+16, r1	; 0x10
    37ce:	c1 c0       	rjmp	.+386    	; 0x3952 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    37d0:	88 89       	ldd	r24, Y+16	; 0x10
    37d2:	88 2f       	mov	r24, r24
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	fc 01       	movw	r30, r24
    37d8:	eb 5d       	subi	r30, 0xDB	; 219
    37da:	fe 4f       	sbci	r31, 0xFE	; 254
    37dc:	90 81       	ld	r25, Z
    37de:	9e 01       	movw	r18, r28
    37e0:	2e 5e       	subi	r18, 0xEE	; 238
    37e2:	3f 4f       	sbci	r19, 0xFF	; 255
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	69 2f       	mov	r22, r25
    37e8:	a9 01       	movw	r20, r18
    37ea:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    37ee:	8a 89       	ldd	r24, Y+18	; 0x12
    37f0:	88 23       	and	r24, r24
    37f2:	09 f0       	breq	.+2      	; 0x37f6 <KPD_ES_tGetKeyPressed+0x72>
    37f4:	ab c0       	rjmp	.+342    	; 0x394c <KPD_ES_tGetKeyPressed+0x1c8>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	a0 ea       	ldi	r26, 0xA0	; 160
    37fc:	b1 e4       	ldi	r27, 0x41	; 65
    37fe:	8b 87       	std	Y+11, r24	; 0x0b
    3800:	9c 87       	std	Y+12, r25	; 0x0c
    3802:	ad 87       	std	Y+13, r26	; 0x0d
    3804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3806:	6b 85       	ldd	r22, Y+11	; 0x0b
    3808:	7c 85       	ldd	r23, Y+12	; 0x0c
    380a:	8d 85       	ldd	r24, Y+13	; 0x0d
    380c:	9e 85       	ldd	r25, Y+14	; 0x0e
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	4a e7       	ldi	r20, 0x7A	; 122
    3814:	55 e4       	ldi	r21, 0x45	; 69
    3816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	8f 83       	std	Y+7, r24	; 0x07
    3820:	98 87       	std	Y+8, r25	; 0x08
    3822:	a9 87       	std	Y+9, r26	; 0x09
    3824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3826:	6f 81       	ldd	r22, Y+7	; 0x07
    3828:	78 85       	ldd	r23, Y+8	; 0x08
    382a:	89 85       	ldd	r24, Y+9	; 0x09
    382c:	9a 85       	ldd	r25, Y+10	; 0x0a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e8       	ldi	r20, 0x80	; 128
    3834:	5f e3       	ldi	r21, 0x3F	; 63
    3836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383a:	88 23       	and	r24, r24
    383c:	2c f4       	brge	.+10     	; 0x3848 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9e 83       	std	Y+6, r25	; 0x06
    3844:	8d 83       	std	Y+5, r24	; 0x05
    3846:	3f c0       	rjmp	.+126    	; 0x38c6 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    3848:	6f 81       	ldd	r22, Y+7	; 0x07
    384a:	78 85       	ldd	r23, Y+8	; 0x08
    384c:	89 85       	ldd	r24, Y+9	; 0x09
    384e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	3f ef       	ldi	r19, 0xFF	; 255
    3854:	4f e7       	ldi	r20, 0x7F	; 127
    3856:	57 e4       	ldi	r21, 0x47	; 71
    3858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    385c:	18 16       	cp	r1, r24
    385e:	4c f5       	brge	.+82     	; 0x38b2 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3860:	6b 85       	ldd	r22, Y+11	; 0x0b
    3862:	7c 85       	ldd	r23, Y+12	; 0x0c
    3864:	8d 85       	ldd	r24, Y+13	; 0x0d
    3866:	9e 85       	ldd	r25, Y+14	; 0x0e
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e2       	ldi	r20, 0x20	; 32
    386e:	51 e4       	ldi	r21, 0x41	; 65
    3870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	0f c0       	rjmp	.+30     	; 0x38a8 <KPD_ES_tGetKeyPressed+0x124>
    388a:	80 e9       	ldi	r24, 0x90	; 144
    388c:	91 e0       	ldi	r25, 0x01	; 1
    388e:	9c 83       	std	Y+4, r25	; 0x04
    3890:	8b 83       	std	Y+3, r24	; 0x03
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	9c 81       	ldd	r25, Y+4	; 0x04
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <KPD_ES_tGetKeyPressed+0x112>
    389a:	9c 83       	std	Y+4, r25	; 0x04
    389c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389e:	8d 81       	ldd	r24, Y+5	; 0x05
    38a0:	9e 81       	ldd	r25, Y+6	; 0x06
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	9e 83       	std	Y+6, r25	; 0x06
    38a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a8:	8d 81       	ldd	r24, Y+5	; 0x05
    38aa:	9e 81       	ldd	r25, Y+6	; 0x06
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	69 f7       	brne	.-38     	; 0x388a <KPD_ES_tGetKeyPressed+0x106>
    38b0:	14 c0       	rjmp	.+40     	; 0x38da <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b2:	6f 81       	ldd	r22, Y+7	; 0x07
    38b4:	78 85       	ldd	r23, Y+8	; 0x08
    38b6:	89 85       	ldd	r24, Y+9	; 0x09
    38b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	9e 83       	std	Y+6, r25	; 0x06
    38c4:	8d 83       	std	Y+5, r24	; 0x05
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ca:	9a 83       	std	Y+2, r25	; 0x02
    38cc:	89 83       	std	Y+1, r24	; 0x01
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	9a 81       	ldd	r25, Y+2	; 0x02
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <KPD_ES_tGetKeyPressed+0x14e>
    38d6:	9a 83       	std	Y+2, r25	; 0x02
    38d8:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    38da:	88 89       	ldd	r24, Y+16	; 0x10
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	fc 01       	movw	r30, r24
    38e2:	eb 5d       	subi	r30, 0xDB	; 219
    38e4:	fe 4f       	sbci	r31, 0xFE	; 254
    38e6:	90 81       	ld	r25, Z
    38e8:	9e 01       	movw	r18, r28
    38ea:	2e 5e       	subi	r18, 0xEE	; 238
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
    38ee:	83 e0       	ldi	r24, 0x03	; 3
    38f0:	69 2f       	mov	r22, r25
    38f2:	a9 01       	movw	r20, r18
    38f4:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_ES_tGetPinValue>
    38f8:	0f c0       	rjmp	.+30     	; 0x3918 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    38fa:	88 89       	ldd	r24, Y+16	; 0x10
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	fc 01       	movw	r30, r24
    3902:	eb 5d       	subi	r30, 0xDB	; 219
    3904:	fe 4f       	sbci	r31, 0xFE	; 254
    3906:	90 81       	ld	r25, Z
    3908:	9e 01       	movw	r18, r28
    390a:	2e 5e       	subi	r18, 0xEE	; 238
    390c:	3f 4f       	sbci	r19, 0xFF	; 255
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	69 2f       	mov	r22, r25
    3912:	a9 01       	movw	r20, r18
    3914:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    3918:	8a 89       	ldd	r24, Y+18	; 0x12
    391a:	88 23       	and	r24, r24
    391c:	71 f3       	breq	.-36     	; 0x38fa <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    391e:	89 89       	ldd	r24, Y+17	; 0x11
    3920:	48 2f       	mov	r20, r24
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	88 89       	ldd	r24, Y+16	; 0x10
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	ca 01       	movw	r24, r20
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	88 0f       	add	r24, r24
    3932:	99 1f       	adc	r25, r25
    3934:	82 0f       	add	r24, r18
    3936:	93 1f       	adc	r25, r19
    3938:	fc 01       	movw	r30, r24
    393a:	ef 5e       	subi	r30, 0xEF	; 239
    393c:	fe 4f       	sbci	r31, 0xFE	; 254
    393e:	80 81       	ld	r24, Z
    3940:	eb 89       	ldd	r30, Y+19	; 0x13
    3942:	fc 89       	ldd	r31, Y+20	; 0x14
    3944:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	8f 87       	std	Y+15, r24	; 0x0f
    394a:	07 c0       	rjmp	.+14     	; 0x395a <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    394c:	88 89       	ldd	r24, Y+16	; 0x10
    394e:	8f 5f       	subi	r24, 0xFF	; 255
    3950:	88 8b       	std	Y+16, r24	; 0x10
    3952:	88 89       	ldd	r24, Y+16	; 0x10
    3954:	84 30       	cpi	r24, 0x04	; 4
    3956:	08 f4       	brcc	.+2      	; 0x395a <KPD_ES_tGetKeyPressed+0x1d6>
    3958:	3b cf       	rjmp	.-394    	; 0x37d0 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    395a:	89 89       	ldd	r24, Y+17	; 0x11
    395c:	88 2f       	mov	r24, r24
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	fc 01       	movw	r30, r24
    3962:	ef 5d       	subi	r30, 0xDF	; 223
    3964:	fe 4f       	sbci	r31, 0xFE	; 254
    3966:	90 81       	ld	r25, Z
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	69 2f       	mov	r22, r25
    396c:	41 e0       	ldi	r20, 0x01	; 1
    396e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3972:	8f 85       	ldd	r24, Y+15	; 0x0f
    3974:	81 30       	cpi	r24, 0x01	; 1
    3976:	39 f0       	breq	.+14     	; 0x3986 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3978:	89 89       	ldd	r24, Y+17	; 0x11
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	89 8b       	std	Y+17, r24	; 0x11
    397e:	89 89       	ldd	r24, Y+17	; 0x11
    3980:	84 30       	cpi	r24, 0x04	; 4
    3982:	08 f4       	brcc	.+2      	; 0x3986 <KPD_ES_tGetKeyPressed+0x202>
    3984:	17 cf       	rjmp	.-466    	; 0x37b4 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3986:	1d 8a       	std	Y+21, r1	; 0x15
    3988:	02 c0       	rjmp	.+4      	; 0x398e <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	8d 8b       	std	Y+21, r24	; 0x15
    398e:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3990:	65 96       	adiw	r28, 0x15	; 21
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <main>:




int main()
{
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	2f 97       	sbiw	r28, 0x0f	; 15
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
#ifdef Act_As_Master
	unsigned char ch= 0;
    39b6:	1f 86       	std	Y+15, r1	; 0x0f
	I2C_Init(0x48);
    39b8:	68 e4       	ldi	r22, 0x48	; 72
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 31 0b 	call	0x1662	; 0x1662 <I2C_Init>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	aa ef       	ldi	r26, 0xFA	; 250
    39ca:	b3 e4       	ldi	r27, 0x43	; 67
    39cc:	8b 87       	std	Y+11, r24	; 0x0b
    39ce:	9c 87       	std	Y+12, r25	; 0x0c
    39d0:	ad 87       	std	Y+13, r26	; 0x0d
    39d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a e7       	ldi	r20, 0x7A	; 122
    39e2:	55 e4       	ldi	r21, 0x45	; 69
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	8f 83       	std	Y+7, r24	; 0x07
    39ee:	98 87       	std	Y+8, r25	; 0x08
    39f0:	a9 87       	std	Y+9, r26	; 0x09
    39f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <main+0x74>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <main+0xf2>
	else if (__tmp > 65535)
    3a16:	6f 81       	ldd	r22, Y+7	; 0x07
    3a18:	78 85       	ldd	r23, Y+8	; 0x08
    3a1a:	89 85       	ldd	r24, Y+9	; 0x09
    3a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <main+0xd4>
    3a58:	80 e9       	ldi	r24, 0x90	; 144
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	9c 83       	std	Y+4, r25	; 0x04
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <main+0xc2>
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <main+0xb6>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	6f 81       	ldd	r22, Y+7	; 0x07
    3a82:	78 85       	ldd	r23, Y+8	; 0x08
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <main+0xfe>
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		_delay_ms(500);
		I2C_Start();
    3aa8:	0e 94 6d 0b 	call	0x16da	; 0x16da <I2C_Start>
		I2C_Write(0b11010000+0); // Transmit SLA+W(0)
    3aac:	80 ed       	ldi	r24, 0xD0	; 208
    3aae:	0e 94 82 0b 	call	0x1704	; 0x1704 <I2C_Write>
		while((TWSR&0xF8)!=0x18);		// SLA+W has been transmitted ACK has been received
    3ab2:	e1 e2       	ldi	r30, 0x21	; 33
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	80 81       	ld	r24, Z
    3ab8:	88 2f       	mov	r24, r24
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	88 7f       	andi	r24, 0xF8	; 248
    3abe:	90 70       	andi	r25, 0x00	; 0
    3ac0:	88 31       	cpi	r24, 0x18	; 24
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	b1 f7       	brne	.-20     	; 0x3ab2 <main+0x110>
		I2C_Write(ch++);
    3ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3aca:	9f 5f       	subi	r25, 0xFF	; 255
    3acc:	9f 87       	std	Y+15, r25	; 0x0f
    3ace:	0e 94 82 0b 	call	0x1704	; 0x1704 <I2C_Write>
		while((TWSR&0xF8)!=0x28);		// Data byte has been transmitted ACK has been received
    3ad2:	e1 e2       	ldi	r30, 0x21	; 33
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 81       	ld	r24, Z
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	88 7f       	andi	r24, 0xF8	; 248
    3ade:	90 70       	andi	r25, 0x00	; 0
    3ae0:	88 32       	cpi	r24, 0x28	; 40
    3ae2:	91 05       	cpc	r25, r1
    3ae4:	b1 f7       	brne	.-20     	; 0x3ad2 <main+0x130>
		I2C_Stop();
    3ae6:	0e 94 99 0b 	call	0x1732	; 0x1732 <I2C_Stop>
    3aea:	6c cf       	rjmp	.-296    	; 0x39c4 <main+0x22>

00003aec <__udivmodhi4>:
    3aec:	aa 1b       	sub	r26, r26
    3aee:	bb 1b       	sub	r27, r27
    3af0:	51 e1       	ldi	r21, 0x11	; 17
    3af2:	07 c0       	rjmp	.+14     	; 0x3b02 <__udivmodhi4_ep>

00003af4 <__udivmodhi4_loop>:
    3af4:	aa 1f       	adc	r26, r26
    3af6:	bb 1f       	adc	r27, r27
    3af8:	a6 17       	cp	r26, r22
    3afa:	b7 07       	cpc	r27, r23
    3afc:	10 f0       	brcs	.+4      	; 0x3b02 <__udivmodhi4_ep>
    3afe:	a6 1b       	sub	r26, r22
    3b00:	b7 0b       	sbc	r27, r23

00003b02 <__udivmodhi4_ep>:
    3b02:	88 1f       	adc	r24, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	5a 95       	dec	r21
    3b08:	a9 f7       	brne	.-22     	; 0x3af4 <__udivmodhi4_loop>
    3b0a:	80 95       	com	r24
    3b0c:	90 95       	com	r25
    3b0e:	bc 01       	movw	r22, r24
    3b10:	cd 01       	movw	r24, r26
    3b12:	08 95       	ret

00003b14 <__udivmodsi4>:
    3b14:	a1 e2       	ldi	r26, 0x21	; 33
    3b16:	1a 2e       	mov	r1, r26
    3b18:	aa 1b       	sub	r26, r26
    3b1a:	bb 1b       	sub	r27, r27
    3b1c:	fd 01       	movw	r30, r26
    3b1e:	0d c0       	rjmp	.+26     	; 0x3b3a <__udivmodsi4_ep>

00003b20 <__udivmodsi4_loop>:
    3b20:	aa 1f       	adc	r26, r26
    3b22:	bb 1f       	adc	r27, r27
    3b24:	ee 1f       	adc	r30, r30
    3b26:	ff 1f       	adc	r31, r31
    3b28:	a2 17       	cp	r26, r18
    3b2a:	b3 07       	cpc	r27, r19
    3b2c:	e4 07       	cpc	r30, r20
    3b2e:	f5 07       	cpc	r31, r21
    3b30:	20 f0       	brcs	.+8      	; 0x3b3a <__udivmodsi4_ep>
    3b32:	a2 1b       	sub	r26, r18
    3b34:	b3 0b       	sbc	r27, r19
    3b36:	e4 0b       	sbc	r30, r20
    3b38:	f5 0b       	sbc	r31, r21

00003b3a <__udivmodsi4_ep>:
    3b3a:	66 1f       	adc	r22, r22
    3b3c:	77 1f       	adc	r23, r23
    3b3e:	88 1f       	adc	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	1a 94       	dec	r1
    3b44:	69 f7       	brne	.-38     	; 0x3b20 <__udivmodsi4_loop>
    3b46:	60 95       	com	r22
    3b48:	70 95       	com	r23
    3b4a:	80 95       	com	r24
    3b4c:	90 95       	com	r25
    3b4e:	9b 01       	movw	r18, r22
    3b50:	ac 01       	movw	r20, r24
    3b52:	bd 01       	movw	r22, r26
    3b54:	cf 01       	movw	r24, r30
    3b56:	08 95       	ret

00003b58 <__prologue_saves__>:
    3b58:	2f 92       	push	r2
    3b5a:	3f 92       	push	r3
    3b5c:	4f 92       	push	r4
    3b5e:	5f 92       	push	r5
    3b60:	6f 92       	push	r6
    3b62:	7f 92       	push	r7
    3b64:	8f 92       	push	r8
    3b66:	9f 92       	push	r9
    3b68:	af 92       	push	r10
    3b6a:	bf 92       	push	r11
    3b6c:	cf 92       	push	r12
    3b6e:	df 92       	push	r13
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
    3b80:	ca 1b       	sub	r28, r26
    3b82:	db 0b       	sbc	r29, r27
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	09 94       	ijmp

00003b90 <__epilogue_restores__>:
    3b90:	2a 88       	ldd	r2, Y+18	; 0x12
    3b92:	39 88       	ldd	r3, Y+17	; 0x11
    3b94:	48 88       	ldd	r4, Y+16	; 0x10
    3b96:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b98:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ba0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ba2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ba4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ba6:	df 80       	ldd	r13, Y+7	; 0x07
    3ba8:	ee 80       	ldd	r14, Y+6	; 0x06
    3baa:	fd 80       	ldd	r15, Y+5	; 0x05
    3bac:	0c 81       	ldd	r16, Y+4	; 0x04
    3bae:	1b 81       	ldd	r17, Y+3	; 0x03
    3bb0:	aa 81       	ldd	r26, Y+2	; 0x02
    3bb2:	b9 81       	ldd	r27, Y+1	; 0x01
    3bb4:	ce 0f       	add	r28, r30
    3bb6:	d1 1d       	adc	r29, r1
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	f8 94       	cli
    3bbc:	de bf       	out	0x3e, r29	; 62
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	ed 01       	movw	r28, r26
    3bc4:	08 95       	ret

00003bc6 <_exit>:
    3bc6:	f8 94       	cli

00003bc8 <__stop_program>:
    3bc8:	ff cf       	rjmp	.-2      	; 0x3bc8 <__stop_program>
