
Timer_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000414e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ce  00800060  0000414e  000041e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080022e  0080022e  000043b0  2**0
                  ALLOC
  3 .stab         000007e0  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000906  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000480  00000000  00000000  00005496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007a6  00000000  00000000  00005916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003de8  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ca5  00000000  00000000  00009ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000331f  00000000  00000000  0000bb49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000640  00000000  00000000  0000ee68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ec1  00000000  00000000  0000f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00010369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e0  00000000  00000000  00010d37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__vector_1>
       8:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__vector_2>
       c:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_10>
      2c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 20 	call	0x4022	; 0x4022 <main>
      8a:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 20 	jmp	0x412c	; 0x412c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 20 	jmp	0x412c	; 0x412c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 20 	jmp	0x412c	; 0x412c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 20 	jmp	0x412c	; 0x412c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 96 20 	jmp	0x412c	; 0x412c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 93 20 	jmp	0x4126	; 0x4126 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 9a 20 	jmp	0x4134	; 0x4134 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <WDT_START>:

#include "WDT.h"


ES_t WDT_START(u8 timing)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
	// The WDP2, WDP1, and WDP0 bits determine the Watchdog Timer prescaling when the
	// Watchdog Timer is enabled
	WDTCR |= (1<<WDE) | timing;
     e04:	a1 e4       	ldi	r26, 0x41	; 65
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e4       	ldi	r30, 0x41	; 65
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	90 81       	ld	r25, Z
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	89 2b       	or	r24, r25
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	8c 93       	st	X, r24
	return ES_OK;
     e16:	80 e0       	ldi	r24, 0x00	; 0
}
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <WDT_Stop>:



ES_t WDT_Stop(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
//	- In the same operation, write a logic one to WDTOE and WDE. A logic one must
//	be written to WDE even though it is set to one before the disable operation starts.
//	- Within the next four clock cycles, write a logic 0 to WDE. This disables the
//	Watchdog.

	WDTCR |= (1<<WDE) | (1<<WDTOE);
     e28:	a1 e4       	ldi	r26, 0x41	; 65
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e1 e4       	ldi	r30, 0x41	; 65
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 61       	ori	r24, 0x18	; 24
     e34:	8c 93       	st	X, r24
	WDTCR = 0x00;
     e36:	e1 e4       	ldi	r30, 0x41	; 65
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1

	return ES_OK;
     e3c:	80 e0       	ldi	r24, 0x00	; 0

}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <UART_Init>:
// 		Initialization
// ==============================================


void UART_Init(void)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <UART_Init+0x6>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	u8  UCSRC_var=0;
     e50:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_var=0;
     e52:	1a 82       	std	Y+2, r1	; 0x02
     e54:	19 82       	std	Y+1, r1	; 0x01

#if (SPEED_MODE==NORMAL_SPEED)
	CLR_BIT(UCSRA,U2X);
     e56:	ab e2       	ldi	r26, 0x2B	; 43
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e2       	ldi	r30, 0x2B	; 43
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8d 7f       	andi	r24, 0xFD	; 253
     e62:	8c 93       	st	X, r24
#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
#endif

	// Set URSEL to write data to UCSRC register
	SET_BIT(UCSRC_var,URSEL);
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	8b 83       	std	Y+3, r24	; 0x03


#if (SYNCH_MODE==SYNCH)
	SET_BIT(UCSRC_var,UMSEL)
#elif (SYNCH_MODE==ASYNCH)
	CLR_BIT(UCSRC_var,UMSEL);
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	8f 7b       	andi	r24, 0xBF	; 191
     e6e:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if (PARITY_MODE==NO_PARITY)
	CLR_BIT(UCSRC_var,UPM0);
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	8f 7e       	andi	r24, 0xEF	; 239
     e74:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRC_var,UPM1);
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	8f 7d       	andi	r24, 0xDF	; 223
     e7a:	8b 83       	std	Y+3, r24	; 0x03
#elif (N_DATA_BITS==_7_DATA_BITS)
	CLR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLR_BIT(UCSRB,UCSZ2);
#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	84 60       	ori	r24, 0x04	; 4
     e86:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSZ2);
     e88:	aa e2       	ldi	r26, 0x2A	; 42
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ea e2       	ldi	r30, 0x2A	; 42
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	8c 93       	st	X, r24
	SET_BIT(UCSRC_var,UCSZ1);
	SET_BIT(UCSRB,UCSZ2);
#endif

#if (N_STOP_BITS==ONE_STOP_BIT)
	CLR_BIT(UCSRC_var,USBS);
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	87 7f       	andi	r24, 0xF7	; 247
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,USBS);
#endif


	// Set UCSRC value
	UCSRC=UCSRC_var;
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	80 83       	st	Z, r24


	// Baud rate
	UBRR_var = BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
     ea4:	80 91 e5 01 	lds	r24, 0x01E5
     ea8:	90 91 e6 01 	lds	r25, 0x01E6
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(UBRR_var>>8);
     eb0:	e0 e4       	ldi	r30, 0x40	; 64
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	89 2f       	mov	r24, r25
     eba:	99 27       	eor	r25, r25
     ebc:	80 83       	st	Z, r24
	UBRRL = (u8)UBRR_var;
     ebe:	e9 e2       	ldi	r30, 0x29	; 41
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	80 83       	st	Z, r24


	// Enabling UART
	//enable UART  receiver
	SET_BIT(UCSRB,RXEN);
     ec6:	aa e2       	ldi	r26, 0x2A	; 42
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e2       	ldi	r30, 0x2A	; 42
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 61       	ori	r24, 0x10	; 16
     ed2:	8c 93       	st	X, r24
	//enable UART  transmitter
	SET_BIT(UCSRB,TXEN);
     ed4:	aa e2       	ldi	r26, 0x2A	; 42
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e2       	ldi	r30, 0x2A	; 42
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 60       	ori	r24, 0x08	; 8
     ee0:	8c 93       	st	X, r24

}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <UART_SendByteNoBlock>:
// ========================================================



void UART_SendByteNoBlock(u8 data)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     efa:	ec e2       	ldi	r30, 0x2C	; 44
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	80 83       	st	Z, r24
}
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <UART_ReceiveByteNoBlock>:

u8 UART_ReceiveByteNoBlock(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
    return UDR;
     f12:	ec e2       	ldi	r30, 0x2C	; 44
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <UART_Send_Char>:
// ========================================================
// 			Busy Wait Functions
// ========================================================

void UART_Send_Char(u8 data)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the buffer is empty and ready for transmitting
		a new byte so wait until this flag is set to one and it will cleared by
		hardware when u write new data to buffer */
	// Busy wait
	while(!GET_BIT(UCSRA,UDRE));
     f2a:	eb e2       	ldi	r30, 0x2B	; 43
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	82 95       	swap	r24
     f32:	86 95       	lsr	r24
     f34:	87 70       	andi	r24, 0x07	; 7
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	81 70       	andi	r24, 0x01	; 1
     f3c:	90 70       	andi	r25, 0x00	; 0
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	a1 f3       	breq	.-24     	; 0xf2a <UART_Send_Char+0xc>
	UDR = data;
     f42:	ec e2       	ldi	r30, 0x2C	; 44
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	80 83       	st	Z, r24
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <UART_Receive_Char>:


u8 UART_Receive_Char(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receives data so wait until this flag
		is set to one and it will be cleared by hardware when u read data  */
	// The CPU is stucking here
	while(!GET_BIT(UCSRA,RXC));
     f5a:	eb e2       	ldi	r30, 0x2B	; 43
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 23       	and	r24, r24
     f62:	dc f7       	brge	.-10     	; 0xf5a <UART_Receive_Char+0x8>
	return UDR;
     f64:	ec e2       	ldi	r30, 0x2C	; 44
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <UART_Send_String>:


void UART_Send_String(char* string)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <UART_Send_String+0x6>
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	9b 83       	std	Y+3, r25	; 0x03
     f7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	0e c0       	rjmp	.+28     	; 0xfa0 <UART_Send_String+0x30>
	while(string[i] != '\0'){
		UART_Send_Char(string[i]);
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	80 81       	ld	r24, Z
     f96:	0e 94 8f 07 	call	0xf1e	; 0xf1e <UART_Send_Char>
		i++;
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	89 83       	std	Y+1, r24	; 0x01


void UART_Send_String(char* string)
{
	u8 i=0;
	while(string[i] != '\0'){
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	39 f7       	brne	.-50     	; 0xf84 <UART_Send_String+0x14>
		UART_Send_Char(string[i]);
		i++;
	}
	// Send (Enter) as a terminating char
	UART_Send_Char(DefaultStop);
     fb6:	8d e0       	ldi	r24, 0x0D	; 13
     fb8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <UART_Send_Char>
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <UART_Receive_String>:


void UART_Receive_String(char *Buffer)
{
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <UART_Receive_String+0xa>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <UART_Receive_String+0xc>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9c 83       	std	Y+4, r25	; 0x04
     fda:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
     fdc:	1a 82       	std	Y+2, r1	; 0x02
     fde:	19 82       	std	Y+1, r1	; 0x01

    Buffer[i] = UART_Receive_Char();
     fe0:	29 81       	ldd	r18, Y+1	; 0x01
     fe2:	3a 81       	ldd	r19, Y+2	; 0x02
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	8c 01       	movw	r16, r24
     fea:	02 0f       	add	r16, r18
     fec:	13 1f       	adc	r17, r19
     fee:	0e 94 a9 07 	call	0xf52	; 0xf52 <UART_Receive_Char>
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 83       	st	Z, r24
     ff6:	10 c0       	rjmp	.+32     	; 0x1018 <UART_Receive_String+0x50>
    while (Buffer[i] != DefaultStop) {
        i++;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
        Buffer[i] = UART_Receive_Char();
    1002:	29 81       	ldd	r18, Y+1	; 0x01
    1004:	3a 81       	ldd	r19, Y+2	; 0x02
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	8c 01       	movw	r16, r24
    100c:	02 0f       	add	r16, r18
    100e:	13 1f       	adc	r17, r19
    1010:	0e 94 a9 07 	call	0xf52	; 0xf52 <UART_Receive_Char>
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
void UART_Receive_String(char *Buffer)
{
    int i = 0;

    Buffer[i] = UART_Receive_Char();
    while (Buffer[i] != DefaultStop) {
    1018:	29 81       	ldd	r18, Y+1	; 0x01
    101a:	3a 81       	ldd	r19, Y+2	; 0x02
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	fc 01       	movw	r30, r24
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	80 81       	ld	r24, Z
    1028:	8d 30       	cpi	r24, 0x0D	; 13
    102a:	31 f7       	brne	.-52     	; 0xff8 <UART_Receive_String+0x30>
        i++;
        Buffer[i] = UART_Receive_Char();

    }

    Buffer[i] = '\0'; // Null-terminate the string
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	f9 01       	movw	r30, r18
    1036:	e8 0f       	add	r30, r24
    1038:	f9 1f       	adc	r31, r25
    103a:	10 82       	st	Z, r1
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <UART_RX_InterruptEnable>:
// ==============================================


// Receive complete
void UART_RX_InterruptEnable(void)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    1056:	aa e2       	ldi	r26, 0x2A	; 42
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e2       	ldi	r30, 0x2A	; 42
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	8c 93       	st	X, r24
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <UART_TX_InterruptEnable>:

// Transmission complete
void UART_TX_InterruptEnable(void)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    1072:	aa e2       	ldi	r26, 0x2A	; 42
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ea e2       	ldi	r30, 0x2A	; 42
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24
}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <UART_RX_InterruptDisable>:


// Receive complete
void UART_RX_InterruptDisable(void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
    108e:	aa e2       	ldi	r26, 0x2A	; 42
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ea e2       	ldi	r30, 0x2A	; 42
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	8c 93       	st	X, r24
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <UART_TX_InterruptDisable>:

// Transmission complete
void UART_TX_InterruptDisable(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,TXCIE);
    10aa:	aa e2       	ldi	r26, 0x2A	; 42
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ea e2       	ldi	r30, 0x2A	; 42
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8f 7b       	andi	r24, 0xBF	; 191
    10b6:	8c 93       	st	X, r24
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <UART_RX_SetCallBack>:
// 		Call Back functions
// ==============================================


void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <UART_RX_SetCallBack+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	90 93 34 02 	sts	0x0234, r25
    10d4:	80 93 33 02 	sts	0x0233, r24
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <UART_TX_SetCallBack+0x6>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	90 93 36 02 	sts	0x0236, r25
    10f8:	80 93 35 02 	sts	0x0235, r24
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <__vector_15>:
// 		ISR
// ==============================================


ISR(USART_TXC_vect)
{
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_Fptr!=NULLPTR)
    1130:	80 91 35 02 	lds	r24, 0x0235
    1134:	90 91 36 02 	lds	r25, 0x0236
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	29 f0       	breq	.+10     	; 0x1146 <__vector_15+0x40>
	{
		UART_TX_Fptr();
    113c:	e0 91 35 02 	lds	r30, 0x0235
    1140:	f0 91 36 02 	lds	r31, 0x0236
    1144:	09 95       	icall
	}
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <__vector_13>:


ISR(USART_RXC_vect)
{
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	if(UART_RX_Fptr!=NULLPTR)
    1196:	80 91 33 02 	lds	r24, 0x0233
    119a:	90 91 34 02 	lds	r25, 0x0234
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	29 f0       	breq	.+10     	; 0x11ac <__vector_13+0x40>
	{
		UART_RX_Fptr();
    11a2:	e0 91 33 02 	lds	r30, 0x0233
    11a6:	f0 91 34 02 	lds	r31, 0x0234
    11aa:	09 95       	icall
	}
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <UART_Receive_NoBlock>:


u8 UART_Receive_NoBlock(u8 *pdata)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <UART_Receive_NoBlock+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0;
    11e2:	19 82       	std	Y+1, r1	; 0x01
	// Check if any data is received and store it in the passed buffer
	if(GET_BIT(UCSRA,RXC))
    11e4:	eb e2       	ldi	r30, 0x2B	; 43
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	4c f4       	brge	.+18     	; 0x1200 <UART_Receive_NoBlock+0x2e>
	{
		*pdata = UDR;
    11ee:	ec e2       	ldi	r30, 0x2C	; 44
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	ea 81       	ldd	r30, Y+2	; 0x02
    11f6:	fb 81       	ldd	r31, Y+3	; 0x03
    11f8:	80 83       	st	Z, r24
		status=1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <UART_Receive_NoBlock+0x30>
	}else{
		status = 0;
    1200:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <UART_SendString_ASYNCH>:
// 		Asynchronous functions
// ==============================================


void UART_SendString_ASYNCH(u8 *str)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <UART_SendString_ASYNCH+0x6>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str = str;
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	90 93 30 02 	sts	0x0230, r25
    1226:	80 93 2f 02 	sts	0x022F, r24
	UART_Send_Char(str[0]);
    122a:	e9 81       	ldd	r30, Y+1	; 0x01
    122c:	fa 81       	ldd	r31, Y+2	; 0x02
    122e:	80 81       	ld	r24, Z
    1230:	0e 94 8f 07 	call	0xf1e	; 0xf1e <UART_Send_Char>

	UART_TX_SetCallBack(Func_TX);
    1234:	85 e2       	ldi	r24, 0x25	; 37
    1236:	99 e0       	ldi	r25, 0x09	; 9
    1238:	0e 94 71 08 	call	0x10e2	; 0x10e2 <UART_TX_SetCallBack>
	UART_TX_InterruptEnable();
    123c:	0e 94 35 08 	call	0x106a	; 0x106a <UART_TX_InterruptEnable>
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <Func_TX>:


static void Func_TX(void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	static u8 i=1;
	if(Asynch_Send_Str[i] != '\0')
    1252:	20 91 2f 02 	lds	r18, 0x022F
    1256:	30 91 30 02 	lds	r19, 0x0230
    125a:	80 91 68 01 	lds	r24, 0x0168
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	e8 0f       	add	r30, r24
    1266:	f9 1f       	adc	r31, r25
    1268:	80 81       	ld	r24, Z
    126a:	88 23       	and	r24, r24
    126c:	a1 f0       	breq	.+40     	; 0x1296 <Func_TX+0x4c>
	{
		UART_SendByteNoBlock(Asynch_Send_Str[i]);
    126e:	20 91 2f 02 	lds	r18, 0x022F
    1272:	30 91 30 02 	lds	r19, 0x0230
    1276:	80 91 68 01 	lds	r24, 0x0168
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	e8 0f       	add	r30, r24
    1282:	f9 1f       	adc	r31, r25
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 77 07 	call	0xeee	; 0xeee <UART_SendByteNoBlock>
		i++;
    128a:	80 91 68 01 	lds	r24, 0x0168
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	80 93 68 01 	sts	0x0168, r24
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <Func_TX+0x56>
	}else{
		i=1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 68 01 	sts	0x0168, r24
		UART_TX_InterruptDisable();
    129c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <UART_TX_InterruptDisable>
	}
}
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <UART_ReceiveString_ASYNCH>:

// -----------------------------------------------

void UART_ReceiveString_ASYNCH(u8* str)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <UART_ReceiveString_ASYNCH+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
	Asynch_receive_str = str;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	90 93 32 02 	sts	0x0232, r25
    12bc:	80 93 31 02 	sts	0x0231, r24
	UART_RX_InterruptEnable();
    12c0:	0e 94 27 08 	call	0x104e	; 0x104e <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(Receive_Int_Function);
    12c4:	8b e6       	ldi	r24, 0x6B	; 107
    12c6:	99 e0       	ldi	r25, 0x09	; 9
    12c8:	0e 94 5f 08 	call	0x10be	; 0x10be <UART_RX_SetCallBack>
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <Receive_Int_Function>:



static void Receive_Int_Function(void)
{
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	Asynch_receive_str[i] = UART_ReceiveByteNoBlock();
    12e2:	20 91 31 02 	lds	r18, 0x0231
    12e6:	30 91 32 02 	lds	r19, 0x0232
    12ea:	80 91 2e 02 	lds	r24, 0x022E
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	89 01       	movw	r16, r18
    12f4:	08 0f       	add	r16, r24
    12f6:	19 1f       	adc	r17, r25
    12f8:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_ReceiveByteNoBlock>
    12fc:	f8 01       	movw	r30, r16
    12fe:	80 83       	st	Z, r24
	i++;
    1300:	80 91 2e 02 	lds	r24, 0x022E
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	80 93 2e 02 	sts	0x022E, r24
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	2a 97       	sbiw	r28, 0x0a	; 10
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	9b 83       	std	Y+3, r25	; 0x03
    132a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	19 f4       	brne	.+6      	; 0x133e <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	bb c0       	rjmp	.+374    	; 0x14b4 <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	23 e4       	ldi	r18, 0x43	; 67
    1344:	32 e0       	ldi	r19, 0x02	; 2
    1346:	3f 83       	std	Y+7, r19	; 0x07
    1348:	2e 83       	std	Y+6, r18	; 0x06
    134a:	99 87       	std	Y+9, r25	; 0x09
    134c:	88 87       	std	Y+8, r24	; 0x08
    134e:	35 e0       	ldi	r19, 0x05	; 5
    1350:	3a 87       	std	Y+10, r19	; 0x0a
    1352:	e8 85       	ldd	r30, Y+8	; 0x08
    1354:	f9 85       	ldd	r31, Y+9	; 0x09
    1356:	00 80       	ld	r0, Z
    1358:	28 85       	ldd	r18, Y+8	; 0x08
    135a:	39 85       	ldd	r19, Y+9	; 0x09
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	39 87       	std	Y+9, r19	; 0x09
    1362:	28 87       	std	Y+8, r18	; 0x08
    1364:	ee 81       	ldd	r30, Y+6	; 0x06
    1366:	ff 81       	ldd	r31, Y+7	; 0x07
    1368:	00 82       	st	Z, r0
    136a:	2e 81       	ldd	r18, Y+6	; 0x06
    136c:	3f 81       	ldd	r19, Y+7	; 0x07
    136e:	2f 5f       	subi	r18, 0xFF	; 255
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	3f 83       	std	Y+7, r19	; 0x07
    1374:	2e 83       	std	Y+6, r18	; 0x06
    1376:	3a 85       	ldd	r19, Y+10	; 0x0a
    1378:	31 50       	subi	r19, 0x01	; 1
    137a:	3a 87       	std	Y+10, r19	; 0x0a
    137c:	8a 85       	ldd	r24, Y+10	; 0x0a
    137e:	88 23       	and	r24, r24
    1380:	41 f7       	brne	.-48     	; 0x1352 <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
    1382:	ea 81       	ldd	r30, Y+2	; 0x02
    1384:	fb 81       	ldd	r31, Y+3	; 0x03
    1386:	80 81       	ld	r24, Z
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	08 f0       	brcs	.+2      	; 0x138e <TIMER0_Init+0x7a>
    138c:	5e c0       	rjmp	.+188    	; 0x144a <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
    138e:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
    1390:	ea 81       	ldd	r30, Y+2	; 0x02
    1392:	fb 81       	ldd	r31, Y+3	; 0x03
    1394:	80 81       	ld	r24, Z
    1396:	e8 2f       	mov	r30, r24
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	fd 83       	std	Y+5, r31	; 0x05
    139c:	ec 83       	std	Y+4, r30	; 0x04
    139e:	2c 81       	ldd	r18, Y+4	; 0x04
    13a0:	3d 81       	ldd	r19, Y+5	; 0x05
    13a2:	21 30       	cpi	r18, 0x01	; 1
    13a4:	31 05       	cpc	r19, r1
    13a6:	21 f1       	breq	.+72     	; 0x13f0 <TIMER0_Init+0xdc>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <TIMER0_Init+0xa8>
    13b2:	ec 81       	ldd	r30, Y+4	; 0x04
    13b4:	fd 81       	ldd	r31, Y+5	; 0x05
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <TIMER0_Init+0xbe>
    13ba:	49 c0       	rjmp	.+146    	; 0x144e <TIMER0_Init+0x13a>
    13bc:	2c 81       	ldd	r18, Y+4	; 0x04
    13be:	3d 81       	ldd	r19, Y+5	; 0x05
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	21 f1       	breq	.+72     	; 0x140e <TIMER0_Init+0xfa>
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	91 05       	cpc	r25, r1
    13ce:	71 f1       	breq	.+92     	; 0x142c <TIMER0_Init+0x118>
    13d0:	3e c0       	rjmp	.+124    	; 0x144e <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
    13d2:	a3 e5       	ldi	r26, 0x53	; 83
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8f 7b       	andi	r24, 0xBF	; 191
    13de:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    13e0:	a3 e5       	ldi	r26, 0x53	; 83
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e3 e5       	ldi	r30, 0x53	; 83
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	87 7f       	andi	r24, 0xF7	; 247
    13ec:	8c 93       	st	X, r24
    13ee:	2f c0       	rjmp	.+94     	; 0x144e <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
    13f0:	a3 e5       	ldi	r26, 0x53	; 83
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e3 e5       	ldi	r30, 0x53	; 83
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 64       	ori	r24, 0x40	; 64
    13fc:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    13fe:	a3 e5       	ldi	r26, 0x53	; 83
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e3 e5       	ldi	r30, 0x53	; 83
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	87 7f       	andi	r24, 0xF7	; 247
    140a:	8c 93       	st	X, r24
    140c:	20 c0       	rjmp	.+64     	; 0x144e <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
    140e:	a3 e5       	ldi	r26, 0x53	; 83
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e3 e5       	ldi	r30, 0x53	; 83
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 7b       	andi	r24, 0xBF	; 191
    141a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    141c:	a3 e5       	ldi	r26, 0x53	; 83
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e3 e5       	ldi	r30, 0x53	; 83
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	8c 93       	st	X, r24
    142a:	11 c0       	rjmp	.+34     	; 0x144e <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
    142c:	a3 e5       	ldi	r26, 0x53	; 83
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e5       	ldi	r30, 0x53	; 83
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	80 64       	ori	r24, 0x40	; 64
    1438:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    143a:	a3 e5       	ldi	r26, 0x53	; 83
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e5       	ldi	r30, 0x53	; 83
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	88 60       	ori	r24, 0x08	; 8
    1446:	8c 93       	st	X, r24
    1448:	02 c0       	rjmp	.+4      	; 0x144e <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
    144e:	ea 81       	ldd	r30, Y+2	; 0x02
    1450:	fb 81       	ldd	r31, Y+3	; 0x03
    1452:	81 81       	ldd	r24, Z+1	; 0x01
    1454:	88 30       	cpi	r24, 0x08	; 8
    1456:	58 f4       	brcc	.+22     	; 0x146e <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
    1458:	a3 e5       	ldi	r26, 0x53	; 83
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e3 e5       	ldi	r30, 0x53	; 83
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	90 81       	ld	r25, Z
    1462:	ea 81       	ldd	r30, Y+2	; 0x02
    1464:	fb 81       	ldd	r31, Y+3	; 0x03
    1466:	81 81       	ldd	r24, Z+1	; 0x01
    1468:	89 2b       	or	r24, r25
    146a:	8c 93       	st	X, r24
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	ea 81       	ldd	r30, Y+2	; 0x02
    1480:	fb 81       	ldd	r31, Y+3	; 0x03
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	82 95       	swap	r24
    148a:	92 95       	swap	r25
    148c:	90 7f       	andi	r25, 0xF0	; 240
    148e:	98 27       	eor	r25, r24
    1490:	80 7f       	andi	r24, 0xF0	; 240
    1492:	98 27       	eor	r25, r24
    1494:	82 2b       	or	r24, r18
    1496:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
    1498:	a9 e5       	ldi	r26, 0x59	; 89
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e9 e5       	ldi	r30, 0x59	; 89
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	20 81       	ld	r18, Z
    14a2:	ea 81       	ldd	r30, Y+2	; 0x02
    14a4:	fb 81       	ldd	r31, Y+3	; 0x03
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	ea 81       	ldd	r30, Y+2	; 0x02
    14aa:	fb 81       	ldd	r31, Y+3	; 0x03
    14ac:	84 81       	ldd	r24, Z+4	; 0x04
    14ae:	89 2b       	or	r24, r25
    14b0:	82 2b       	or	r24, r18
    14b2:	8c 93       	st	X, r24



	}

	return RetValue;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    14b6:	2a 96       	adiw	r28, 0x0a	; 10
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
    14d0:	a3 e5       	ldi	r26, 0x53	; 83
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e3 e5       	ldi	r30, 0x53	; 83
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    14de:	a3 e5       	ldi	r26, 0x53	; 83
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e3 e5       	ldi	r30, 0x53	; 83
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8d 7f       	andi	r24, 0xFD	; 253
    14ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    14ec:	a3 e5       	ldi	r26, 0x53	; 83
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e3 e5       	ldi	r30, 0x53	; 83
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8b 7f       	andi	r24, 0xFB	; 251
    14f8:	8c 93       	st	X, r24
	return ES_OK;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <TIMER0_GetCompareValue+0x6>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    1510:	ec e5       	ldi	r30, 0x5C	; 92
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	80 83       	st	Z, r24

	return ES_OK;
    151c:	80 e0       	ldi	r24, 0x00	; 0

}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    1534:	ec e5       	ldi	r30, 0x5C	; 92
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	80 83       	st	Z, r24

	return ES_OK;
    153c:	80 e0       	ldi	r24, 0x00	; 0

}
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <TIMER0_GetCounterValue+0x6>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    1554:	e2 e5       	ldi	r30, 0x52	; 82
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	e9 81       	ldd	r30, Y+1	; 0x01
    155c:	fa 81       	ldd	r31, Y+2	; 0x02
    155e:	80 83       	st	Z, r24


	return ES_OK;
    1560:	80 e0       	ldi	r24, 0x00	; 0
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    1578:	e2 e5       	ldi	r30, 0x52	; 82
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	80 83       	st	Z, r24

	return ES_OK;
    1580:	80 e0       	ldi	r24, 0x00	; 0

}
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <TIMER0_GetOVF_Flag+0x6>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    1598:	80 91 3b 02 	lds	r24, 0x023B
    159c:	e9 81       	ldd	r30, Y+1	; 0x01
    159e:	fa 81       	ldd	r31, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
	return ES_OK;
    15a2:	80 e0       	ldi	r24, 0x00	; 0

}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(u8 dutyCycle)
{
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <PWM_Set_DutyCycle+0xa>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    15be:	80 91 43 02 	lds	r24, 0x0243
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	29 f0       	breq	.+10     	; 0x15d0 <PWM_Set_DutyCycle+0x22>
    15c6:	80 91 43 02 	lds	r24, 0x0243
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <PWM_Set_DutyCycle+0x22>
    15ce:	65 c0       	rjmp	.+202    	; 0x169a <PWM_Set_DutyCycle+0xec>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    15d0:	80 91 45 02 	lds	r24, 0x0245
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	69 f5       	brne	.+90     	; 0x1632 <PWM_Set_DutyCycle+0x84>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    15d8:	0c e5       	ldi	r16, 0x5C	; 92
    15da:	10 e0       	ldi	r17, 0x00	; 0
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	aa 27       	eor	r26, r26
    15e4:	97 fd       	sbrc	r25, 7
    15e6:	a0 95       	com	r26
    15e8:	ba 2f       	mov	r27, r26
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	48 ec       	ldi	r20, 0xC8	; 200
    1600:	52 e4       	ldi	r21, 0x42	; 66
    1602:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	81 50       	subi	r24, 0x01	; 1
    162c:	f8 01       	movw	r30, r16
    162e:	80 83       	st	Z, r24
    1630:	32 c0       	rjmp	.+100    	; 0x1696 <PWM_Set_DutyCycle+0xe8>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    1632:	80 91 45 02 	lds	r24, 0x0245
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	71 f5       	brne	.+92     	; 0x1696 <PWM_Set_DutyCycle+0xe8>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    163a:	0c e5       	ldi	r16, 0x5C	; 92
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	98 2f       	mov	r25, r24
    1646:	88 27       	eor	r24, r24
    1648:	aa 27       	eor	r26, r26
    164a:	97 fd       	sbrc	r25, 7
    164c:	a0 95       	com	r26
    164e:	ba 2f       	mov	r27, r26
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	48 ec       	ldi	r20, 0xC8	; 200
    1666:	52 ec       	ldi	r21, 0xC2	; 194
    1668:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	53 e4       	ldi	r21, 0x43	; 67
    167c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	f8 01       	movw	r30, r16
    1694:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    1696:	19 82       	std	Y+1, r1	; 0x01
    1698:	02 c0       	rjmp	.+4      	; 0x169e <PWM_Set_DutyCycle+0xf0>
	}else{
		RetValue = ES_NOT_OK;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <Timer0_Set_Delay_ms>:



void Timer0_Set_Delay_ms(u32 delay_ms)
{
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	29 97       	sbiw	r28, 0x09	; 9
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	6e 83       	std	Y+6, r22	; 0x06
    16cc:	7f 83       	std	Y+7, r23	; 0x07
    16ce:	88 87       	std	Y+8, r24	; 0x08
    16d0:	99 87       	std	Y+9, r25	; 0x09
	u32 CountsNum = (delay_ms * F_CPU) / (1000UL * Global_Timer0_Cfg.prescalar);
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	9f 81       	ldd	r25, Y+7	; 0x07
    16d6:	a8 85       	ldd	r26, Y+8	; 0x08
    16d8:	b9 85       	ldd	r27, Y+9	; 0x09
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	34 e2       	ldi	r19, 0x24	; 36
    16de:	44 ef       	ldi	r20, 0xF4	; 244
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 19 20 	call	0x4032	; 0x4032 <__mulsi3>
    16ea:	7b 01       	movw	r14, r22
    16ec:	8c 01       	movw	r16, r24
    16ee:	80 91 44 02 	lds	r24, 0x0244
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 e0       	ldi	r26, 0x00	; 0
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	28 ee       	ldi	r18, 0xE8	; 232
    16fc:	33 e0       	ldi	r19, 0x03	; 3
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 19 20 	call	0x4032	; 0x4032 <__mulsi3>
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	c8 01       	movw	r24, r16
    1710:	b7 01       	movw	r22, r14
    1712:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodsi4>
    1716:	da 01       	movw	r26, r20
    1718:	c9 01       	movw	r24, r18
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	9b 83       	std	Y+3, r25	; 0x03
    171e:	ac 83       	std	Y+4, r26	; 0x04
    1720:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Num_Delay = CountsNum / 256;
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	9b 81       	ldd	r25, Y+3	; 0x03
    1726:	ac 81       	ldd	r26, Y+4	; 0x04
    1728:	bd 81       	ldd	r27, Y+5	; 0x05
    172a:	89 2f       	mov	r24, r25
    172c:	9a 2f       	mov	r25, r26
    172e:	ab 2f       	mov	r26, r27
    1730:	bb 27       	eor	r27, r27
    1732:	90 93 49 02 	sts	0x0249, r25
    1736:	80 93 48 02 	sts	0x0248, r24
	u8 RestCounts = CountsNum % 256;
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_SetCounterValue(256 - RestCounts);
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	81 95       	neg	r24
    1742:	0e 94 b6 0a 	call	0x156c	; 0x156c <TIMER0_SetCounterValue>

	Global_Delay_Status = 0; // Reset the delay status
    1746:	10 92 3c 02 	sts	0x023C, r1
	while (!Global_Delay_Status);
    174a:	80 91 3c 02 	lds	r24, 0x023C
    174e:	88 23       	and	r24, r24
    1750:	e1 f3       	breq	.-8      	; 0x174a <Timer0_Set_Delay_ms+0x9c>
}
    1752:	29 96       	adiw	r28, 0x09	; 9
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	08 95       	ret

0000176c <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <Timer0_OVF_SetCallBack+0x6>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	90 93 38 02 	sts	0x0238, r25
    1782:	80 93 37 02 	sts	0x0237, r24


}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <Timer0_OCM_SetCallBack+0x6>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	90 93 3a 02 	sts	0x023A, r25
    17a6:	80 93 39 02 	sts	0x0239, r24
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OVF_Fptr != NULLPTR)
    17de:	80 91 37 02 	lds	r24, 0x0237
    17e2:	90 91 38 02 	lds	r25, 0x0238
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	51 f0       	breq	.+20     	; 0x17fe <__vector_11+0x4a>
	{
		OVF_Number++;
    17ea:	80 91 3b 02 	lds	r24, 0x023B
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 3b 02 	sts	0x023B, r24
		Timer0_OVF_Fptr();
    17f4:	e0 91 37 02 	lds	r30, 0x0237
    17f8:	f0 91 38 02 	lds	r31, 0x0238
    17fc:	09 95       	icall
	}
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	7f 91       	pop	r23
    1810:	6f 91       	pop	r22
    1812:	5f 91       	pop	r21
    1814:	4f 91       	pop	r20
    1816:	3f 91       	pop	r19
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    184e:	80 91 39 02 	lds	r24, 0x0239
    1852:	90 91 3a 02 	lds	r25, 0x023A
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	29 f0       	breq	.+10     	; 0x1864 <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    185a:	e0 91 39 02 	lds	r30, 0x0239
    185e:	f0 91 3a 02 	lds	r31, 0x023A
    1862:	09 95       	icall
	}
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <SPI_Init>:
#include "SPI.h"



void SPI_Init(SPI_Config_t * SPI_Cfg)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <SPI_Init+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	if(SPI_Cfg->Device_Mode == SPI_DEVICE_MODE_MASTER)
    1898:	e9 81       	ldd	r30, Y+1	; 0x01
    189a:	fa 81       	ldd	r31, Y+2	; 0x02
    189c:	80 81       	ld	r24, Z
    189e:	80 31       	cpi	r24, 0x10	; 16
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <SPI_Init+0x1a>
    18a2:	d8 c0       	rjmp	.+432    	; 0x1a54 <SPI_Init+0x1ca>
	{
		// SCK, MOSI, SS Output
		DIO_ES_tSetPinDirection(SPI_REG, SCK, OUTPUT);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	67 e0       	ldi	r22, 0x07	; 7
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, OUTPUT);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	65 e0       	ldi	r22, 0x05	; 5
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, OUTPUT);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	64 e0       	ldi	r22, 0x04	; 4
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>

		// Set MISO pin as INPUT
		DIO_ES_tSetPinDirection(SPI_REG, MISO, INPUT);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	66 e0       	ldi	r22, 0x06	; 6
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>


		SPCR |= SPI_DEVICE_MODE_MASTER;
    18cc:	ad e2       	ldi	r26, 0x2D	; 45
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ed e2       	ldi	r30, 0x2D	; 45
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	80 61       	ori	r24, 0x10	; 16
    18d8:	8c 93       	st	X, r24

		// The master is the one who generates the clock
		if(SPI_Cfg->Prescalar == SPI_Prescalar_4){
    18da:	e9 81       	ldd	r30, Y+1	; 0x01
    18dc:	fa 81       	ldd	r31, Y+2	; 0x02
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	88 23       	and	r24, r24
    18e2:	b1 f4       	brne	.+44     	; 0x1910 <SPI_Init+0x86>
			CLR_BIT(SPCR,SPR0);
    18e4:	ad e2       	ldi	r26, 0x2D	; 45
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	ed e2       	ldi	r30, 0x2D	; 45
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	8e 7f       	andi	r24, 0xFE	; 254
    18f0:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    18f2:	ad e2       	ldi	r26, 0x2D	; 45
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	ed e2       	ldi	r30, 0x2D	; 45
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8d 7f       	andi	r24, 0xFD	; 253
    18fe:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1900:	ae e2       	ldi	r26, 0x2E	; 46
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ee e2       	ldi	r30, 0x2E	; 46
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8e 7f       	andi	r24, 0xFE	; 254
    190c:	8c 93       	st	X, r24
    190e:	bd c0       	rjmp	.+378    	; 0x1a8a <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_16){
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	84 81       	ldd	r24, Z+4	; 0x04
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	b1 f4       	brne	.+44     	; 0x1946 <SPI_Init+0xbc>
			SET_BIT(SPCR,SPR0);
    191a:	ad e2       	ldi	r26, 0x2D	; 45
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ed e2       	ldi	r30, 0x2D	; 45
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1928:	ad e2       	ldi	r26, 0x2D	; 45
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ed e2       	ldi	r30, 0x2D	; 45
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8d 7f       	andi	r24, 0xFD	; 253
    1934:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1936:	ae e2       	ldi	r26, 0x2E	; 46
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ee e2       	ldi	r30, 0x2E	; 46
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8e 7f       	andi	r24, 0xFE	; 254
    1942:	8c 93       	st	X, r24
    1944:	a2 c0       	rjmp	.+324    	; 0x1a8a <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_64){
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	84 81       	ldd	r24, Z+4	; 0x04
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	b1 f4       	brne	.+44     	; 0x197c <SPI_Init+0xf2>
			CLR_BIT(SPCR,SPR0);
    1950:	ad e2       	ldi	r26, 0x2D	; 45
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ed e2       	ldi	r30, 0x2D	; 45
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8e 7f       	andi	r24, 0xFE	; 254
    195c:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    195e:	ad e2       	ldi	r26, 0x2D	; 45
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ed e2       	ldi	r30, 0x2D	; 45
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	82 60       	ori	r24, 0x02	; 2
    196a:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    196c:	ae e2       	ldi	r26, 0x2E	; 46
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ee e2       	ldi	r30, 0x2E	; 46
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8e 7f       	andi	r24, 0xFE	; 254
    1978:	8c 93       	st	X, r24
    197a:	87 c0       	rjmp	.+270    	; 0x1a8a <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_128){
    197c:	e9 81       	ldd	r30, Y+1	; 0x01
    197e:	fa 81       	ldd	r31, Y+2	; 0x02
    1980:	84 81       	ldd	r24, Z+4	; 0x04
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	b1 f4       	brne	.+44     	; 0x19b2 <SPI_Init+0x128>
			SET_BIT(SPCR,SPR0);
    1986:	ad e2       	ldi	r26, 0x2D	; 45
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ed e2       	ldi	r30, 0x2D	; 45
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	81 60       	ori	r24, 0x01	; 1
    1992:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    1994:	ad e2       	ldi	r26, 0x2D	; 45
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ed e2       	ldi	r30, 0x2D	; 45
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    19a2:	ae e2       	ldi	r26, 0x2E	; 46
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ee e2       	ldi	r30, 0x2E	; 46
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8e 7f       	andi	r24, 0xFE	; 254
    19ae:	8c 93       	st	X, r24
    19b0:	6c c0       	rjmp	.+216    	; 0x1a8a <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_2){
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	84 81       	ldd	r24, Z+4	; 0x04
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	b1 f4       	brne	.+44     	; 0x19e8 <SPI_Init+0x15e>
			CLR_BIT(SPCR,SPR0);
    19bc:	ad e2       	ldi	r26, 0x2D	; 45
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ed e2       	ldi	r30, 0x2D	; 45
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    19ca:	ad e2       	ldi	r26, 0x2D	; 45
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ed e2       	ldi	r30, 0x2D	; 45
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8d 7f       	andi	r24, 0xFD	; 253
    19d6:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    19d8:	ae e2       	ldi	r26, 0x2E	; 46
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ee e2       	ldi	r30, 0x2E	; 46
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	8c 93       	st	X, r24
    19e6:	51 c0       	rjmp	.+162    	; 0x1a8a <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_8){
    19e8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ea:	fa 81       	ldd	r31, Y+2	; 0x02
    19ec:	84 81       	ldd	r24, Z+4	; 0x04
    19ee:	85 30       	cpi	r24, 0x05	; 5
    19f0:	b1 f4       	brne	.+44     	; 0x1a1e <SPI_Init+0x194>
			SET_BIT(SPCR,SPR0);
    19f2:	ad e2       	ldi	r26, 0x2D	; 45
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ed e2       	ldi	r30, 0x2D	; 45
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1a00:	ad e2       	ldi	r26, 0x2D	; 45
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ed e2       	ldi	r30, 0x2D	; 45
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	8d 7f       	andi	r24, 0xFD	; 253
    1a0c:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1a0e:	ae e2       	ldi	r26, 0x2E	; 46
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ee e2       	ldi	r30, 0x2E	; 46
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	81 60       	ori	r24, 0x01	; 1
    1a1a:	8c 93       	st	X, r24
    1a1c:	36 c0       	rjmp	.+108    	; 0x1a8a <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_32){
    1a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a20:	fa 81       	ldd	r31, Y+2	; 0x02
    1a22:	84 81       	ldd	r24, Z+4	; 0x04
    1a24:	86 30       	cpi	r24, 0x06	; 6
    1a26:	89 f5       	brne	.+98     	; 0x1a8a <SPI_Init+0x200>
			CLR_BIT(SPCR,SPR0);
    1a28:	ad e2       	ldi	r26, 0x2D	; 45
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ed e2       	ldi	r30, 0x2D	; 45
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8e 7f       	andi	r24, 0xFE	; 254
    1a34:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    1a36:	ad e2       	ldi	r26, 0x2D	; 45
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	ed e2       	ldi	r30, 0x2D	; 45
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	82 60       	ori	r24, 0x02	; 2
    1a42:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1a44:	ae e2       	ldi	r26, 0x2E	; 46
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	ee e2       	ldi	r30, 0x2E	; 46
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	8c 93       	st	X, r24
    1a52:	1b c0       	rjmp	.+54     	; 0x1a8a <SPI_Init+0x200>
		}

	}else
	{   // Slave

		DIO_ES_tSetPinDirection(SPI_REG, MISO, OUTPUT);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	66 e0       	ldi	r22, 0x06	; 6
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		// Set SCK, MOSI, and SS pins as INPUT (slave mode doesn't need them as output)
		DIO_ES_tSetPinDirection(SPI_REG, SCK, INPUT);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	67 e0       	ldi	r22, 0x07	; 7
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, INPUT);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	65 e0       	ldi	r22, 0x05	; 5
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, INPUT);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	64 e0       	ldi	r22, 0x04	; 4
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>


		SPCR &= SPI_DEVICE_MODE_SLAVE;
    1a7c:	ad e2       	ldi	r26, 0x2D	; 45
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ed e2       	ldi	r30, 0x2D	; 45
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 7e       	andi	r24, 0xEF	; 239
    1a88:	8c 93       	st	X, r24
	}



	// Common Configurations
	SPCR |= SPI_Cfg->CLK_Polarity;
    1a8a:	ad e2       	ldi	r26, 0x2D	; 45
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ed e2       	ldi	r30, 0x2D	; 45
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	90 81       	ld	r25, Z
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	89 2b       	or	r24, r25
    1a9c:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->CLK_PHASE;
    1a9e:	ad e2       	ldi	r26, 0x2D	; 45
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	ed e2       	ldi	r30, 0x2D	; 45
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	90 81       	ld	r25, Z
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	83 81       	ldd	r24, Z+3	; 0x03
    1aae:	89 2b       	or	r24, r25
    1ab0:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->Data_Order;
    1ab2:	ad e2       	ldi	r26, 0x2D	; 45
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ed e2       	ldi	r30, 0x2D	; 45
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	90 81       	ld	r25, Z
    1abc:	e9 81       	ldd	r30, Y+1	; 0x01
    1abe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac0:	81 81       	ldd	r24, Z+1	; 0x01
    1ac2:	89 2b       	or	r24, r25
    1ac4:	8c 93       	st	X, r24


	// Enable SPI
	SET_BIT(SPCR,SPE);
    1ac6:	ad e2       	ldi	r26, 0x2D	; 45
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	ed e2       	ldi	r30, 0x2D	; 45
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 64       	ori	r24, 0x40	; 64
    1ad2:	8c 93       	st	X, r24
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <SPI_Transmit_Receive>:




u8 SPI_Transmit_Receive(u8 data)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	0f 92       	push	r0
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1aea:	ef e2       	ldi	r30, 0x2F	; 47
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    1af2:	ee e2       	ldi	r30, 0x2E	; 46
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	88 23       	and	r24, r24
    1afa:	dc f7       	brge	.-10     	; 0x1af2 <SPI_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
    1afc:	ef e2       	ldi	r30, 0x2F	; 47
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z

}
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <I2C_Init>:
#include "I2C.h"



void I2C_Init(unsigned long SCL_Clock)
{
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <I2C_Init+0xa>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <I2C_Init+0xc>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	69 83       	std	Y+1, r22	; 0x01
    1b1c:	7a 83       	std	Y+2, r23	; 0x02
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
    1b20:	9c 83       	std	Y+4, r25	; 0x04
	TWBR = (unsigned char)(((F_CPU/SCL_Clock)-16)/(2*I2C_PRESCALAR));
    1b22:	00 e2       	ldi	r16, 0x20	; 32
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	94 e2       	ldi	r25, 0x24	; 36
    1b2a:	a4 ef       	ldi	r26, 0xF4	; 244
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	29 81       	ldd	r18, Y+1	; 0x01
    1b30:	3a 81       	ldd	r19, Y+2	; 0x02
    1b32:	4b 81       	ldd	r20, Y+3	; 0x03
    1b34:	5c 81       	ldd	r21, Y+4	; 0x04
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodsi4>
    1b3e:	da 01       	movw	r26, r20
    1b40:	c9 01       	movw	r24, r18
    1b42:	40 97       	sbiw	r24, 0x10	; 16
    1b44:	a1 09       	sbc	r26, r1
    1b46:	b1 09       	sbc	r27, r1
    1b48:	b6 95       	lsr	r27
    1b4a:	a7 95       	ror	r26
    1b4c:	97 95       	ror	r25
    1b4e:	87 95       	ror	r24
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 83       	st	Z, r24

	switch(I2C_PRESCALAR)
	{
	case I2C_PRESCALAR_1:
		CLR_BIT(TWSR,TWPS0);
    1b54:	a1 e2       	ldi	r26, 0x21	; 33
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e1 e2       	ldi	r30, 0x21	; 33
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8e 7f       	andi	r24, 0xFE	; 254
    1b60:	8c 93       	st	X, r24
		CLR_BIT(TWSR,TWPS1);
    1b62:	a1 e2       	ldi	r26, 0x21	; 33
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e1 e2       	ldi	r30, 0x21	; 33
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8d 7f       	andi	r24, 0xFD	; 253
    1b6e:	8c 93       	st	X, r24
	case I2C_PRESCALAR_64:
		SET_BIT(TWSR,TWPS0);
		SET_BIT(TWSR,TWPS1);
		break;
	}
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <I2C_Start>:




void I2C_Start(void)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	// Send start condition
	// Writing a one to TWINT clears the Flag.
	// The TWI will not start any operation as long as the
	// TWINT bit in TWCR is set
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1b8a:	e6 e5       	ldi	r30, 0x56	; 86
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	84 ea       	ldi	r24, 0xA4	; 164
    1b90:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// wait for transmission of START BIT
    1b92:	e6 e5       	ldi	r30, 0x56	; 86
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	88 23       	and	r24, r24
    1b9a:	dc f7       	brge	.-10     	; 0x1b92 <I2C_Start+0x10>
	while(TWSR != TWSR_START_TRANSMITTED);	// A START condition has been transmitted
    1b9c:	e1 e2       	ldi	r30, 0x21	; 33
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 30       	cpi	r24, 0x08	; 8
    1ba4:	d9 f7       	brne	.-10     	; 0x1b9c <I2C_Start+0x1a>
}
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <I2C_Write>:



void I2C_Write(u8 cByte)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
	TWDR = cByte;
    1bb8:	e3 e2       	ldi	r30, 0x23	; 35
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	80 83       	st	Z, r24
	// Clear TWINT bit in TWCR to start transmission of (address/data)
	TWCR = (1<<TWINT) | (1<<TWEN);
    1bc0:	e6 e5       	ldi	r30, 0x56	; 86
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	84 e8       	ldi	r24, 0x84	; 132
    1bc6:	80 83       	st	Z, r24
	//	Wait for TWINT Flag set. This indicates
	//	that the SLA+W has been transmitted,
	//	and ACK/NACK has been received.
	while(!GET_BIT(TWCR,TWINT));
    1bc8:	e6 e5       	ldi	r30, 0x56	; 86
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 23       	and	r24, r24
    1bd0:	dc f7       	brge	.-10     	; 0x1bc8 <I2C_Write+0x1c>
}
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <I2C_Stop>:



void I2C_Stop(void)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1be2:	e6 e5       	ldi	r30, 0x56	; 86
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	84 e9       	ldi	r24, 0x94	; 148
    1be8:	80 83       	st	Z, r24
}
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <I2C_Set_Address>:



void I2C_Set_Address(u8 slaveAddress)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	//	The TWAR should be loaded with the 7-bit slave address (in the seven most significant
	//	bits of TWAR)
	TWAR = (slaveAddress << 1);
    1bfc:	e2 e2       	ldi	r30, 0x22	; 34
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	88 0f       	add	r24, r24
    1c04:	80 83       	st	Z, r24
}
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <I2C_Slave_Read>:



// Read address and continue to read data byte
u8 I2C_Slave_Read(u8 *status)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <I2C_Slave_Read+0x6>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1c1c:	e6 e5       	ldi	r30, 0x56	; 86
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	84 ec       	ldi	r24, 0xC4	; 196
    1c22:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
    1c24:	e6 e5       	ldi	r30, 0x56	; 86
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 23       	and	r24, r24
    1c2c:	dc f7       	brge	.-10     	; 0x1c24 <I2C_Slave_Read+0x16>
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <I2C_Slave_Read+0x2a>
	// Flag is set and a valid status code can be read from TWSR

	while (TWSR != TWSR_Add_ACK_RETURNED) {
		// Handle error, expected SLA+R ACK not received
		*status = TWSR_Add_ACK_RETURNED;
    1c30:	e9 81       	ldd	r30, Y+1	; 0x01
    1c32:	fa 81       	ldd	r31, Y+2	; 0x02
    1c34:	80 e6       	ldi	r24, 0x60	; 96
    1c36:	80 83       	st	Z, r24
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
	// Flag is set and a valid status code can be read from TWSR

	while (TWSR != TWSR_Add_ACK_RETURNED) {
    1c38:	e1 e2       	ldi	r30, 0x21	; 33
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 36       	cpi	r24, 0x60	; 96
    1c40:	b9 f7       	brne	.-18     	; 0x1c30 <I2C_Slave_Read+0x22>
		// Handle error, expected SLA+R ACK not received
		*status = TWSR_Add_ACK_RETURNED;
	}
	// Continue Listening
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1c42:	e6 e5       	ldi	r30, 0x56	; 86
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	84 ec       	ldi	r24, 0xC4	; 196
    1c48:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));
    1c4a:	e6 e5       	ldi	r30, 0x56	; 86
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 23       	and	r24, r24
    1c52:	dc f7       	brge	.-10     	; 0x1c4a <I2C_Slave_Read+0x3c>
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <I2C_Slave_Read+0x50>
	// Data has been received ACK has been returned
	while(TWSR != TWSR_Data_ACK_RETURNED){
		*status = TWSR_Data_ACK_RETURNED;
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	80 e8       	ldi	r24, 0x80	; 128
    1c5c:	80 83       	st	Z, r24
	}
	// Continue Listening
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!GET_BIT(TWCR,TWINT));
	// Data has been received ACK has been returned
	while(TWSR != TWSR_Data_ACK_RETURNED){
    1c5e:	e1 e2       	ldi	r30, 0x21	; 33
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	80 38       	cpi	r24, 0x80	; 128
    1c66:	b9 f7       	brne	.-18     	; 0x1c56 <I2C_Slave_Read+0x48>
		*status = TWSR_Data_ACK_RETURNED;
	}

	return TWDR;
    1c68:	e3 e2       	ldi	r30, 0x23	; 35
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <I2C_Read>:


// Just read a byte
u8 I2C_Read(void)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1c80:	e6 e5       	ldi	r30, 0x56	; 86
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	84 ec       	ldi	r24, 0xC4	; 196
    1c86:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
    1c88:	e6 e5       	ldi	r30, 0x56	; 86
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	dc f7       	brge	.-10     	; 0x1c88 <I2C_Read+0x10>
	return TWDR;
    1c92:	e3 e2       	ldi	r30, 0x23	; 35
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <EXI_Set_CallBack+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <EXI_Set_CallBack+0x8>
    1ca6:	0f 92       	push	r0
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	7b 83       	std	Y+3, r23	; 0x03
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	81 f0       	breq	.+32     	; 0x1ce6 <EXI_Set_CallBack+0x48>
    1cc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	91 f0       	breq	.+36     	; 0x1cf4 <EXI_Set_CallBack+0x56>
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	9b 81       	ldd	r25, Y+3	; 0x03
    1cdc:	90 93 3e 02 	sts	0x023E, r25
    1ce0:	80 93 3d 02 	sts	0x023D, r24
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	90 93 40 02 	sts	0x0240, r25
    1cee:	80 93 3f 02 	sts	0x023F, r24
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf8:	90 93 42 02 	sts	0x0242, r25
    1cfc:	80 93 41 02 	sts	0x0241, r24
		break;
	}
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <EXI_ENABLE+0x6>
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3b 83       	std	Y+3, r19	; 0x03
    1d26:	2a 83       	std	Y+2, r18	; 0x02
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	89 f0       	breq	.+34     	; 0x1d54 <EXI_ENABLE+0x44>
    1d32:	2a 81       	ldd	r18, Y+2	; 0x02
    1d34:	3b 81       	ldd	r19, Y+3	; 0x03
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	a1 f0       	breq	.+40     	; 0x1d64 <EXI_ENABLE+0x54>
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	b9 f4       	brne	.+46     	; 0x1d72 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1d44:	ab e5       	ldi	r26, 0x5B	; 91
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	eb e5       	ldi	r30, 0x5B	; 91
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 64       	ori	r24, 0x40	; 64
    1d50:	8c 93       	st	X, r24
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    1d54:	ab e5       	ldi	r26, 0x5B	; 91
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e5       	ldi	r30, 0x5B	; 91
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 68       	ori	r24, 0x80	; 128
    1d60:	8c 93       	st	X, r24
    1d62:	07 c0       	rjmp	.+14     	; 0x1d72 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    1d64:	ab e5       	ldi	r26, 0x5B	; 91
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	eb e5       	ldi	r30, 0x5B	; 91
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 62       	ori	r24, 0x20	; 32
    1d70:	8c 93       	st	X, r24
		break;
	}
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <EXI_DISABLE+0x6>
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	3b 83       	std	Y+3, r19	; 0x03
    1d94:	2a 83       	std	Y+2, r18	; 0x02
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	89 f0       	breq	.+34     	; 0x1dc2 <EXI_DISABLE+0x44>
    1da0:	2a 81       	ldd	r18, Y+2	; 0x02
    1da2:	3b 81       	ldd	r19, Y+3	; 0x03
    1da4:	22 30       	cpi	r18, 0x02	; 2
    1da6:	31 05       	cpc	r19, r1
    1da8:	a1 f0       	breq	.+40     	; 0x1dd2 <EXI_DISABLE+0x54>
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	b9 f4       	brne	.+46     	; 0x1de0 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    1db2:	ab e5       	ldi	r26, 0x5B	; 91
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	eb e5       	ldi	r30, 0x5B	; 91
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8f 7b       	andi	r24, 0xBF	; 191
    1dbe:	8c 93       	st	X, r24
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    1dc2:	ab e5       	ldi	r26, 0x5B	; 91
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	eb e5       	ldi	r30, 0x5B	; 91
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8f 77       	andi	r24, 0x7F	; 127
    1dce:	8c 93       	st	X, r24
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    1dd2:	ab e5       	ldi	r26, 0x5B	; 91
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	eb e5       	ldi	r30, 0x5B	; 91
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8f 7d       	andi	r24, 0xDF	; 223
    1dde:	8c 93       	st	X, r24
		break;
	}
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	2a 97       	sbiw	r28, 0x0a	; 10
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	3a 87       	std	Y+10, r19	; 0x0a
    1e0c:	29 87       	std	Y+9, r18	; 0x09
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	91 05       	cpc	r25, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <EXI_TriggerEdge+0x2e>
    1e18:	66 c0       	rjmp	.+204    	; 0x1ee6 <EXI_TriggerEdge+0xfa>
    1e1a:	29 85       	ldd	r18, Y+9	; 0x09
    1e1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <EXI_TriggerEdge+0x3a>
    1e24:	bb c0       	rjmp	.+374    	; 0x1f9c <EXI_TriggerEdge+0x1b0>
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <EXI_TriggerEdge+0x44>
    1e2e:	dd c0       	rjmp	.+442    	; 0x1fea <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	38 87       	std	Y+8, r19	; 0x08
    1e38:	2f 83       	std	Y+7, r18	; 0x07
    1e3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3c:	98 85       	ldd	r25, Y+8	; 0x08
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	91 05       	cpc	r25, r1
    1e42:	21 f1       	breq	.+72     	; 0x1e8c <EXI_TriggerEdge+0xa0>
    1e44:	2f 81       	ldd	r18, Y+7	; 0x07
    1e46:	38 85       	ldd	r19, Y+8	; 0x08
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <EXI_TriggerEdge+0x6c>
    1e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e50:	98 85       	ldd	r25, Y+8	; 0x08
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	61 f0       	breq	.+24     	; 0x1e6e <EXI_TriggerEdge+0x82>
    1e56:	c9 c0       	rjmp	.+402    	; 0x1fea <EXI_TriggerEdge+0x1fe>
    1e58:	2f 81       	ldd	r18, Y+7	; 0x07
    1e5a:	38 85       	ldd	r19, Y+8	; 0x08
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	21 f1       	breq	.+72     	; 0x1eaa <EXI_TriggerEdge+0xbe>
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	98 85       	ldd	r25, Y+8	; 0x08
    1e66:	83 30       	cpi	r24, 0x03	; 3
    1e68:	91 05       	cpc	r25, r1
    1e6a:	71 f1       	breq	.+92     	; 0x1ec8 <EXI_TriggerEdge+0xdc>
    1e6c:	be c0       	rjmp	.+380    	; 0x1fea <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    1e6e:	a5 e5       	ldi	r26, 0x55	; 85
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e5 e5       	ldi	r30, 0x55	; 85
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8e 7f       	andi	r24, 0xFE	; 254
    1e7a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1e7c:	a5 e5       	ldi	r26, 0x55	; 85
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e5 e5       	ldi	r30, 0x55	; 85
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	8c 93       	st	X, r24
    1e8a:	af c0       	rjmp	.+350    	; 0x1fea <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1e8c:	a5 e5       	ldi	r26, 0x55	; 85
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e5 e5       	ldi	r30, 0x55	; 85
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	81 60       	ori	r24, 0x01	; 1
    1e98:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1e9a:	a5 e5       	ldi	r26, 0x55	; 85
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e5       	ldi	r30, 0x55	; 85
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8d 7f       	andi	r24, 0xFD	; 253
    1ea6:	8c 93       	st	X, r24
    1ea8:	a0 c0       	rjmp	.+320    	; 0x1fea <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    1eaa:	a5 e5       	ldi	r26, 0x55	; 85
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e5       	ldi	r30, 0x55	; 85
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e 7f       	andi	r24, 0xFE	; 254
    1eb6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1eb8:	a5 e5       	ldi	r26, 0x55	; 85
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e5       	ldi	r30, 0x55	; 85
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	8c 93       	st	X, r24
    1ec6:	91 c0       	rjmp	.+290    	; 0x1fea <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1ec8:	a5 e5       	ldi	r26, 0x55	; 85
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e5 e5       	ldi	r30, 0x55	; 85
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	81 60       	ori	r24, 0x01	; 1
    1ed4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1ed6:	a5 e5       	ldi	r26, 0x55	; 85
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e5 e5       	ldi	r30, 0x55	; 85
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	82 60       	ori	r24, 0x02	; 2
    1ee2:	8c 93       	st	X, r24
    1ee4:	82 c0       	rjmp	.+260    	; 0x1fea <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	3e 83       	std	Y+6, r19	; 0x06
    1eee:	2d 83       	std	Y+5, r18	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	21 f1       	breq	.+72     	; 0x1f42 <EXI_TriggerEdge+0x156>
    1efa:	2d 81       	ldd	r18, Y+5	; 0x05
    1efc:	3e 81       	ldd	r19, Y+6	; 0x06
    1efe:	22 30       	cpi	r18, 0x02	; 2
    1f00:	31 05       	cpc	r19, r1
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <EXI_TriggerEdge+0x122>
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	61 f0       	breq	.+24     	; 0x1f24 <EXI_TriggerEdge+0x138>
    1f0c:	6e c0       	rjmp	.+220    	; 0x1fea <EXI_TriggerEdge+0x1fe>
    1f0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f10:	3e 81       	ldd	r19, Y+6	; 0x06
    1f12:	22 30       	cpi	r18, 0x02	; 2
    1f14:	31 05       	cpc	r19, r1
    1f16:	21 f1       	breq	.+72     	; 0x1f60 <EXI_TriggerEdge+0x174>
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	83 30       	cpi	r24, 0x03	; 3
    1f1e:	91 05       	cpc	r25, r1
    1f20:	71 f1       	breq	.+92     	; 0x1f7e <EXI_TriggerEdge+0x192>
    1f22:	63 c0       	rjmp	.+198    	; 0x1fea <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1f24:	a5 e5       	ldi	r26, 0x55	; 85
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e5       	ldi	r30, 0x55	; 85
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8b 7f       	andi	r24, 0xFB	; 251
    1f30:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1f32:	a5 e5       	ldi	r26, 0x55	; 85
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e5 e5       	ldi	r30, 0x55	; 85
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	87 7f       	andi	r24, 0xF7	; 247
    1f3e:	8c 93       	st	X, r24
    1f40:	54 c0       	rjmp	.+168    	; 0x1fea <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1f42:	a5 e5       	ldi	r26, 0x55	; 85
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e5 e5       	ldi	r30, 0x55	; 85
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	84 60       	ori	r24, 0x04	; 4
    1f4e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1f50:	a5 e5       	ldi	r26, 0x55	; 85
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e5 e5       	ldi	r30, 0x55	; 85
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	87 7f       	andi	r24, 0xF7	; 247
    1f5c:	8c 93       	st	X, r24
    1f5e:	45 c0       	rjmp	.+138    	; 0x1fea <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    1f60:	a5 e5       	ldi	r26, 0x55	; 85
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e5 e5       	ldi	r30, 0x55	; 85
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8b 7f       	andi	r24, 0xFB	; 251
    1f6c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1f6e:	a5 e5       	ldi	r26, 0x55	; 85
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e5 e5       	ldi	r30, 0x55	; 85
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	88 60       	ori	r24, 0x08	; 8
    1f7a:	8c 93       	st	X, r24
    1f7c:	36 c0       	rjmp	.+108    	; 0x1fea <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1f7e:	a5 e5       	ldi	r26, 0x55	; 85
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e5 e5       	ldi	r30, 0x55	; 85
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	84 60       	ori	r24, 0x04	; 4
    1f8a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1f8c:	a5 e5       	ldi	r26, 0x55	; 85
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e5 e5       	ldi	r30, 0x55	; 85
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 60       	ori	r24, 0x08	; 8
    1f98:	8c 93       	st	X, r24
    1f9a:	27 c0       	rjmp	.+78     	; 0x1fea <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	3c 83       	std	Y+4, r19	; 0x04
    1fa4:	2b 83       	std	Y+3, r18	; 0x03
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	91 05       	cpc	r25, r1
    1fae:	31 f0       	breq	.+12     	; 0x1fbc <EXI_TriggerEdge+0x1d0>
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	23 30       	cpi	r18, 0x03	; 3
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	49 f0       	breq	.+18     	; 0x1fcc <EXI_TriggerEdge+0x1e0>
    1fba:	10 c0       	rjmp	.+32     	; 0x1fdc <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    1fbc:	a4 e5       	ldi	r26, 0x54	; 84
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e4 e5       	ldi	r30, 0x54	; 84
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 7b       	andi	r24, 0xBF	; 191
    1fc8:	8c 93       	st	X, r24
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1fcc:	a4 e5       	ldi	r26, 0x54	; 84
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e4 e5       	ldi	r30, 0x54	; 84
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 64       	ori	r24, 0x40	; 64
    1fd8:	8c 93       	st	X, r24
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1fdc:	a4 e5       	ldi	r26, 0x54	; 84
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e4 e5       	ldi	r30, 0x54	; 84
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8f 7b       	andi	r24, 0xBF	; 191
    1fe8:	8c 93       	st	X, r24
				}
				break;
	}
}
    1fea:	2a 96       	adiw	r28, 0x0a	; 10
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1ffc:	1f 92       	push	r1
    1ffe:	0f 92       	push	r0
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	0f 92       	push	r0
    2004:	11 24       	eor	r1, r1
    2006:	2f 93       	push	r18
    2008:	3f 93       	push	r19
    200a:	4f 93       	push	r20
    200c:	5f 93       	push	r21
    200e:	6f 93       	push	r22
    2010:	7f 93       	push	r23
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    2026:	80 91 3d 02 	lds	r24, 0x023D
    202a:	90 91 3e 02 	lds	r25, 0x023E
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	29 f0       	breq	.+10     	; 0x203c <__vector_1+0x40>
		INT0_Fptr();
    2032:	e0 91 3d 02 	lds	r30, 0x023D
    2036:	f0 91 3e 02 	lds	r31, 0x023E
    203a:	09 95       	icall
	}
}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	7f 91       	pop	r23
    204e:	6f 91       	pop	r22
    2050:	5f 91       	pop	r21
    2052:	4f 91       	pop	r20
    2054:	3f 91       	pop	r19
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

00002062 <__vector_2>:

ISR(INT1_vect){
    2062:	1f 92       	push	r1
    2064:	0f 92       	push	r0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
    206c:	2f 93       	push	r18
    206e:	3f 93       	push	r19
    2070:	4f 93       	push	r20
    2072:	5f 93       	push	r21
    2074:	6f 93       	push	r22
    2076:	7f 93       	push	r23
    2078:	8f 93       	push	r24
    207a:	9f 93       	push	r25
    207c:	af 93       	push	r26
    207e:	bf 93       	push	r27
    2080:	ef 93       	push	r30
    2082:	ff 93       	push	r31
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    208c:	80 91 3f 02 	lds	r24, 0x023F
    2090:	90 91 40 02 	lds	r25, 0x0240
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	29 f0       	breq	.+10     	; 0x20a2 <__vector_2+0x40>
		INT1_Fptr();
    2098:	e0 91 3f 02 	lds	r30, 0x023F
    209c:	f0 91 40 02 	lds	r31, 0x0240
    20a0:	09 95       	icall
	}
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	7f 91       	pop	r23
    20b4:	6f 91       	pop	r22
    20b6:	5f 91       	pop	r21
    20b8:	4f 91       	pop	r20
    20ba:	3f 91       	pop	r19
    20bc:	2f 91       	pop	r18
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <__vector_3>:

ISR(INT2_vect){
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	4f 93       	push	r20
    20d8:	5f 93       	push	r21
    20da:	6f 93       	push	r22
    20dc:	7f 93       	push	r23
    20de:	8f 93       	push	r24
    20e0:	9f 93       	push	r25
    20e2:	af 93       	push	r26
    20e4:	bf 93       	push	r27
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    20f2:	80 91 41 02 	lds	r24, 0x0241
    20f6:	90 91 42 02 	lds	r25, 0x0242
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	29 f0       	breq	.+10     	; 0x2108 <__vector_3+0x40>
		INT2_Fptr();
    20fe:	e0 91 41 02 	lds	r30, 0x0241
    2102:	f0 91 42 02 	lds	r31, 0x0242
    2106:	09 95       	icall
	}
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	bf 91       	pop	r27
    2112:	af 91       	pop	r26
    2114:	9f 91       	pop	r25
    2116:	8f 91       	pop	r24
    2118:	7f 91       	pop	r23
    211a:	6f 91       	pop	r22
    211c:	5f 91       	pop	r21
    211e:	4f 91       	pop	r20
    2120:	3f 91       	pop	r19
    2122:	2f 91       	pop	r18
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	0f 90       	pop	r0
    212a:	1f 90       	pop	r1
    212c:	18 95       	reti

0000212e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <DIO_ES_tSetPinDirection+0x6>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <DIO_ES_tSetPinDirection+0x8>
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	6a 83       	std	Y+2, r22	; 0x02
    213e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	88 30       	cpi	r24, 0x08	; 8
    2144:	18 f0       	brcs	.+6      	; 0x214c <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	8c 83       	std	Y+4, r24	; 0x04
    214a:	d8 c0       	rjmp	.+432    	; 0x22fc <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	88 23       	and	r24, r24
    2150:	91 f5       	brne	.+100    	; 0x21b6 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	a1 f4       	brne	.+40     	; 0x2180 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    2158:	aa e3       	ldi	r26, 0x3A	; 58
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	ea e3       	ldi	r30, 0x3A	; 58
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	48 2f       	mov	r20, r24
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 2e       	mov	r0, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_ES_tSetPinDirection+0x48>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	0a 94       	dec	r0
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_ES_tSetPinDirection+0x44>
    217a:	84 2b       	or	r24, r20
    217c:	8c 93       	st	X, r24
    217e:	bd c0       	rjmp	.+378    	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	88 23       	and	r24, r24
    2184:	a9 f4       	brne	.+42     	; 0x21b0 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    2186:	aa e3       	ldi	r26, 0x3A	; 58
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	ea e3       	ldi	r30, 0x3A	; 58
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_ES_tSetPinDirection+0x76>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <DIO_ES_tSetPinDirection+0x72>
    21a8:	80 95       	com	r24
    21aa:	84 23       	and	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	a5 c0       	rjmp	.+330    	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	8c 83       	std	Y+4, r24	; 0x04
    21b4:	a3 c0       	rjmp	.+326    	; 0x22fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	91 f5       	brne	.+100    	; 0x2220 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	a1 f4       	brne	.+40     	; 0x21ea <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    21c2:	a7 e3       	ldi	r26, 0x37	; 55
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e7 e3       	ldi	r30, 0x37	; 55
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 2e       	mov	r0, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_ES_tSetPinDirection+0xb2>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	0a 94       	dec	r0
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_ES_tSetPinDirection+0xae>
    21e4:	84 2b       	or	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	88 c0       	rjmp	.+272    	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	88 23       	and	r24, r24
    21ee:	a9 f4       	brne	.+42     	; 0x221a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    21f0:	a7 e3       	ldi	r26, 0x37	; 55
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e7 e3       	ldi	r30, 0x37	; 55
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_ES_tSetPinDirection+0xe0>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_ES_tSetPinDirection+0xdc>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	70 c0       	rjmp	.+224    	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	8c 83       	std	Y+4, r24	; 0x04
    221e:	6e c0       	rjmp	.+220    	; 0x22fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	82 30       	cpi	r24, 0x02	; 2
    2224:	91 f5       	brne	.+100    	; 0x228a <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	a1 f4       	brne	.+40     	; 0x2254 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    222c:	a4 e3       	ldi	r26, 0x34	; 52
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e4 e3       	ldi	r30, 0x34	; 52
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <DIO_ES_tSetPinDirection+0x11c>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <DIO_ES_tSetPinDirection+0x118>
    224e:	84 2b       	or	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	53 c0       	rjmp	.+166    	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	88 23       	and	r24, r24
    2258:	a9 f4       	brne	.+42     	; 0x2284 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    225a:	a4 e3       	ldi	r26, 0x34	; 52
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e4 e3       	ldi	r30, 0x34	; 52
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_ES_tSetPinDirection+0x14a>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_ES_tSetPinDirection+0x146>
    227c:	80 95       	com	r24
    227e:	84 23       	and	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	3b c0       	rjmp	.+118    	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	8c 83       	std	Y+4, r24	; 0x04
    2288:	39 c0       	rjmp	.+114    	; 0x22fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	91 f5       	brne	.+100    	; 0x22f4 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	a1 f4       	brne	.+40     	; 0x22be <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    2296:	a1 e3       	ldi	r26, 0x31	; 49
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e1 e3       	ldi	r30, 0x31	; 49
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	48 2f       	mov	r20, r24
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 2e       	mov	r0, r18
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <DIO_ES_tSetPinDirection+0x186>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	0a 94       	dec	r0
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <DIO_ES_tSetPinDirection+0x182>
    22b8:	84 2b       	or	r24, r20
    22ba:	8c 93       	st	X, r24
    22bc:	1e c0       	rjmp	.+60     	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	88 23       	and	r24, r24
    22c2:	a9 f4       	brne	.+42     	; 0x22ee <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    22c4:	a1 e3       	ldi	r26, 0x31	; 49
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e1 e3       	ldi	r30, 0x31	; 49
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	48 2f       	mov	r20, r24
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 2e       	mov	r0, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <DIO_ES_tSetPinDirection+0x1b4>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	0a 94       	dec	r0
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <DIO_ES_tSetPinDirection+0x1b0>
    22e6:	80 95       	com	r24
    22e8:	84 23       	and	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	8c 83       	std	Y+4, r24	; 0x04
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	8c 83       	std	Y+4, r24	; 0x04
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    22fa:	1c 82       	std	Y+4, r1	; 0x04
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	00 d0       	rcall	.+0      	; 0x2312 <DIO_ES_tSetPinValue+0x6>
    2312:	00 d0       	rcall	.+0      	; 0x2314 <DIO_ES_tSetPinValue+0x8>
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	6a 83       	std	Y+2, r22	; 0x02
    231c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	88 30       	cpi	r24, 0x08	; 8
    2322:	18 f0       	brcs	.+6      	; 0x232a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	8c 83       	std	Y+4, r24	; 0x04
    2328:	d8 c0       	rjmp	.+432    	; 0x24da <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	88 23       	and	r24, r24
    232e:	91 f5       	brne	.+100    	; 0x2394 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	a1 f4       	brne	.+40     	; 0x235e <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    2336:	ab e3       	ldi	r26, 0x3B	; 59
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	eb e3       	ldi	r30, 0x3B	; 59
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	48 2f       	mov	r20, r24
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	02 2e       	mov	r0, r18
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <DIO_ES_tSetPinValue+0x48>
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	0a 94       	dec	r0
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <DIO_ES_tSetPinValue+0x44>
    2358:	84 2b       	or	r24, r20
    235a:	8c 93       	st	X, r24
    235c:	bd c0       	rjmp	.+378    	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	88 23       	and	r24, r24
    2362:	a9 f4       	brne	.+42     	; 0x238e <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    2364:	ab e3       	ldi	r26, 0x3B	; 59
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	eb e3       	ldi	r30, 0x3B	; 59
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	48 2f       	mov	r20, r24
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	02 2e       	mov	r0, r18
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <DIO_ES_tSetPinValue+0x76>
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	0a 94       	dec	r0
    2384:	e2 f7       	brpl	.-8      	; 0x237e <DIO_ES_tSetPinValue+0x72>
    2386:	80 95       	com	r24
    2388:	84 23       	and	r24, r20
    238a:	8c 93       	st	X, r24
    238c:	a5 c0       	rjmp	.+330    	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	8c 83       	std	Y+4, r24	; 0x04
    2392:	a3 c0       	rjmp	.+326    	; 0x24da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	91 f5       	brne	.+100    	; 0x23fe <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	a1 f4       	brne	.+40     	; 0x23c8 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    23a0:	a8 e3       	ldi	r26, 0x38	; 56
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e8 e3       	ldi	r30, 0x38	; 56
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	48 2f       	mov	r20, r24
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	02 2e       	mov	r0, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <DIO_ES_tSetPinValue+0xb2>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <DIO_ES_tSetPinValue+0xae>
    23c2:	84 2b       	or	r24, r20
    23c4:	8c 93       	st	X, r24
    23c6:	88 c0       	rjmp	.+272    	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	88 23       	and	r24, r24
    23cc:	a9 f4       	brne	.+42     	; 0x23f8 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    23ce:	a8 e3       	ldi	r26, 0x38	; 56
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e8 e3       	ldi	r30, 0x38	; 56
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	48 2f       	mov	r20, r24
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 2e       	mov	r0, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_ES_tSetPinValue+0xe0>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	0a 94       	dec	r0
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <DIO_ES_tSetPinValue+0xdc>
    23f0:	80 95       	com	r24
    23f2:	84 23       	and	r24, r20
    23f4:	8c 93       	st	X, r24
    23f6:	70 c0       	rjmp	.+224    	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8c 83       	std	Y+4, r24	; 0x04
    23fc:	6e c0       	rjmp	.+220    	; 0x24da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	82 30       	cpi	r24, 0x02	; 2
    2402:	91 f5       	brne	.+100    	; 0x2468 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	a1 f4       	brne	.+40     	; 0x2432 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    240a:	a5 e3       	ldi	r26, 0x35	; 53
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e5 e3       	ldi	r30, 0x35	; 53
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	48 2f       	mov	r20, r24
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 2e       	mov	r0, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <DIO_ES_tSetPinValue+0x11c>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <DIO_ES_tSetPinValue+0x118>
    242c:	84 2b       	or	r24, r20
    242e:	8c 93       	st	X, r24
    2430:	53 c0       	rjmp	.+166    	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	88 23       	and	r24, r24
    2436:	a9 f4       	brne	.+42     	; 0x2462 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    2438:	a5 e3       	ldi	r26, 0x35	; 53
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e5 e3       	ldi	r30, 0x35	; 53
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 2e       	mov	r0, r18
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <DIO_ES_tSetPinValue+0x14a>
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <DIO_ES_tSetPinValue+0x146>
    245a:	80 95       	com	r24
    245c:	84 23       	and	r24, r20
    245e:	8c 93       	st	X, r24
    2460:	3b c0       	rjmp	.+118    	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	8c 83       	std	Y+4, r24	; 0x04
    2466:	39 c0       	rjmp	.+114    	; 0x24da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	83 30       	cpi	r24, 0x03	; 3
    246c:	91 f5       	brne	.+100    	; 0x24d2 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	a1 f4       	brne	.+40     	; 0x249c <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    2474:	a2 e3       	ldi	r26, 0x32	; 50
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e2 e3       	ldi	r30, 0x32	; 50
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	48 2f       	mov	r20, r24
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <DIO_ES_tSetPinValue+0x186>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <DIO_ES_tSetPinValue+0x182>
    2496:	84 2b       	or	r24, r20
    2498:	8c 93       	st	X, r24
    249a:	1e c0       	rjmp	.+60     	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	88 23       	and	r24, r24
    24a0:	a9 f4       	brne	.+42     	; 0x24cc <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    24a2:	a2 e3       	ldi	r26, 0x32	; 50
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e2 e3       	ldi	r30, 0x32	; 50
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <DIO_ES_tSetPinValue+0x1b4>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <DIO_ES_tSetPinValue+0x1b0>
    24c4:	80 95       	com	r24
    24c6:	84 23       	and	r24, r20
    24c8:	8c 93       	st	X, r24
    24ca:	06 c0       	rjmp	.+12     	; 0x24d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	8c 83       	std	Y+4, r24	; 0x04
    24d0:	04 c0       	rjmp	.+8      	; 0x24da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	8c 83       	std	Y+4, r24	; 0x04
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    24d8:	1c 82       	std	Y+4, r1	; 0x04
    24da:	8c 81       	ldd	r24, Y+4	; 0x04
}
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <DIO_ES_tGetPinValue+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <DIO_ES_tGetPinValue+0x8>
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	6a 83       	std	Y+2, r22	; 0x02
    24fc:	5c 83       	std	Y+4, r21	; 0x04
    24fe:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	88 30       	cpi	r24, 0x08	; 8
    2504:	18 f0       	brcs	.+6      	; 0x250c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	4d 83       	std	Y+5, r20	; 0x05
    250a:	60 c0       	rjmp	.+192    	; 0x25cc <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 23       	and	r24, r24
    2510:	a1 f4       	brne	.+40     	; 0x253a <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    2512:	e9 e3       	ldi	r30, 0x39	; 57
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	a9 01       	movw	r20, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_ES_tGetPinValue+0x40>
    2526:	55 95       	asr	r21
    2528:	47 95       	ror	r20
    252a:	8a 95       	dec	r24
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_ES_tGetPinValue+0x3c>
    252e:	ca 01       	movw	r24, r20
    2530:	81 70       	andi	r24, 0x01	; 1
    2532:	eb 81       	ldd	r30, Y+3	; 0x03
    2534:	fc 81       	ldd	r31, Y+4	; 0x04
    2536:	80 83       	st	Z, r24
    2538:	48 c0       	rjmp	.+144    	; 0x25ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	a1 f4       	brne	.+40     	; 0x2568 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    2540:	e6 e3       	ldi	r30, 0x36	; 54
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a9 01       	movw	r20, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <DIO_ES_tGetPinValue+0x6e>
    2554:	55 95       	asr	r21
    2556:	47 95       	ror	r20
    2558:	8a 95       	dec	r24
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <DIO_ES_tGetPinValue+0x6a>
    255c:	ca 01       	movw	r24, r20
    255e:	81 70       	andi	r24, 0x01	; 1
    2560:	eb 81       	ldd	r30, Y+3	; 0x03
    2562:	fc 81       	ldd	r31, Y+4	; 0x04
    2564:	80 83       	st	Z, r24
    2566:	31 c0       	rjmp	.+98     	; 0x25ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	82 30       	cpi	r24, 0x02	; 2
    256c:	a1 f4       	brne	.+40     	; 0x2596 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    256e:	e3 e3       	ldi	r30, 0x33	; 51
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a9 01       	movw	r20, r18
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <DIO_ES_tGetPinValue+0x9c>
    2582:	55 95       	asr	r21
    2584:	47 95       	ror	r20
    2586:	8a 95       	dec	r24
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <DIO_ES_tGetPinValue+0x98>
    258a:	ca 01       	movw	r24, r20
    258c:	81 70       	andi	r24, 0x01	; 1
    258e:	eb 81       	ldd	r30, Y+3	; 0x03
    2590:	fc 81       	ldd	r31, Y+4	; 0x04
    2592:	80 83       	st	Z, r24
    2594:	1a c0       	rjmp	.+52     	; 0x25ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	83 30       	cpi	r24, 0x03	; 3
    259a:	a1 f4       	brne	.+40     	; 0x25c4 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    259c:	e0 e3       	ldi	r30, 0x30	; 48
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	a9 01       	movw	r20, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <DIO_ES_tGetPinValue+0xca>
    25b0:	55 95       	asr	r21
    25b2:	47 95       	ror	r20
    25b4:	8a 95       	dec	r24
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <DIO_ES_tGetPinValue+0xc6>
    25b8:	ca 01       	movw	r24, r20
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	eb 81       	ldd	r30, Y+3	; 0x03
    25be:	fc 81       	ldd	r31, Y+4	; 0x04
    25c0:	80 83       	st	Z, r24
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    25c4:	51 e0       	ldi	r21, 0x01	; 1
    25c6:	5d 83       	std	Y+5, r21	; 0x05
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    25ca:	1d 82       	std	Y+5, r1	; 0x05
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <DIO_ES_tSetPortDirection+0x6>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <DIO_ES_tSetPortDirection+0x8>
    25e6:	0f 92       	push	r0
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	31 f0       	breq	.+12     	; 0x2602 <DIO_ES_tSetPortDirection+0x24>
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	19 f0       	breq	.+6      	; 0x2602 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    25fc:	21 e0       	ldi	r18, 0x01	; 1
    25fe:	2d 83       	std	Y+5, r18	; 0x05
    2600:	53 c0       	rjmp	.+166    	; 0x26a8 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	3c 83       	std	Y+4, r19	; 0x04
    260a:	2b 83       	std	Y+3, r18	; 0x03
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	91 05       	cpc	r25, r1
    2614:	09 f1       	breq	.+66     	; 0x2658 <DIO_ES_tSetPortDirection+0x7a>
    2616:	2b 81       	ldd	r18, Y+3	; 0x03
    2618:	3c 81       	ldd	r19, Y+4	; 0x04
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 05       	cpc	r19, r1
    261e:	2c f4       	brge	.+10     	; 0x262a <DIO_ES_tSetPortDirection+0x4c>
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	61 f0       	breq	.+24     	; 0x2640 <DIO_ES_tSetPortDirection+0x62>
    2628:	3b c0       	rjmp	.+118    	; 0x26a0 <DIO_ES_tSetPortDirection+0xc2>
    262a:	2b 81       	ldd	r18, Y+3	; 0x03
    262c:	3c 81       	ldd	r19, Y+4	; 0x04
    262e:	22 30       	cpi	r18, 0x02	; 2
    2630:	31 05       	cpc	r19, r1
    2632:	f1 f0       	breq	.+60     	; 0x2670 <DIO_ES_tSetPortDirection+0x92>
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	83 30       	cpi	r24, 0x03	; 3
    263a:	91 05       	cpc	r25, r1
    263c:	29 f1       	breq	.+74     	; 0x2688 <DIO_ES_tSetPortDirection+0xaa>
    263e:	30 c0       	rjmp	.+96     	; 0x26a0 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	29 f4       	brne	.+10     	; 0x2650 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    2646:	ea e3       	ldi	r30, 0x3A	; 58
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	80 83       	st	Z, r24
    264e:	2b c0       	rjmp	.+86     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    2650:	ea e3       	ldi	r30, 0x3A	; 58
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	10 82       	st	Z, r1
    2656:	27 c0       	rjmp	.+78     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	29 f4       	brne	.+10     	; 0x2668 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    265e:	e7 e3       	ldi	r30, 0x37	; 55
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	8f ef       	ldi	r24, 0xFF	; 255
    2664:	80 83       	st	Z, r24
    2666:	1f c0       	rjmp	.+62     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    2668:	e7 e3       	ldi	r30, 0x37	; 55
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	10 82       	st	Z, r1
    266e:	1b c0       	rjmp	.+54     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	29 f4       	brne	.+10     	; 0x2680 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    2676:	e4 e3       	ldi	r30, 0x34	; 52
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	80 83       	st	Z, r24
    267e:	13 c0       	rjmp	.+38     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    2680:	e4 e3       	ldi	r30, 0x34	; 52
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	10 82       	st	Z, r1
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	29 f4       	brne	.+10     	; 0x2698 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    268e:	e1 e3       	ldi	r30, 0x31	; 49
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	8f ef       	ldi	r24, 0xFF	; 255
    2694:	80 83       	st	Z, r24
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    2698:	e1 e3       	ldi	r30, 0x31	; 49
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	10 82       	st	Z, r1
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	9d 83       	std	Y+5, r25	; 0x05
    26a4:	01 c0       	rjmp	.+2      	; 0x26a8 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    26a6:	1d 82       	std	Y+5, r1	; 0x05
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <DIO_ES_tSetPortValue+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <DIO_ES_tSetPortValue+0x8>
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	31 f0       	breq	.+12     	; 0x26de <DIO_ES_tSetPortValue+0x24>
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	88 23       	and	r24, r24
    26d6:	19 f0       	breq	.+6      	; 0x26de <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    26d8:	21 e0       	ldi	r18, 0x01	; 1
    26da:	2d 83       	std	Y+5, r18	; 0x05
    26dc:	53 c0       	rjmp	.+166    	; 0x2784 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	3c 83       	std	Y+4, r19	; 0x04
    26e6:	2b 83       	std	Y+3, r18	; 0x03
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	91 05       	cpc	r25, r1
    26f0:	09 f1       	breq	.+66     	; 0x2734 <DIO_ES_tSetPortValue+0x7a>
    26f2:	2b 81       	ldd	r18, Y+3	; 0x03
    26f4:	3c 81       	ldd	r19, Y+4	; 0x04
    26f6:	22 30       	cpi	r18, 0x02	; 2
    26f8:	31 05       	cpc	r19, r1
    26fa:	2c f4       	brge	.+10     	; 0x2706 <DIO_ES_tSetPortValue+0x4c>
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	61 f0       	breq	.+24     	; 0x271c <DIO_ES_tSetPortValue+0x62>
    2704:	3b c0       	rjmp	.+118    	; 0x277c <DIO_ES_tSetPortValue+0xc2>
    2706:	2b 81       	ldd	r18, Y+3	; 0x03
    2708:	3c 81       	ldd	r19, Y+4	; 0x04
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	f1 f0       	breq	.+60     	; 0x274c <DIO_ES_tSetPortValue+0x92>
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	83 30       	cpi	r24, 0x03	; 3
    2716:	91 05       	cpc	r25, r1
    2718:	29 f1       	breq	.+74     	; 0x2764 <DIO_ES_tSetPortValue+0xaa>
    271a:	30 c0       	rjmp	.+96     	; 0x277c <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	81 30       	cpi	r24, 0x01	; 1
    2720:	29 f4       	brne	.+10     	; 0x272c <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    2722:	eb e3       	ldi	r30, 0x3B	; 59
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	80 83       	st	Z, r24
    272a:	2b c0       	rjmp	.+86     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    272c:	eb e3       	ldi	r30, 0x3B	; 59
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	10 82       	st	Z, r1
    2732:	27 c0       	rjmp	.+78     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	29 f4       	brne	.+10     	; 0x2744 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    273a:	e8 e3       	ldi	r30, 0x38	; 56
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	80 83       	st	Z, r24
    2742:	1f c0       	rjmp	.+62     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    2744:	e8 e3       	ldi	r30, 0x38	; 56
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	10 82       	st	Z, r1
    274a:	1b c0       	rjmp	.+54     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	29 f4       	brne	.+10     	; 0x275c <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    2752:	e5 e3       	ldi	r30, 0x35	; 53
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	8f ef       	ldi	r24, 0xFF	; 255
    2758:	80 83       	st	Z, r24
    275a:	13 c0       	rjmp	.+38     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    275c:	e5 e3       	ldi	r30, 0x35	; 53
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	10 82       	st	Z, r1
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	81 30       	cpi	r24, 0x01	; 1
    2768:	29 f4       	brne	.+10     	; 0x2774 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    276a:	e2 e3       	ldi	r30, 0x32	; 50
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	80 83       	st	Z, r24
    2772:	07 c0       	rjmp	.+14     	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    2774:	e2 e3       	ldi	r30, 0x32	; 50
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	10 82       	st	Z, r1
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	9d 83       	std	Y+5, r25	; 0x05
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    2782:	1d 82       	std	Y+5, r1	; 0x05
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <DIO_ES_tTOGPin+0x6>
    279c:	0f 92       	push	r0
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	88 30       	cpi	r24, 0x08	; 8
    27aa:	18 f0       	brcs	.+6      	; 0x27b2 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	60 c0       	rjmp	.+192    	; 0x2872 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	88 23       	and	r24, r24
    27b6:	a1 f4       	brne	.+40     	; 0x27e0 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    27b8:	ab e3       	ldi	r26, 0x3B	; 59
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	eb e3       	ldi	r30, 0x3B	; 59
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	48 2f       	mov	r20, r24
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	02 2e       	mov	r0, r18
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <DIO_ES_tTOGPin+0x40>
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	0a 94       	dec	r0
    27d8:	e2 f7       	brpl	.-8      	; 0x27d2 <DIO_ES_tTOGPin+0x3c>
    27da:	84 27       	eor	r24, r20
    27dc:	8c 93       	st	X, r24
    27de:	48 c0       	rjmp	.+144    	; 0x2870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	a1 f4       	brne	.+40     	; 0x280e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    27e6:	a8 e3       	ldi	r26, 0x38	; 56
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e8 e3       	ldi	r30, 0x38	; 56
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	48 2f       	mov	r20, r24
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_ES_tTOGPin+0x6e>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <DIO_ES_tTOGPin+0x6a>
    2808:	84 27       	eor	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	31 c0       	rjmp	.+98     	; 0x2870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	a1 f4       	brne	.+40     	; 0x283c <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    2814:	a5 e3       	ldi	r26, 0x35	; 53
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e5 e3       	ldi	r30, 0x35	; 53
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	48 2f       	mov	r20, r24
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <DIO_ES_tTOGPin+0x9c>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <DIO_ES_tTOGPin+0x98>
    2836:	84 27       	eor	r24, r20
    2838:	8c 93       	st	X, r24
    283a:	1a c0       	rjmp	.+52     	; 0x2870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	83 30       	cpi	r24, 0x03	; 3
    2840:	a1 f4       	brne	.+40     	; 0x286a <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    2842:	a2 e3       	ldi	r26, 0x32	; 50
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e2 e3       	ldi	r30, 0x32	; 50
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	48 2f       	mov	r20, r24
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	02 2e       	mov	r0, r18
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <DIO_ES_tTOGPin+0xca>
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	0a 94       	dec	r0
    2862:	e2 f7       	brpl	.-8      	; 0x285c <DIO_ES_tTOGPin+0xc6>
    2864:	84 27       	eor	r24, r20
    2866:	8c 93       	st	X, r24
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    2870:	1b 82       	std	Y+3, r1	; 0x03
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <DIO_ES_tInit+0x6>
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    288a:	1a 82       	std	Y+2, r1	; 0x02
    288c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    288e:	1a 82       	std	Y+2, r1	; 0x02
    2890:	19 82       	std	Y+1, r1	; 0x01
    2892:	a3 c2       	rjmp	.+1350   	; 0x2dda <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	fc 01       	movw	r30, r24
    28a2:	e7 59       	subi	r30, 0x97	; 151
    28a4:	fe 4f       	sbci	r31, 0xFE	; 254
    28a6:	80 81       	ld	r24, Z
    28a8:	88 23       	and	r24, r24
    28aa:	09 f0       	breq	.+2      	; 0x28ae <DIO_ES_tInit+0x2e>
    28ac:	9b c0       	rjmp	.+310    	; 0x29e4 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	fc 01       	movw	r30, r24
    28be:	e7 59       	subi	r30, 0x97	; 151
    28c0:	fe 4f       	sbci	r31, 0xFE	; 254
    28c2:	80 81       	ld	r24, Z
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	e9 f4       	brne	.+58     	; 0x2902 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    28c8:	aa e3       	ldi	r26, 0x3A	; 58
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ea e3       	ldi	r30, 0x3A	; 58
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	48 2f       	mov	r20, r24
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	fc 01       	movw	r30, r24
    28e2:	e6 59       	subi	r30, 0x96	; 150
    28e4:	fe 4f       	sbci	r31, 0xFE	; 254
    28e6:	80 81       	ld	r24, Z
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 2e       	mov	r0, r18
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <DIO_ES_tInit+0x78>
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	0a 94       	dec	r0
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <DIO_ES_tInit+0x74>
    28fc:	84 2b       	or	r24, r20
    28fe:	8c 93       	st	X, r24
    2900:	67 c2       	rjmp	.+1230   	; 0x2dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2902:	aa e3       	ldi	r26, 0x3A	; 58
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ea e3       	ldi	r30, 0x3A	; 58
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	48 2f       	mov	r20, r24
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	fc 01       	movw	r30, r24
    291c:	e6 59       	subi	r30, 0x96	; 150
    291e:	fe 4f       	sbci	r31, 0xFE	; 254
    2920:	80 81       	ld	r24, Z
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	02 2e       	mov	r0, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <DIO_ES_tInit+0xb2>
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <DIO_ES_tInit+0xae>
    2936:	80 95       	com	r24
    2938:	84 23       	and	r24, r20
    293a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	9a 81       	ldd	r25, Y+2	; 0x02
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	fc 01       	movw	r30, r24
    294a:	e4 59       	subi	r30, 0x94	; 148
    294c:	fe 4f       	sbci	r31, 0xFE	; 254
    294e:	80 81       	ld	r24, Z
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	e9 f4       	brne	.+58     	; 0x298e <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2954:	ab e3       	ldi	r26, 0x3B	; 59
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	eb e3       	ldi	r30, 0x3B	; 59
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	48 2f       	mov	r20, r24
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	fc 01       	movw	r30, r24
    296e:	e6 59       	subi	r30, 0x96	; 150
    2970:	fe 4f       	sbci	r31, 0xFE	; 254
    2972:	80 81       	ld	r24, Z
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	02 2e       	mov	r0, r18
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <DIO_ES_tInit+0x104>
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	0a 94       	dec	r0
    2986:	e2 f7       	brpl	.-8      	; 0x2980 <DIO_ES_tInit+0x100>
    2988:	84 2b       	or	r24, r20
    298a:	8c 93       	st	X, r24
    298c:	21 c2       	rjmp	.+1090   	; 0x2dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	fc 01       	movw	r30, r24
    299c:	e4 59       	subi	r30, 0x94	; 148
    299e:	fe 4f       	sbci	r31, 0xFE	; 254
    29a0:	80 81       	ld	r24, Z
    29a2:	88 23       	and	r24, r24
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <DIO_ES_tInit+0x128>
    29a6:	14 c2       	rjmp	.+1064   	; 0x2dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    29a8:	ab e3       	ldi	r26, 0x3B	; 59
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	eb e3       	ldi	r30, 0x3B	; 59
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	fc 01       	movw	r30, r24
    29c2:	e6 59       	subi	r30, 0x96	; 150
    29c4:	fe 4f       	sbci	r31, 0xFE	; 254
    29c6:	80 81       	ld	r24, Z
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	02 2e       	mov	r0, r18
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <DIO_ES_tInit+0x158>
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	0a 94       	dec	r0
    29da:	e2 f7       	brpl	.-8      	; 0x29d4 <DIO_ES_tInit+0x154>
    29dc:	80 95       	com	r24
    29de:	84 23       	and	r24, r20
    29e0:	8c 93       	st	X, r24
    29e2:	f6 c1       	rjmp	.+1004   	; 0x2dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	fc 01       	movw	r30, r24
    29f2:	e7 59       	subi	r30, 0x97	; 151
    29f4:	fe 4f       	sbci	r31, 0xFE	; 254
    29f6:	80 81       	ld	r24, Z
    29f8:	81 30       	cpi	r24, 0x01	; 1
    29fa:	09 f0       	breq	.+2      	; 0x29fe <DIO_ES_tInit+0x17e>
    29fc:	9b c0       	rjmp	.+310    	; 0x2b34 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	e7 59       	subi	r30, 0x97	; 151
    2a10:	fe 4f       	sbci	r31, 0xFE	; 254
    2a12:	80 81       	ld	r24, Z
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	e9 f4       	brne	.+58     	; 0x2a52 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2a18:	a7 e3       	ldi	r26, 0x37	; 55
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e7 e3       	ldi	r30, 0x37	; 55
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	48 2f       	mov	r20, r24
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	fc 01       	movw	r30, r24
    2a32:	e6 59       	subi	r30, 0x96	; 150
    2a34:	fe 4f       	sbci	r31, 0xFE	; 254
    2a36:	80 81       	ld	r24, Z
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	02 2e       	mov	r0, r18
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <DIO_ES_tInit+0x1c8>
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	0a 94       	dec	r0
    2a4a:	e2 f7       	brpl	.-8      	; 0x2a44 <DIO_ES_tInit+0x1c4>
    2a4c:	84 2b       	or	r24, r20
    2a4e:	8c 93       	st	X, r24
    2a50:	bf c1       	rjmp	.+894    	; 0x2dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2a52:	a7 e3       	ldi	r26, 0x37	; 55
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e7 e3       	ldi	r30, 0x37	; 55
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	48 2f       	mov	r20, r24
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e6 59       	subi	r30, 0x96	; 150
    2a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a70:	80 81       	ld	r24, Z
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	02 2e       	mov	r0, r18
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <DIO_ES_tInit+0x202>
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	0a 94       	dec	r0
    2a84:	e2 f7       	brpl	.-8      	; 0x2a7e <DIO_ES_tInit+0x1fe>
    2a86:	80 95       	com	r24
    2a88:	84 23       	and	r24, r20
    2a8a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e4 59       	subi	r30, 0x94	; 148
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	80 81       	ld	r24, Z
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	e9 f4       	brne	.+58     	; 0x2ade <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    2aa4:	a8 e3       	ldi	r26, 0x38	; 56
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e8 e3       	ldi	r30, 0x38	; 56
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	48 2f       	mov	r20, r24
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	fc 01       	movw	r30, r24
    2abe:	e6 59       	subi	r30, 0x96	; 150
    2ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac2:	80 81       	ld	r24, Z
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 2e       	mov	r0, r18
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <DIO_ES_tInit+0x254>
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	0a 94       	dec	r0
    2ad6:	e2 f7       	brpl	.-8      	; 0x2ad0 <DIO_ES_tInit+0x250>
    2ad8:	84 2b       	or	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	79 c1       	rjmp	.+754    	; 0x2dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	fc 01       	movw	r30, r24
    2aec:	e4 59       	subi	r30, 0x94	; 148
    2aee:	fe 4f       	sbci	r31, 0xFE	; 254
    2af0:	80 81       	ld	r24, Z
    2af2:	88 23       	and	r24, r24
    2af4:	09 f0       	breq	.+2      	; 0x2af8 <DIO_ES_tInit+0x278>
    2af6:	6c c1       	rjmp	.+728    	; 0x2dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2af8:	ab e3       	ldi	r26, 0x3B	; 59
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	eb e3       	ldi	r30, 0x3B	; 59
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	48 2f       	mov	r20, r24
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	fc 01       	movw	r30, r24
    2b12:	e6 59       	subi	r30, 0x96	; 150
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	80 81       	ld	r24, Z
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	02 2e       	mov	r0, r18
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <DIO_ES_tInit+0x2a8>
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	0a 94       	dec	r0
    2b2a:	e2 f7       	brpl	.-8      	; 0x2b24 <DIO_ES_tInit+0x2a4>
    2b2c:	80 95       	com	r24
    2b2e:	84 23       	and	r24, r20
    2b30:	8c 93       	st	X, r24
    2b32:	4e c1       	rjmp	.+668    	; 0x2dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	fc 01       	movw	r30, r24
    2b42:	e7 59       	subi	r30, 0x97	; 151
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	80 81       	ld	r24, Z
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <DIO_ES_tInit+0x2ce>
    2b4c:	9b c0       	rjmp	.+310    	; 0x2c84 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	e7 59       	subi	r30, 0x97	; 151
    2b60:	fe 4f       	sbci	r31, 0xFE	; 254
    2b62:	80 81       	ld	r24, Z
    2b64:	81 30       	cpi	r24, 0x01	; 1
    2b66:	e9 f4       	brne	.+58     	; 0x2ba2 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2b68:	a4 e3       	ldi	r26, 0x34	; 52
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e4 e3       	ldi	r30, 0x34	; 52
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	fc 01       	movw	r30, r24
    2b82:	e6 59       	subi	r30, 0x96	; 150
    2b84:	fe 4f       	sbci	r31, 0xFE	; 254
    2b86:	80 81       	ld	r24, Z
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	02 2e       	mov	r0, r18
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <DIO_ES_tInit+0x318>
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	0a 94       	dec	r0
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <DIO_ES_tInit+0x314>
    2b9c:	84 2b       	or	r24, r20
    2b9e:	8c 93       	st	X, r24
    2ba0:	17 c1       	rjmp	.+558    	; 0x2dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2ba2:	a4 e3       	ldi	r26, 0x34	; 52
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e4 e3       	ldi	r30, 0x34	; 52
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	48 2f       	mov	r20, r24
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	fc 01       	movw	r30, r24
    2bbc:	e6 59       	subi	r30, 0x96	; 150
    2bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc0:	80 81       	ld	r24, Z
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	02 2e       	mov	r0, r18
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <DIO_ES_tInit+0x352>
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	0a 94       	dec	r0
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <DIO_ES_tInit+0x34e>
    2bd6:	80 95       	com	r24
    2bd8:	84 23       	and	r24, r20
    2bda:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	fc 01       	movw	r30, r24
    2bea:	e4 59       	subi	r30, 0x94	; 148
    2bec:	fe 4f       	sbci	r31, 0xFE	; 254
    2bee:	80 81       	ld	r24, Z
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	e9 f4       	brne	.+58     	; 0x2c2e <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2bf4:	a5 e3       	ldi	r26, 0x35	; 53
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e5 e3       	ldi	r30, 0x35	; 53
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	48 2f       	mov	r20, r24
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e6 59       	subi	r30, 0x96	; 150
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	80 81       	ld	r24, Z
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 2e       	mov	r0, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <DIO_ES_tInit+0x3a4>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	0a 94       	dec	r0
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <DIO_ES_tInit+0x3a0>
    2c28:	84 2b       	or	r24, r20
    2c2a:	8c 93       	st	X, r24
    2c2c:	d1 c0       	rjmp	.+418    	; 0x2dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	9a 81       	ldd	r25, Y+2	; 0x02
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e4 59       	subi	r30, 0x94	; 148
    2c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c40:	80 81       	ld	r24, Z
    2c42:	88 23       	and	r24, r24
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <DIO_ES_tInit+0x3c8>
    2c46:	c4 c0       	rjmp	.+392    	; 0x2dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2c48:	ab e3       	ldi	r26, 0x3B	; 59
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	eb e3       	ldi	r30, 0x3B	; 59
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	48 2f       	mov	r20, r24
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	fc 01       	movw	r30, r24
    2c62:	e6 59       	subi	r30, 0x96	; 150
    2c64:	fe 4f       	sbci	r31, 0xFE	; 254
    2c66:	80 81       	ld	r24, Z
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	02 2e       	mov	r0, r18
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <DIO_ES_tInit+0x3f8>
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	0a 94       	dec	r0
    2c7a:	e2 f7       	brpl	.-8      	; 0x2c74 <DIO_ES_tInit+0x3f4>
    2c7c:	80 95       	com	r24
    2c7e:	84 23       	and	r24, r20
    2c80:	8c 93       	st	X, r24
    2c82:	a6 c0       	rjmp	.+332    	; 0x2dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	fc 01       	movw	r30, r24
    2c92:	e7 59       	subi	r30, 0x97	; 151
    2c94:	fe 4f       	sbci	r31, 0xFE	; 254
    2c96:	80 81       	ld	r24, Z
    2c98:	83 30       	cpi	r24, 0x03	; 3
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <DIO_ES_tInit+0x41e>
    2c9c:	99 c0       	rjmp	.+306    	; 0x2dd0 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	fc 01       	movw	r30, r24
    2cae:	e7 59       	subi	r30, 0x97	; 151
    2cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb2:	80 81       	ld	r24, Z
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	e9 f4       	brne	.+58     	; 0x2cf2 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2cb8:	a1 e3       	ldi	r26, 0x31	; 49
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e1 e3       	ldi	r30, 0x31	; 49
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	48 2f       	mov	r20, r24
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e6 59       	subi	r30, 0x96	; 150
    2cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd6:	80 81       	ld	r24, Z
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	02 2e       	mov	r0, r18
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <DIO_ES_tInit+0x468>
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	0a 94       	dec	r0
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <DIO_ES_tInit+0x464>
    2cec:	84 2b       	or	r24, r20
    2cee:	8c 93       	st	X, r24
    2cf0:	6f c0       	rjmp	.+222    	; 0x2dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2cf2:	a1 e3       	ldi	r26, 0x31	; 49
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e1 e3       	ldi	r30, 0x31	; 49
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	48 2f       	mov	r20, r24
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	9a 81       	ldd	r25, Y+2	; 0x02
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e6 59       	subi	r30, 0x96	; 150
    2d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d10:	80 81       	ld	r24, Z
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	02 2e       	mov	r0, r18
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <DIO_ES_tInit+0x4a2>
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	0a 94       	dec	r0
    2d24:	e2 f7       	brpl	.-8      	; 0x2d1e <DIO_ES_tInit+0x49e>
    2d26:	80 95       	com	r24
    2d28:	84 23       	and	r24, r20
    2d2a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	fc 01       	movw	r30, r24
    2d3a:	e4 59       	subi	r30, 0x94	; 148
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	80 81       	ld	r24, Z
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	e9 f4       	brne	.+58     	; 0x2d7e <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2d44:	a2 e3       	ldi	r26, 0x32	; 50
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e2 e3       	ldi	r30, 0x32	; 50
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	48 2f       	mov	r20, r24
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	9a 81       	ldd	r25, Y+2	; 0x02
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e6 59       	subi	r30, 0x96	; 150
    2d60:	fe 4f       	sbci	r31, 0xFE	; 254
    2d62:	80 81       	ld	r24, Z
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	02 2e       	mov	r0, r18
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <DIO_ES_tInit+0x4f4>
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	0a 94       	dec	r0
    2d76:	e2 f7       	brpl	.-8      	; 0x2d70 <DIO_ES_tInit+0x4f0>
    2d78:	84 2b       	or	r24, r20
    2d7a:	8c 93       	st	X, r24
    2d7c:	29 c0       	rjmp	.+82     	; 0x2dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e4 59       	subi	r30, 0x94	; 148
    2d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d90:	80 81       	ld	r24, Z
    2d92:	88 23       	and	r24, r24
    2d94:	e9 f4       	brne	.+58     	; 0x2dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2d96:	ab e3       	ldi	r26, 0x3B	; 59
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	eb e3       	ldi	r30, 0x3B	; 59
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	48 2f       	mov	r20, r24
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	fc 01       	movw	r30, r24
    2db0:	e6 59       	subi	r30, 0x96	; 150
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	80 81       	ld	r24, Z
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	02 2e       	mov	r0, r18
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <DIO_ES_tInit+0x546>
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	0a 94       	dec	r0
    2dc8:	e2 f7       	brpl	.-8      	; 0x2dc2 <DIO_ES_tInit+0x542>
    2dca:	80 95       	com	r24
    2dcc:	84 23       	and	r24, r20
    2dce:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dde:	88 31       	cpi	r24, 0x18	; 24
    2de0:	91 05       	cpc	r25, r1
    2de2:	0c f4       	brge	.+2      	; 0x2de6 <DIO_ES_tInit+0x566>
    2de4:	57 cd       	rjmp	.-1362   	; 0x2894 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2de6:	80 e0       	ldi	r24, 0x00	; 0
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	e0 97       	sbiw	r28, 0x30	; 48
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	62 e0       	ldi	r22, 0x02	; 2
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a0 e2       	ldi	r26, 0x20	; 32
    2e16:	b1 e4       	ldi	r27, 0x41	; 65
    2e18:	8d a7       	std	Y+45, r24	; 0x2d
    2e1a:	9e a7       	std	Y+46, r25	; 0x2e
    2e1c:	af a7       	std	Y+47, r26	; 0x2f
    2e1e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e20:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e22:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e26:	98 a9       	ldd	r25, Y+48	; 0x30
    2e28:	2b ea       	ldi	r18, 0xAB	; 171
    2e2a:	3a ea       	ldi	r19, 0xAA	; 170
    2e2c:	4a ea       	ldi	r20, 0xAA	; 170
    2e2e:	50 e4       	ldi	r21, 0x40	; 64
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	89 a7       	std	Y+41, r24	; 0x29
    2e3a:	9a a7       	std	Y+42, r25	; 0x2a
    2e3c:	ab a7       	std	Y+43, r26	; 0x2b
    2e3e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e40:	69 a5       	ldd	r22, Y+41	; 0x29
    2e42:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	1c f4       	brge	.+6      	; 0x2e5e <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	88 a7       	std	Y+40, r24	; 0x28
    2e5c:	91 c0       	rjmp	.+290    	; 0x2f80 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    2e5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2e60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	53 e4       	ldi	r21, 0x43	; 67
    2e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	0c f0       	brlt	.+2      	; 0x2e78 <LCD_ES_tTrigger_Enable+0x86>
    2e76:	7b c0       	rjmp	.+246    	; 0x2f6e <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2e78:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	4a e7       	ldi	r20, 0x7A	; 122
    2e86:	54 e4       	ldi	r21, 0x44	; 68
    2e88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	8c a3       	std	Y+36, r24	; 0x24
    2e92:	9d a3       	std	Y+37, r25	; 0x25
    2e94:	ae a3       	std	Y+38, r26	; 0x26
    2e96:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6c a1       	ldd	r22, Y+36	; 0x24
    2e9a:	7d a1       	ldd	r23, Y+37	; 0x25
    2e9c:	8e a1       	ldd	r24, Y+38	; 0x26
    2e9e:	9f a1       	ldd	r25, Y+39	; 0x27
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a e7       	ldi	r20, 0x7A	; 122
    2ea6:	55 e4       	ldi	r21, 0x45	; 69
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	88 a3       	std	Y+32, r24	; 0x20
    2eb2:	99 a3       	std	Y+33, r25	; 0x21
    2eb4:	aa a3       	std	Y+34, r26	; 0x22
    2eb6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2eb8:	68 a1       	ldd	r22, Y+32	; 0x20
    2eba:	79 a1       	ldd	r23, Y+33	; 0x21
    2ebc:	8a a1       	ldd	r24, Y+34	; 0x22
    2ebe:	9b a1       	ldd	r25, Y+35	; 0x23
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ed6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2eda:	68 a1       	ldd	r22, Y+32	; 0x20
    2edc:	79 a1       	ldd	r23, Y+33	; 0x21
    2ede:	8a a1       	ldd	r24, Y+34	; 0x22
    2ee0:	9b a1       	ldd	r25, Y+35	; 0x23
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6c a1       	ldd	r22, Y+36	; 0x24
    2ef4:	7d a1       	ldd	r23, Y+37	; 0x25
    2ef6:	8e a1       	ldd	r24, Y+38	; 0x26
    2ef8:	9f a1       	ldd	r25, Y+39	; 0x27
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9f 8f       	std	Y+31, r25	; 0x1f
    2f18:	8e 8f       	std	Y+30, r24	; 0x1e
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <LCD_ES_tTrigger_Enable+0x148>
    2f1c:	80 e9       	ldi	r24, 0x90	; 144
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	9d 8f       	std	Y+29, r25	; 0x1d
    2f22:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_ES_tTrigger_Enable+0x136>
    2f2c:	9d 8f       	std	Y+29, r25	; 0x1d
    2f2e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9f 8f       	std	Y+31, r25	; 0x1f
    2f38:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <LCD_ES_tTrigger_Enable+0x12a>
    2f42:	24 c0       	rjmp	.+72     	; 0x2f8c <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	68 a1       	ldd	r22, Y+32	; 0x20
    2f46:	79 a1       	ldd	r23, Y+33	; 0x21
    2f48:	8a a1       	ldd	r24, Y+34	; 0x22
    2f4a:	9b a1       	ldd	r25, Y+35	; 0x23
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9f 8f       	std	Y+31, r25	; 0x1f
    2f56:	8e 8f       	std	Y+30, r24	; 0x1e
    2f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f5c:	9b 8f       	std	Y+27, r25	; 0x1b
    2f5e:	8a 8f       	std	Y+26, r24	; 0x1a
    2f60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <LCD_ES_tTrigger_Enable+0x172>
    2f68:	9b 8f       	std	Y+27, r25	; 0x1b
    2f6a:	8a 8f       	std	Y+26, r24	; 0x1a
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f6e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f70:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	88 a7       	std	Y+40, r24	; 0x28
    2f80:	88 a5       	ldd	r24, Y+40	; 0x28
    2f82:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f84:	89 8d       	ldd	r24, Y+25	; 0x19
    2f86:	8a 95       	dec	r24
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <LCD_ES_tTrigger_Enable+0x194>
    2f8a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	62 e0       	ldi	r22, 0x02	; 2
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	aa ef       	ldi	r26, 0xFA	; 250
    2f9c:	b4 e4       	ldi	r27, 0x44	; 68
    2f9e:	8d 8b       	std	Y+21, r24	; 0x15
    2fa0:	9e 8b       	std	Y+22, r25	; 0x16
    2fa2:	af 8b       	std	Y+23, r26	; 0x17
    2fa4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2faa:	8f 89       	ldd	r24, Y+23	; 0x17
    2fac:	98 8d       	ldd	r25, Y+24	; 0x18
    2fae:	2b ea       	ldi	r18, 0xAB	; 171
    2fb0:	3a ea       	ldi	r19, 0xAA	; 170
    2fb2:	4a ea       	ldi	r20, 0xAA	; 170
    2fb4:	50 e4       	ldi	r21, 0x40	; 64
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	89 8b       	std	Y+17, r24	; 0x11
    2fc0:	9a 8b       	std	Y+18, r25	; 0x12
    2fc2:	ab 8b       	std	Y+19, r26	; 0x13
    2fc4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2fc6:	69 89       	ldd	r22, Y+17	; 0x11
    2fc8:	7a 89       	ldd	r23, Y+18	; 0x12
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e8       	ldi	r20, 0x80	; 128
    2fd4:	5f e3       	ldi	r21, 0x3F	; 63
    2fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fda:	88 23       	and	r24, r24
    2fdc:	1c f4       	brge	.+6      	; 0x2fe4 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	88 8b       	std	Y+16, r24	; 0x10
    2fe2:	91 c0       	rjmp	.+290    	; 0x3106 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2fe4:	69 89       	ldd	r22, Y+17	; 0x11
    2fe6:	7a 89       	ldd	r23, Y+18	; 0x12
    2fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fea:	9c 89       	ldd	r25, Y+20	; 0x14
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	4f e7       	ldi	r20, 0x7F	; 127
    2ff2:	53 e4       	ldi	r21, 0x43	; 67
    2ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff8:	18 16       	cp	r1, r24
    2ffa:	0c f0       	brlt	.+2      	; 0x2ffe <LCD_ES_tTrigger_Enable+0x20c>
    2ffc:	7b c0       	rjmp	.+246    	; 0x30f4 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    2ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    3000:	7e 89       	ldd	r23, Y+22	; 0x16
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	4a e7       	ldi	r20, 0x7A	; 122
    300c:	54 e4       	ldi	r21, 0x44	; 68
    300e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	8c 87       	std	Y+12, r24	; 0x0c
    3018:	9d 87       	std	Y+13, r25	; 0x0d
    301a:	ae 87       	std	Y+14, r26	; 0x0e
    301c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3020:	7d 85       	ldd	r23, Y+13	; 0x0d
    3022:	8e 85       	ldd	r24, Y+14	; 0x0e
    3024:	9f 85       	ldd	r25, Y+15	; 0x0f
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a e7       	ldi	r20, 0x7A	; 122
    302c:	55 e4       	ldi	r21, 0x45	; 69
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	88 87       	std	Y+8, r24	; 0x08
    3038:	99 87       	std	Y+9, r25	; 0x09
    303a:	aa 87       	std	Y+10, r26	; 0x0a
    303c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    303e:	68 85       	ldd	r22, Y+8	; 0x08
    3040:	79 85       	ldd	r23, Y+9	; 0x09
    3042:	8a 85       	ldd	r24, Y+10	; 0x0a
    3044:	9b 85       	ldd	r25, Y+11	; 0x0b
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9f 83       	std	Y+7, r25	; 0x07
    305c:	8e 83       	std	Y+6, r24	; 0x06
    305e:	3f c0       	rjmp	.+126    	; 0x30de <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    3060:	68 85       	ldd	r22, Y+8	; 0x08
    3062:	79 85       	ldd	r23, Y+9	; 0x09
    3064:	8a 85       	ldd	r24, Y+10	; 0x0a
    3066:	9b 85       	ldd	r25, Y+11	; 0x0b
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6c 85       	ldd	r22, Y+12	; 0x0c
    307a:	7d 85       	ldd	r23, Y+13	; 0x0d
    307c:	8e 85       	ldd	r24, Y+14	; 0x0e
    307e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9f 83       	std	Y+7, r25	; 0x07
    309e:	8e 83       	std	Y+6, r24	; 0x06
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <LCD_ES_tTrigger_Enable+0x2ce>
    30a2:	80 e9       	ldi	r24, 0x90	; 144
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    30a6:	9d 83       	std	Y+5, r25	; 0x05
    30a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30aa:	8c 81       	ldd	r24, Y+4	; 0x04
    30ac:	9d 81       	ldd	r25, Y+5	; 0x05
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_ES_tTrigger_Enable+0x2bc>
    30b2:	9d 83       	std	Y+5, r25	; 0x05
    30b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8e 81       	ldd	r24, Y+6	; 0x06
    30b8:	9f 81       	ldd	r25, Y+7	; 0x07
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9f 83       	std	Y+7, r25	; 0x07
    30be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8e 81       	ldd	r24, Y+6	; 0x06
    30c2:	9f 81       	ldd	r25, Y+7	; 0x07
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <LCD_ES_tTrigger_Enable+0x2b0>
    30c8:	24 c0       	rjmp	.+72     	; 0x3112 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	68 85       	ldd	r22, Y+8	; 0x08
    30cc:	79 85       	ldd	r23, Y+9	; 0x09
    30ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9f 83       	std	Y+7, r25	; 0x07
    30dc:	8e 83       	std	Y+6, r24	; 0x06
    30de:	8e 81       	ldd	r24, Y+6	; 0x06
    30e0:	9f 81       	ldd	r25, Y+7	; 0x07
    30e2:	9b 83       	std	Y+3, r25	; 0x03
    30e4:	8a 83       	std	Y+2, r24	; 0x02
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_ES_tTrigger_Enable+0x2f8>
    30ee:	9b 83       	std	Y+3, r25	; 0x03
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    30f2:	0f c0       	rjmp	.+30     	; 0x3112 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30f4:	69 89       	ldd	r22, Y+17	; 0x11
    30f6:	7a 89       	ldd	r23, Y+18	; 0x12
    30f8:	8b 89       	ldd	r24, Y+19	; 0x13
    30fa:	9c 89       	ldd	r25, Y+20	; 0x14
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	88 8b       	std	Y+16, r24	; 0x10
    3106:	88 89       	ldd	r24, Y+16	; 0x10
    3108:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	8a 95       	dec	r24
    310e:	f1 f7       	brne	.-4      	; 0x310c <LCD_ES_tTrigger_Enable+0x31a>
    3110:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    3112:	80 e0       	ldi	r24, 0x00	; 0
}
    3114:	e0 96       	adiw	r28, 0x30	; 48
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	f8 94       	cli
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    3134:	88 e2       	ldi	r24, 0x28	; 40
    3136:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    313a:	8e e0       	ldi	r24, 0x0E	; 14
    313c:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    3140:	86 e0       	ldi	r24, 0x06	; 6
    3142:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
	return ES_OK;
    314c:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	2e 97       	sbiw	r28, 0x0e	; 14
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	a0 e0       	ldi	r26, 0x00	; 0
    3174:	b0 e4       	ldi	r27, 0x40	; 64
    3176:	8b 87       	std	Y+11, r24	; 0x0b
    3178:	9c 87       	std	Y+12, r25	; 0x0c
    317a:	ad 87       	std	Y+13, r26	; 0x0d
    317c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3180:	7c 85       	ldd	r23, Y+12	; 0x0c
    3182:	8d 85       	ldd	r24, Y+13	; 0x0d
    3184:	9e 85       	ldd	r25, Y+14	; 0x0e
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	4a e7       	ldi	r20, 0x7A	; 122
    318c:	55 e4       	ldi	r21, 0x45	; 69
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8f 83       	std	Y+7, r24	; 0x07
    3198:	98 87       	std	Y+8, r25	; 0x08
    319a:	a9 87       	std	Y+9, r26	; 0x09
    319c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    319e:	6f 81       	ldd	r22, Y+7	; 0x07
    31a0:	78 85       	ldd	r23, Y+8	; 0x08
    31a2:	89 85       	ldd	r24, Y+9	; 0x09
    31a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e8       	ldi	r20, 0x80	; 128
    31ac:	5f e3       	ldi	r21, 0x3F	; 63
    31ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b2:	88 23       	and	r24, r24
    31b4:	2c f4       	brge	.+10     	; 0x31c0 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	3f c0       	rjmp	.+126    	; 0x323e <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    31c0:	6f 81       	ldd	r22, Y+7	; 0x07
    31c2:	78 85       	ldd	r23, Y+8	; 0x08
    31c4:	89 85       	ldd	r24, Y+9	; 0x09
    31c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f e7       	ldi	r20, 0x7F	; 127
    31ce:	57 e4       	ldi	r21, 0x47	; 71
    31d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d4:	18 16       	cp	r1, r24
    31d6:	4c f5       	brge	.+82     	; 0x322a <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31da:	7c 85       	ldd	r23, Y+12	; 0x0c
    31dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31de:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e2       	ldi	r20, 0x20	; 32
    31e6:	51 e4       	ldi	r21, 0x41	; 65
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	8d 83       	std	Y+5, r24	; 0x05
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <lcd_ES_tclear+0xcc>
    3202:	80 e9       	ldi	r24, 0x90	; 144
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	9c 83       	std	Y+4, r25	; 0x04
    3208:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <lcd_ES_tclear+0xba>
    3212:	9c 83       	std	Y+4, r25	; 0x04
    3214:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
    3218:	9e 81       	ldd	r25, Y+6	; 0x06
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	9e 83       	std	Y+6, r25	; 0x06
    321e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3220:	8d 81       	ldd	r24, Y+5	; 0x05
    3222:	9e 81       	ldd	r25, Y+6	; 0x06
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	69 f7       	brne	.-38     	; 0x3202 <lcd_ES_tclear+0xae>
    3228:	14 c0       	rjmp	.+40     	; 0x3252 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322a:	6f 81       	ldd	r22, Y+7	; 0x07
    322c:	78 85       	ldd	r23, Y+8	; 0x08
    322e:	89 85       	ldd	r24, Y+9	; 0x09
    3230:	9a 85       	ldd	r25, Y+10	; 0x0a
    3232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	9e 83       	std	Y+6, r25	; 0x06
    323c:	8d 83       	std	Y+5, r24	; 0x05
    323e:	8d 81       	ldd	r24, Y+5	; 0x05
    3240:	9e 81       	ldd	r25, Y+6	; 0x06
    3242:	9a 83       	std	Y+2, r25	; 0x02
    3244:	89 83       	std	Y+1, r24	; 0x01
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <lcd_ES_tclear+0xf6>
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    3252:	80 e0       	ldi	r24, 0x00	; 0
}
    3254:	2e 96       	adiw	r28, 0x0e	; 14
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	0f 92       	push	r0
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	61 e0       	ldi	r22, 0x01	; 1
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	40 e0       	ldi	r20, 0x00	; 0
    3282:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	88 23       	and	r24, r24
    328a:	34 f4       	brge	.+12     	; 0x3298 <Lcd_ES_tsendCmd+0x32>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	66 e0       	ldi	r22, 0x06	; 6
    3290:	41 e0       	ldi	r20, 0x01	; 1
    3292:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3296:	05 c0       	rjmp	.+10     	; 0x32a2 <Lcd_ES_tsendCmd+0x3c>
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	66 e0       	ldi	r22, 0x06	; 6
    329c:	40 e0       	ldi	r20, 0x00	; 0
    329e:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	82 95       	swap	r24
    32a6:	86 95       	lsr	r24
    32a8:	86 95       	lsr	r24
    32aa:	83 70       	andi	r24, 0x03	; 3
    32ac:	88 2f       	mov	r24, r24
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	81 70       	andi	r24, 0x01	; 1
    32b2:	90 70       	andi	r25, 0x00	; 0
    32b4:	88 23       	and	r24, r24
    32b6:	31 f0       	breq	.+12     	; 0x32c4 <Lcd_ES_tsendCmd+0x5e>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	65 e0       	ldi	r22, 0x05	; 5
    32bc:	41 e0       	ldi	r20, 0x01	; 1
    32be:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <Lcd_ES_tsendCmd+0x68>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	65 e0       	ldi	r22, 0x05	; 5
    32c8:	40 e0       	ldi	r20, 0x00	; 0
    32ca:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	82 95       	swap	r24
    32d2:	86 95       	lsr	r24
    32d4:	87 70       	andi	r24, 0x07	; 7
    32d6:	88 2f       	mov	r24, r24
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	81 70       	andi	r24, 0x01	; 1
    32dc:	90 70       	andi	r25, 0x00	; 0
    32de:	88 23       	and	r24, r24
    32e0:	31 f0       	breq	.+12     	; 0x32ee <Lcd_ES_tsendCmd+0x88>
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	64 e0       	ldi	r22, 0x04	; 4
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <Lcd_ES_tsendCmd+0x92>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	64 e0       	ldi	r22, 0x04	; 4
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	82 95       	swap	r24
    32fc:	8f 70       	andi	r24, 0x0F	; 15
    32fe:	88 2f       	mov	r24, r24
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	81 70       	andi	r24, 0x01	; 1
    3304:	90 70       	andi	r25, 0x00	; 0
    3306:	88 23       	and	r24, r24
    3308:	31 f0       	breq	.+12     	; 0x3316 <Lcd_ES_tsendCmd+0xb0>
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	63 e0       	ldi	r22, 0x03	; 3
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3314:	05 c0       	rjmp	.+10     	; 0x3320 <Lcd_ES_tsendCmd+0xba>
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	63 e0       	ldi	r22, 0x03	; 3
    331a:	40 e0       	ldi	r20, 0x00	; 0
    331c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3320:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	86 95       	lsr	r24
    3328:	86 95       	lsr	r24
    332a:	86 95       	lsr	r24
    332c:	88 2f       	mov	r24, r24
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	81 70       	andi	r24, 0x01	; 1
    3332:	90 70       	andi	r25, 0x00	; 0
    3334:	88 23       	and	r24, r24
    3336:	31 f0       	breq	.+12     	; 0x3344 <Lcd_ES_tsendCmd+0xde>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	66 e0       	ldi	r22, 0x06	; 6
    333c:	41 e0       	ldi	r20, 0x01	; 1
    333e:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3342:	05 c0       	rjmp	.+10     	; 0x334e <Lcd_ES_tsendCmd+0xe8>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	66 e0       	ldi	r22, 0x06	; 6
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	86 95       	lsr	r24
    3352:	86 95       	lsr	r24
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	81 70       	andi	r24, 0x01	; 1
    335a:	90 70       	andi	r25, 0x00	; 0
    335c:	88 23       	and	r24, r24
    335e:	31 f0       	breq	.+12     	; 0x336c <Lcd_ES_tsendCmd+0x106>
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	65 e0       	ldi	r22, 0x05	; 5
    3364:	41 e0       	ldi	r20, 0x01	; 1
    3366:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    336a:	05 c0       	rjmp	.+10     	; 0x3376 <Lcd_ES_tsendCmd+0x110>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	65 e0       	ldi	r22, 0x05	; 5
    3370:	40 e0       	ldi	r20, 0x00	; 0
    3372:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	86 95       	lsr	r24
    337a:	88 2f       	mov	r24, r24
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	81 70       	andi	r24, 0x01	; 1
    3380:	90 70       	andi	r25, 0x00	; 0
    3382:	88 23       	and	r24, r24
    3384:	31 f0       	breq	.+12     	; 0x3392 <Lcd_ES_tsendCmd+0x12c>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	64 e0       	ldi	r22, 0x04	; 4
    338a:	41 e0       	ldi	r20, 0x01	; 1
    338c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3390:	05 c0       	rjmp	.+10     	; 0x339c <Lcd_ES_tsendCmd+0x136>
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	64 e0       	ldi	r22, 0x04	; 4
    3396:	40 e0       	ldi	r20, 0x00	; 0
    3398:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	81 70       	andi	r24, 0x01	; 1
    33a4:	90 70       	andi	r25, 0x00	; 0
    33a6:	88 23       	and	r24, r24
    33a8:	31 f0       	breq	.+12     	; 0x33b6 <Lcd_ES_tsendCmd+0x150>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	63 e0       	ldi	r22, 0x03	; 3
    33ae:	41 e0       	ldi	r20, 0x01	; 1
    33b0:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <Lcd_ES_tsendCmd+0x15a>
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	63 e0       	ldi	r22, 0x03	; 3
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    33c0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    33c4:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	41 e0       	ldi	r20, 0x01	; 1
    33e0:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	60 e0       	ldi	r22, 0x00	; 0
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	88 23       	and	r24, r24
    33f2:	34 f4       	brge	.+12     	; 0x3400 <Lcd_ES_tsendChar+0x32>
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	66 e0       	ldi	r22, 0x06	; 6
    33f8:	41 e0       	ldi	r20, 0x01	; 1
    33fa:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <Lcd_ES_tsendChar+0x3c>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	66 e0       	ldi	r22, 0x06	; 6
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	82 95       	swap	r24
    340e:	86 95       	lsr	r24
    3410:	86 95       	lsr	r24
    3412:	83 70       	andi	r24, 0x03	; 3
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	81 70       	andi	r24, 0x01	; 1
    341a:	90 70       	andi	r25, 0x00	; 0
    341c:	88 23       	and	r24, r24
    341e:	31 f0       	breq	.+12     	; 0x342c <Lcd_ES_tsendChar+0x5e>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	65 e0       	ldi	r22, 0x05	; 5
    3424:	41 e0       	ldi	r20, 0x01	; 1
    3426:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    342a:	05 c0       	rjmp	.+10     	; 0x3436 <Lcd_ES_tsendChar+0x68>
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	65 e0       	ldi	r22, 0x05	; 5
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	82 95       	swap	r24
    343a:	86 95       	lsr	r24
    343c:	87 70       	andi	r24, 0x07	; 7
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	81 70       	andi	r24, 0x01	; 1
    3444:	90 70       	andi	r25, 0x00	; 0
    3446:	88 23       	and	r24, r24
    3448:	31 f0       	breq	.+12     	; 0x3456 <Lcd_ES_tsendChar+0x88>
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	64 e0       	ldi	r22, 0x04	; 4
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3454:	05 c0       	rjmp	.+10     	; 0x3460 <Lcd_ES_tsendChar+0x92>
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	64 e0       	ldi	r22, 0x04	; 4
    345a:	40 e0       	ldi	r20, 0x00	; 0
    345c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	82 95       	swap	r24
    3464:	8f 70       	andi	r24, 0x0F	; 15
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	81 70       	andi	r24, 0x01	; 1
    346c:	90 70       	andi	r25, 0x00	; 0
    346e:	88 23       	and	r24, r24
    3470:	31 f0       	breq	.+12     	; 0x347e <Lcd_ES_tsendChar+0xb0>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	63 e0       	ldi	r22, 0x03	; 3
    3476:	41 e0       	ldi	r20, 0x01	; 1
    3478:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    347c:	05 c0       	rjmp	.+10     	; 0x3488 <Lcd_ES_tsendChar+0xba>
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	63 e0       	ldi	r22, 0x03	; 3
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3488:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	86 95       	lsr	r24
    3490:	86 95       	lsr	r24
    3492:	86 95       	lsr	r24
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	81 70       	andi	r24, 0x01	; 1
    349a:	90 70       	andi	r25, 0x00	; 0
    349c:	88 23       	and	r24, r24
    349e:	31 f0       	breq	.+12     	; 0x34ac <Lcd_ES_tsendChar+0xde>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	66 e0       	ldi	r22, 0x06	; 6
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    34aa:	05 c0       	rjmp	.+10     	; 0x34b6 <Lcd_ES_tsendChar+0xe8>
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	66 e0       	ldi	r22, 0x06	; 6
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	86 95       	lsr	r24
    34ba:	86 95       	lsr	r24
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	81 70       	andi	r24, 0x01	; 1
    34c2:	90 70       	andi	r25, 0x00	; 0
    34c4:	88 23       	and	r24, r24
    34c6:	31 f0       	breq	.+12     	; 0x34d4 <Lcd_ES_tsendChar+0x106>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	65 e0       	ldi	r22, 0x05	; 5
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    34d2:	05 c0       	rjmp	.+10     	; 0x34de <Lcd_ES_tsendChar+0x110>
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	65 e0       	ldi	r22, 0x05	; 5
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	86 95       	lsr	r24
    34e2:	88 2f       	mov	r24, r24
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	81 70       	andi	r24, 0x01	; 1
    34e8:	90 70       	andi	r25, 0x00	; 0
    34ea:	88 23       	and	r24, r24
    34ec:	31 f0       	breq	.+12     	; 0x34fa <Lcd_ES_tsendChar+0x12c>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	64 e0       	ldi	r22, 0x04	; 4
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    34f8:	05 c0       	rjmp	.+10     	; 0x3504 <Lcd_ES_tsendChar+0x136>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	64 e0       	ldi	r22, 0x04	; 4
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	81 70       	andi	r24, 0x01	; 1
    350c:	90 70       	andi	r25, 0x00	; 0
    350e:	88 23       	and	r24, r24
    3510:	31 f0       	breq	.+12     	; 0x351e <Lcd_ES_tsendChar+0x150>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	63 e0       	ldi	r22, 0x03	; 3
    3516:	41 e0       	ldi	r20, 0x01	; 1
    3518:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <Lcd_ES_tsendChar+0x15a>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	63 e0       	ldi	r22, 0x03	; 3
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3528:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    352c:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    352e:	0f 90       	pop	r0
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <Lcd_ES_tsendString+0x6>
    353c:	0f 92       	push	r0
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9b 83       	std	Y+3, r25	; 0x03
    3544:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	61 e0       	ldi	r22, 0x01	; 1
    354a:	41 e0       	ldi	r20, 0x01	; 1
    354c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    355a:	19 82       	std	Y+1, r1	; 0x01
    355c:	0e c0       	rjmp	.+28     	; 0x357a <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	8a 81       	ldd	r24, Y+2	; 0x02
    3566:	9b 81       	ldd	r25, Y+3	; 0x03
    3568:	fc 01       	movw	r30, r24
    356a:	e2 0f       	add	r30, r18
    356c:	f3 1f       	adc	r31, r19
    356e:	80 81       	ld	r24, Z
    3570:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Lcd_ES_tsendChar>
		i++;
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	8f 5f       	subi	r24, 0xFF	; 255
    3578:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	9b 81       	ldd	r25, Y+3	; 0x03
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	80 81       	ld	r24, Z
    358c:	88 23       	and	r24, r24
    358e:	39 f7       	brne	.-50     	; 0x355e <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    3590:	80 e0       	ldi	r24, 0x00	; 0
}
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	08 95       	ret

0000359e <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    359e:	df 93       	push	r29
    35a0:	cf 93       	push	r28
    35a2:	00 d0       	rcall	.+0      	; 0x35a4 <Lcd_ES_tsendString_xy+0x6>
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <Lcd_ES_tsendString_xy+0x8>
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
    35ae:	6b 83       	std	Y+3, r22	; 0x03
    35b0:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	41 e0       	ldi	r20, 0x01	; 1
    35b8:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	40 e0       	ldi	r20, 0x00	; 0
    35c2:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	6c 81       	ldd	r22, Y+4	; 0x04
    35ca:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <Lcd_ES_tsendString>
	return ES_OK;
    35d6:	80 e0       	ldi	r24, 0x00	; 0

}
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	2e 97       	sbiw	r28, 0x0e	; 14
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	9e 87       	std	Y+14, r25	; 0x0e
    35fc:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	61 e0       	ldi	r22, 0x01	; 1
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    3612:	1a 82       	std	Y+2, r1	; 0x02
    3614:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3616:	8d 85       	ldd	r24, Y+13	; 0x0d
    3618:	9e 85       	ldd	r25, Y+14	; 0x0e
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	11 f5       	brne	.+68     	; 0x3662 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    361e:	80 e3       	ldi	r24, 0x30	; 48
    3620:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Lcd_ES_tsendChar>
    3624:	39 c0       	rjmp	.+114    	; 0x3698 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	e8 2f       	mov	r30, r24
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	2a e0       	ldi	r18, 0x0A	; 10
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	b9 01       	movw	r22, r18
    3636:	0e 94 38 20 	call	0x4070	; 0x4070 <__udivmodhi4>
    363a:	28 2f       	mov	r18, r24
    363c:	20 5d       	subi	r18, 0xD0	; 208
    363e:	ce 01       	movw	r24, r28
    3640:	03 96       	adiw	r24, 0x03	; 3
    3642:	e8 0f       	add	r30, r24
    3644:	f9 1f       	adc	r31, r25
    3646:	20 83       	st	Z, r18
			num /= 10;
    3648:	8d 85       	ldd	r24, Y+13	; 0x0d
    364a:	9e 85       	ldd	r25, Y+14	; 0x0e
    364c:	2a e0       	ldi	r18, 0x0A	; 10
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	b9 01       	movw	r22, r18
    3652:	0e 94 38 20 	call	0x4070	; 0x4070 <__udivmodhi4>
    3656:	cb 01       	movw	r24, r22
    3658:	9e 87       	std	Y+14, r25	; 0x0e
    365a:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    365c:	8a 81       	ldd	r24, Y+2	; 0x02
    365e:	8f 5f       	subi	r24, 0xFF	; 255
    3660:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    3662:	8d 85       	ldd	r24, Y+13	; 0x0d
    3664:	9e 85       	ldd	r25, Y+14	; 0x0e
    3666:	00 97       	sbiw	r24, 0x00	; 0
    3668:	f1 f6       	brne	.-68     	; 0x3626 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	11 c0       	rjmp	.+34     	; 0x3692 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	9c 01       	movw	r18, r24
    3678:	21 50       	subi	r18, 0x01	; 1
    367a:	30 40       	sbci	r19, 0x00	; 0
    367c:	ce 01       	movw	r24, r28
    367e:	03 96       	adiw	r24, 0x03	; 3
    3680:	fc 01       	movw	r30, r24
    3682:	e2 0f       	add	r30, r18
    3684:	f3 1f       	adc	r31, r19
    3686:	80 81       	ld	r24, Z
    3688:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	81 50       	subi	r24, 0x01	; 1
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	88 23       	and	r24, r24
    3696:	61 f7       	brne	.-40     	; 0x3670 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    3698:	80 e0       	ldi	r24, 0x00	; 0
}
    369a:	2e 96       	adiw	r28, 0x0e	; 14
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	08 95       	ret

000036ac <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    36ac:	df 93       	push	r29
    36ae:	cf 93       	push	r28
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	a3 97       	sbiw	r28, 0x23	; 35
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	98 a3       	std	Y+32, r25	; 0x20
    36c2:	8f 8f       	std	Y+31, r24	; 0x1f
    36c4:	69 a3       	std	Y+33, r22	; 0x21
    36c6:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	61 e0       	ldi	r22, 0x01	; 1
    36cc:	41 e0       	ldi	r20, 0x01	; 1
    36ce:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	40 e0       	ldi	r20, 0x00	; 0
    36d8:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>


	if(row == 1){
    36dc:	89 a1       	ldd	r24, Y+33	; 0x21
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <Lcd_ES_tdisplayNum_xy+0x38>
    36e2:	76 c0       	rjmp	.+236    	; 0x37d0 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    36e4:	80 e8       	ldi	r24, 0x80	; 128
    36e6:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a0 e8       	ldi	r26, 0x80	; 128
    36f0:	bf e3       	ldi	r27, 0x3F	; 63
    36f2:	89 8f       	std	Y+25, r24	; 0x19
    36f4:	9a 8f       	std	Y+26, r25	; 0x1a
    36f6:	ab 8f       	std	Y+27, r26	; 0x1b
    36f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	69 8d       	ldd	r22, Y+25	; 0x19
    36fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a e7       	ldi	r20, 0x7A	; 122
    3708:	55 e4       	ldi	r21, 0x45	; 69
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	8d 8b       	std	Y+21, r24	; 0x15
    3714:	9e 8b       	std	Y+22, r25	; 0x16
    3716:	af 8b       	std	Y+23, r26	; 0x17
    3718:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    371a:	6d 89       	ldd	r22, Y+21	; 0x15
    371c:	7e 89       	ldd	r23, Y+22	; 0x16
    371e:	8f 89       	ldd	r24, Y+23	; 0x17
    3720:	98 8d       	ldd	r25, Y+24	; 0x18
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	9c 8b       	std	Y+20, r25	; 0x14
    3738:	8b 8b       	std	Y+19, r24	; 0x13
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    373c:	6d 89       	ldd	r22, Y+21	; 0x15
    373e:	7e 89       	ldd	r23, Y+22	; 0x16
    3740:	8f 89       	ldd	r24, Y+23	; 0x17
    3742:	98 8d       	ldd	r25, Y+24	; 0x18
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	69 8d       	ldd	r22, Y+25	; 0x19
    3756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9c 8b       	std	Y+20, r25	; 0x14
    377a:	8b 8b       	std	Y+19, r24	; 0x13
    377c:	0f c0       	rjmp	.+30     	; 0x379c <Lcd_ES_tdisplayNum_xy+0xf0>
    377e:	80 e9       	ldi	r24, 0x90	; 144
    3780:	91 e0       	ldi	r25, 0x01	; 1
    3782:	9a 8b       	std	Y+18, r25	; 0x12
    3784:	89 8b       	std	Y+17, r24	; 0x11
    3786:	89 89       	ldd	r24, Y+17	; 0x11
    3788:	9a 89       	ldd	r25, Y+18	; 0x12
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <Lcd_ES_tdisplayNum_xy+0xde>
    378e:	9a 8b       	std	Y+18, r25	; 0x12
    3790:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8b 89       	ldd	r24, Y+19	; 0x13
    3794:	9c 89       	ldd	r25, Y+20	; 0x14
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9c 8b       	std	Y+20, r25	; 0x14
    379a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8b 89       	ldd	r24, Y+19	; 0x13
    379e:	9c 89       	ldd	r25, Y+20	; 0x14
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <Lcd_ES_tdisplayNum_xy+0xd2>
    37a4:	92 c0       	rjmp	.+292    	; 0x38ca <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	6d 89       	ldd	r22, Y+21	; 0x15
    37a8:	7e 89       	ldd	r23, Y+22	; 0x16
    37aa:	8f 89       	ldd	r24, Y+23	; 0x17
    37ac:	98 8d       	ldd	r25, Y+24	; 0x18
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9c 8b       	std	Y+20, r25	; 0x14
    37b8:	8b 8b       	std	Y+19, r24	; 0x13
    37ba:	8b 89       	ldd	r24, Y+19	; 0x13
    37bc:	9c 89       	ldd	r25, Y+20	; 0x14
    37be:	98 8b       	std	Y+16, r25	; 0x10
    37c0:	8f 87       	std	Y+15, r24	; 0x0f
    37c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c4:	98 89       	ldd	r25, Y+16	; 0x10
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <Lcd_ES_tdisplayNum_xy+0x11a>
    37ca:	98 8b       	std	Y+16, r25	; 0x10
    37cc:	8f 87       	std	Y+15, r24	; 0x0f
    37ce:	7d c0       	rjmp	.+250    	; 0x38ca <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    37d0:	89 a1       	ldd	r24, Y+33	; 0x21
    37d2:	82 30       	cpi	r24, 0x02	; 2
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <Lcd_ES_tdisplayNum_xy+0x12c>
    37d6:	76 c0       	rjmp	.+236    	; 0x38c4 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    37d8:	80 ec       	ldi	r24, 0xC0	; 192
    37da:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	a0 e2       	ldi	r26, 0x20	; 32
    37e4:	b1 e4       	ldi	r27, 0x41	; 65
    37e6:	8b 87       	std	Y+11, r24	; 0x0b
    37e8:	9c 87       	std	Y+12, r25	; 0x0c
    37ea:	ad 87       	std	Y+13, r26	; 0x0d
    37ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	4a e7       	ldi	r20, 0x7A	; 122
    37fc:	55 e4       	ldi	r21, 0x45	; 69
    37fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	8f 83       	std	Y+7, r24	; 0x07
    3808:	98 87       	std	Y+8, r25	; 0x08
    380a:	a9 87       	std	Y+9, r26	; 0x09
    380c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    380e:	6f 81       	ldd	r22, Y+7	; 0x07
    3810:	78 85       	ldd	r23, Y+8	; 0x08
    3812:	89 85       	ldd	r24, Y+9	; 0x09
    3814:	9a 85       	ldd	r25, Y+10	; 0x0a
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e8       	ldi	r20, 0x80	; 128
    381c:	5f e3       	ldi	r21, 0x3F	; 63
    381e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3822:	88 23       	and	r24, r24
    3824:	2c f4       	brge	.+10     	; 0x3830 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	9e 83       	std	Y+6, r25	; 0x06
    382c:	8d 83       	std	Y+5, r24	; 0x05
    382e:	3f c0       	rjmp	.+126    	; 0x38ae <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    3830:	6f 81       	ldd	r22, Y+7	; 0x07
    3832:	78 85       	ldd	r23, Y+8	; 0x08
    3834:	89 85       	ldd	r24, Y+9	; 0x09
    3836:	9a 85       	ldd	r25, Y+10	; 0x0a
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	3f ef       	ldi	r19, 0xFF	; 255
    383c:	4f e7       	ldi	r20, 0x7F	; 127
    383e:	57 e4       	ldi	r21, 0x47	; 71
    3840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3844:	18 16       	cp	r1, r24
    3846:	4c f5       	brge	.+82     	; 0x389a <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3848:	6b 85       	ldd	r22, Y+11	; 0x0b
    384a:	7c 85       	ldd	r23, Y+12	; 0x0c
    384c:	8d 85       	ldd	r24, Y+13	; 0x0d
    384e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e2       	ldi	r20, 0x20	; 32
    3856:	51 e4       	ldi	r21, 0x41	; 65
    3858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	bc 01       	movw	r22, r24
    3862:	cd 01       	movw	r24, r26
    3864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	9e 83       	std	Y+6, r25	; 0x06
    386e:	8d 83       	std	Y+5, r24	; 0x05
    3870:	0f c0       	rjmp	.+30     	; 0x3890 <Lcd_ES_tdisplayNum_xy+0x1e4>
    3872:	80 e9       	ldi	r24, 0x90	; 144
    3874:	91 e0       	ldi	r25, 0x01	; 1
    3876:	9c 83       	std	Y+4, r25	; 0x04
    3878:	8b 83       	std	Y+3, r24	; 0x03
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	f1 f7       	brne	.-4      	; 0x387e <Lcd_ES_tdisplayNum_xy+0x1d2>
    3882:	9c 83       	std	Y+4, r25	; 0x04
    3884:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3890:	8d 81       	ldd	r24, Y+5	; 0x05
    3892:	9e 81       	ldd	r25, Y+6	; 0x06
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	69 f7       	brne	.-38     	; 0x3872 <Lcd_ES_tdisplayNum_xy+0x1c6>
    3898:	18 c0       	rjmp	.+48     	; 0x38ca <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389a:	6f 81       	ldd	r22, Y+7	; 0x07
    389c:	78 85       	ldd	r23, Y+8	; 0x08
    389e:	89 85       	ldd	r24, Y+9	; 0x09
    38a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	9e 83       	std	Y+6, r25	; 0x06
    38ac:	8d 83       	std	Y+5, r24	; 0x05
    38ae:	8d 81       	ldd	r24, Y+5	; 0x05
    38b0:	9e 81       	ldd	r25, Y+6	; 0x06
    38b2:	9a 83       	std	Y+2, r25	; 0x02
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <Lcd_ES_tdisplayNum_xy+0x20e>
    38be:	9a 83       	std	Y+2, r25	; 0x02
    38c0:	89 83       	std	Y+1, r24	; 0x01
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	8b a3       	std	Y+35, r24	; 0x23
    38c8:	1a c0       	rjmp	.+52     	; 0x38fe <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	9e 8f       	std	Y+30, r25	; 0x1e
    38d0:	8d 8f       	std	Y+29, r24	; 0x1d
    38d2:	08 c0       	rjmp	.+16     	; 0x38e4 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    38d4:	8c e1       	ldi	r24, 0x1C	; 28
    38d6:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    38da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	9e 8f       	std	Y+30, r25	; 0x1e
    38e2:	8d 8f       	std	Y+29, r24	; 0x1d
    38e4:	8a a1       	ldd	r24, Y+34	; 0x22
    38e6:	28 2f       	mov	r18, r24
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38ee:	28 17       	cp	r18, r24
    38f0:	39 07       	cpc	r19, r25
    38f2:	84 f7       	brge	.-32     	; 0x38d4 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    38f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f6:	98 a1       	ldd	r25, Y+32	; 0x20
    38f8:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <Lcd_ES_tdisplayNum>
	return ES_OK;
    38fc:	1b a2       	std	Y+35, r1	; 0x23
    38fe:	8b a1       	ldd	r24, Y+35	; 0x23

}
    3900:	a3 96       	adiw	r28, 0x23	; 35
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	a2 97       	sbiw	r28, 0x22	; 34
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	8f 8f       	std	Y+31, r24	; 0x1f
    3928:	68 a3       	std	Y+32, r22	; 0x20
    392a:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	40 e0       	ldi	r20, 0x00	; 0
    393c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>


	if(row == 1){
    3940:	88 a1       	ldd	r24, Y+32	; 0x20
    3942:	81 30       	cpi	r24, 0x01	; 1
    3944:	09 f0       	breq	.+2      	; 0x3948 <Lcd_ES_tsendChar_xy+0x36>
    3946:	76 c0       	rjmp	.+236    	; 0x3a34 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    3948:	80 e8       	ldi	r24, 0x80	; 128
    394a:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	a0 e8       	ldi	r26, 0x80	; 128
    3954:	bf e3       	ldi	r27, 0x3F	; 63
    3956:	89 8f       	std	Y+25, r24	; 0x19
    3958:	9a 8f       	std	Y+26, r25	; 0x1a
    395a:	ab 8f       	std	Y+27, r26	; 0x1b
    395c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395e:	69 8d       	ldd	r22, Y+25	; 0x19
    3960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	4a e7       	ldi	r20, 0x7A	; 122
    396c:	55 e4       	ldi	r21, 0x45	; 69
    396e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	8d 8b       	std	Y+21, r24	; 0x15
    3978:	9e 8b       	std	Y+22, r25	; 0x16
    397a:	af 8b       	std	Y+23, r26	; 0x17
    397c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    397e:	6d 89       	ldd	r22, Y+21	; 0x15
    3980:	7e 89       	ldd	r23, Y+22	; 0x16
    3982:	8f 89       	ldd	r24, Y+23	; 0x17
    3984:	98 8d       	ldd	r25, Y+24	; 0x18
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e8       	ldi	r20, 0x80	; 128
    398c:	5f e3       	ldi	r21, 0x3F	; 63
    398e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3992:	88 23       	and	r24, r24
    3994:	2c f4       	brge	.+10     	; 0x39a0 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	9c 8b       	std	Y+20, r25	; 0x14
    399c:	8b 8b       	std	Y+19, r24	; 0x13
    399e:	3f c0       	rjmp	.+126    	; 0x3a1e <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    39a0:	6d 89       	ldd	r22, Y+21	; 0x15
    39a2:	7e 89       	ldd	r23, Y+22	; 0x16
    39a4:	8f 89       	ldd	r24, Y+23	; 0x17
    39a6:	98 8d       	ldd	r25, Y+24	; 0x18
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	3f ef       	ldi	r19, 0xFF	; 255
    39ac:	4f e7       	ldi	r20, 0x7F	; 127
    39ae:	57 e4       	ldi	r21, 0x47	; 71
    39b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39b4:	18 16       	cp	r1, r24
    39b6:	4c f5       	brge	.+82     	; 0x3a0a <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b8:	69 8d       	ldd	r22, Y+25	; 0x19
    39ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e2       	ldi	r20, 0x20	; 32
    39c6:	51 e4       	ldi	r21, 0x41	; 65
    39c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	9c 8b       	std	Y+20, r25	; 0x14
    39de:	8b 8b       	std	Y+19, r24	; 0x13
    39e0:	0f c0       	rjmp	.+30     	; 0x3a00 <Lcd_ES_tsendChar_xy+0xee>
    39e2:	80 e9       	ldi	r24, 0x90	; 144
    39e4:	91 e0       	ldi	r25, 0x01	; 1
    39e6:	9a 8b       	std	Y+18, r25	; 0x12
    39e8:	89 8b       	std	Y+17, r24	; 0x11
    39ea:	89 89       	ldd	r24, Y+17	; 0x11
    39ec:	9a 89       	ldd	r25, Y+18	; 0x12
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	f1 f7       	brne	.-4      	; 0x39ee <Lcd_ES_tsendChar_xy+0xdc>
    39f2:	9a 8b       	std	Y+18, r25	; 0x12
    39f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f6:	8b 89       	ldd	r24, Y+19	; 0x13
    39f8:	9c 89       	ldd	r25, Y+20	; 0x14
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	9c 8b       	std	Y+20, r25	; 0x14
    39fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a00:	8b 89       	ldd	r24, Y+19	; 0x13
    3a02:	9c 89       	ldd	r25, Y+20	; 0x14
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	69 f7       	brne	.-38     	; 0x39e2 <Lcd_ES_tsendChar_xy+0xd0>
    3a08:	92 c0       	rjmp	.+292    	; 0x3b2e <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a10:	98 8d       	ldd	r25, Y+24	; 0x18
    3a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	9c 8b       	std	Y+20, r25	; 0x14
    3a1c:	8b 8b       	std	Y+19, r24	; 0x13
    3a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a20:	9c 89       	ldd	r25, Y+20	; 0x14
    3a22:	98 8b       	std	Y+16, r25	; 0x10
    3a24:	8f 87       	std	Y+15, r24	; 0x0f
    3a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a28:	98 89       	ldd	r25, Y+16	; 0x10
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <Lcd_ES_tsendChar_xy+0x118>
    3a2e:	98 8b       	std	Y+16, r25	; 0x10
    3a30:	8f 87       	std	Y+15, r24	; 0x0f
    3a32:	7d c0       	rjmp	.+250    	; 0x3b2e <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    3a34:	88 a1       	ldd	r24, Y+32	; 0x20
    3a36:	82 30       	cpi	r24, 0x02	; 2
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <Lcd_ES_tsendChar_xy+0x12a>
    3a3a:	76 c0       	rjmp	.+236    	; 0x3b28 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    3a3c:	80 ec       	ldi	r24, 0xC0	; 192
    3a3e:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	a0 e2       	ldi	r26, 0x20	; 32
    3a48:	b1 e4       	ldi	r27, 0x41	; 65
    3a4a:	8b 87       	std	Y+11, r24	; 0x0b
    3a4c:	9c 87       	std	Y+12, r25	; 0x0c
    3a4e:	ad 87       	std	Y+13, r26	; 0x0d
    3a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	4a e7       	ldi	r20, 0x7A	; 122
    3a60:	55 e4       	ldi	r21, 0x45	; 69
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	8f 83       	std	Y+7, r24	; 0x07
    3a6c:	98 87       	std	Y+8, r25	; 0x08
    3a6e:	a9 87       	std	Y+9, r26	; 0x09
    3a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a72:	6f 81       	ldd	r22, Y+7	; 0x07
    3a74:	78 85       	ldd	r23, Y+8	; 0x08
    3a76:	89 85       	ldd	r24, Y+9	; 0x09
    3a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e8       	ldi	r20, 0x80	; 128
    3a80:	5f e3       	ldi	r21, 0x3F	; 63
    3a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a86:	88 23       	and	r24, r24
    3a88:	2c f4       	brge	.+10     	; 0x3a94 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9e 83       	std	Y+6, r25	; 0x06
    3a90:	8d 83       	std	Y+5, r24	; 0x05
    3a92:	3f c0       	rjmp	.+126    	; 0x3b12 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    3a94:	6f 81       	ldd	r22, Y+7	; 0x07
    3a96:	78 85       	ldd	r23, Y+8	; 0x08
    3a98:	89 85       	ldd	r24, Y+9	; 0x09
    3a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	4c f5       	brge	.+82     	; 0x3afe <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	51 e4       	ldi	r21, 0x41	; 65
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	cd 01       	movw	r24, r26
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
    3ad4:	0f c0       	rjmp	.+30     	; 0x3af4 <Lcd_ES_tsendChar_xy+0x1e2>
    3ad6:	80 e9       	ldi	r24, 0x90	; 144
    3ad8:	91 e0       	ldi	r25, 0x01	; 1
    3ada:	9c 83       	std	Y+4, r25	; 0x04
    3adc:	8b 83       	std	Y+3, r24	; 0x03
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <Lcd_ES_tsendChar_xy+0x1d0>
    3ae6:	9c 83       	std	Y+4, r25	; 0x04
    3ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	9e 83       	std	Y+6, r25	; 0x06
    3af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	8d 81       	ldd	r24, Y+5	; 0x05
    3af6:	9e 81       	ldd	r25, Y+6	; 0x06
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f7       	brne	.-38     	; 0x3ad6 <Lcd_ES_tsendChar_xy+0x1c4>
    3afc:	18 c0       	rjmp	.+48     	; 0x3b2e <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afe:	6f 81       	ldd	r22, Y+7	; 0x07
    3b00:	78 85       	ldd	r23, Y+8	; 0x08
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
    3b12:	8d 81       	ldd	r24, Y+5	; 0x05
    3b14:	9e 81       	ldd	r25, Y+6	; 0x06
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <Lcd_ES_tsendChar_xy+0x20c>
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	8a a3       	std	Y+34, r24	; 0x22
    3b2c:	19 c0       	rjmp	.+50     	; 0x3b60 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	9e 8f       	std	Y+30, r25	; 0x1e
    3b34:	8d 8f       	std	Y+29, r24	; 0x1d
    3b36:	08 c0       	rjmp	.+16     	; 0x3b48 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    3b38:	8c e1       	ldi	r24, 0x1C	; 28
    3b3a:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	9e 8f       	std	Y+30, r25	; 0x1e
    3b46:	8d 8f       	std	Y+29, r24	; 0x1d
    3b48:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4a:	28 2f       	mov	r18, r24
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b52:	28 17       	cp	r18, r24
    3b54:	39 07       	cpc	r19, r25
    3b56:	84 f7       	brge	.-32     	; 0x3b38 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3b58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b5a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Lcd_ES_tsendChar>
	return ES_OK;
    3b5e:	1a a2       	std	Y+34, r1	; 0x22
    3b60:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3b62:	a2 96       	adiw	r28, 0x22	; 34
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	f8 94       	cli
    3b68:	de bf       	out	0x3e, r29	; 62
    3b6a:	0f be       	out	0x3f, r0	; 63
    3b6c:	cd bf       	out	0x3d, r28	; 61
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	00 d0       	rcall	.+0      	; 0x3b7a <LCD_ES_tSet_Cursor_Pos+0x6>
    3b7a:	00 d0       	rcall	.+0      	; 0x3b7c <LCD_ES_tSet_Cursor_Pos+0x8>
    3b7c:	0f 92       	push	r0
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	81 50       	subi	r24, 0x01	; 1
    3b8a:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	28 2f       	mov	r18, r24
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	3d 83       	std	Y+5, r19	; 0x05
    3b94:	2c 83       	std	Y+4, r18	; 0x04
    3b96:	8c 81       	ldd	r24, Y+4	; 0x04
    3b98:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9a:	81 30       	cpi	r24, 0x01	; 1
    3b9c:	91 05       	cpc	r25, r1
    3b9e:	31 f0       	breq	.+12     	; 0x3bac <LCD_ES_tSet_Cursor_Pos+0x38>
    3ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ba4:	22 30       	cpi	r18, 0x02	; 2
    3ba6:	31 05       	cpc	r19, r1
    3ba8:	31 f0       	breq	.+12     	; 0x3bb6 <LCD_ES_tSet_Cursor_Pos+0x42>
    3baa:	0a c0       	rjmp	.+20     	; 0x3bc0 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	80 58       	subi	r24, 0x80	; 128
    3bb0:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    3bb4:	08 c0       	rjmp	.+16     	; 0x3bc6 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    3bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb8:	80 54       	subi	r24, 0x40	; 64
    3bba:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    3bbe:	03 c0       	rjmp	.+6      	; 0x3bc6 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    3bc0:	31 e0       	ldi	r19, 0x01	; 1
    3bc2:	3b 83       	std	Y+3, r19	; 0x03
    3bc4:	01 c0       	rjmp	.+2      	; 0x3bc8 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3bc6:	1b 82       	std	Y+3, r1	; 0x03
    3bc8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <LCD_ES_tGoTo+0x6>
    3be0:	0f 92       	push	r0
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	88 23       	and	r24, r24
    3bee:	41 f4       	brne	.+16     	; 0x3c00 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	80 31       	cpi	r24, 0x10	; 16
    3bf4:	98 f4       	brcc	.+38     	; 0x3c1c <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	80 58       	subi	r24, 0x80	; 128
    3bfa:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    3bfe:	0e c0       	rjmp	.+28     	; 0x3c1c <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	81 30       	cpi	r24, 0x01	; 1
    3c04:	41 f4       	brne	.+16     	; 0x3c16 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3c06:	8a 81       	ldd	r24, Y+2	; 0x02
    3c08:	80 31       	cpi	r24, 0x10	; 16
    3c0a:	40 f4       	brcc	.+16     	; 0x3c1c <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	80 54       	subi	r24, 0x40	; 64
    3c10:	0e 94 33 19 	call	0x3266	; 0x3266 <Lcd_ES_tsendCmd>
    3c14:	03 c0       	rjmp	.+6      	; 0x3c1c <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	8b 83       	std	Y+3, r24	; 0x03
    3c1a:	01 c0       	rjmp	.+2      	; 0x3c1e <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    3c1c:	1b 82       	std	Y+3, r1	; 0x03
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3c2c:	df 93       	push	r29
    3c2e:	cf 93       	push	r28
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	65 97       	sbiw	r28, 0x15	; 21
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	9c 8b       	std	Y+20, r25	; 0x14
    3c42:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3c44:	eb 89       	ldd	r30, Y+19	; 0x13
    3c46:	fc 89       	ldd	r31, Y+20	; 0x14
    3c48:	8f ef       	ldi	r24, 0xFF	; 255
    3c4a:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    3c4c:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    3c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c50:	9c 89       	ldd	r25, Y+20	; 0x14
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <KPD_ES_tGetKeyPressed+0x2c>
    3c56:	ed c0       	rjmp	.+474    	; 0x3e32 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3c58:	19 8a       	std	Y+17, r1	; 0x11
    3c5a:	e5 c0       	rjmp	.+458    	; 0x3e26 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    3c5c:	89 89       	ldd	r24, Y+17	; 0x11
    3c5e:	88 2f       	mov	r24, r24
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	fc 01       	movw	r30, r24
    3c64:	ef 5d       	subi	r30, 0xDF	; 223
    3c66:	fd 4f       	sbci	r31, 0xFD	; 253
    3c68:	90 81       	ld	r25, Z
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	69 2f       	mov	r22, r25
    3c6e:	40 e0       	ldi	r20, 0x00	; 0
    3c70:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3c74:	18 8a       	std	Y+16, r1	; 0x10
    3c76:	c1 c0       	rjmp	.+386    	; 0x3dfa <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3c78:	88 89       	ldd	r24, Y+16	; 0x10
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	fc 01       	movw	r30, r24
    3c80:	eb 5d       	subi	r30, 0xDB	; 219
    3c82:	fd 4f       	sbci	r31, 0xFD	; 253
    3c84:	90 81       	ld	r25, Z
    3c86:	9e 01       	movw	r18, r28
    3c88:	2e 5e       	subi	r18, 0xEE	; 238
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	83 e0       	ldi	r24, 0x03	; 3
    3c8e:	69 2f       	mov	r22, r25
    3c90:	a9 01       	movw	r20, r18
    3c92:	0e 94 75 12 	call	0x24ea	; 0x24ea <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    3c96:	8a 89       	ldd	r24, Y+18	; 0x12
    3c98:	88 23       	and	r24, r24
    3c9a:	09 f0       	breq	.+2      	; 0x3c9e <KPD_ES_tGetKeyPressed+0x72>
    3c9c:	ab c0       	rjmp	.+342    	; 0x3df4 <KPD_ES_tGetKeyPressed+0x1c8>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	a0 ea       	ldi	r26, 0xA0	; 160
    3ca4:	b1 e4       	ldi	r27, 0x41	; 65
    3ca6:	8b 87       	std	Y+11, r24	; 0x0b
    3ca8:	9c 87       	std	Y+12, r25	; 0x0c
    3caa:	ad 87       	std	Y+13, r26	; 0x0d
    3cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	4a e7       	ldi	r20, 0x7A	; 122
    3cbc:	55 e4       	ldi	r21, 0x45	; 69
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8f 83       	std	Y+7, r24	; 0x07
    3cc8:	98 87       	std	Y+8, r25	; 0x08
    3cca:	a9 87       	std	Y+9, r26	; 0x09
    3ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cce:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd0:	78 85       	ldd	r23, Y+8	; 0x08
    3cd2:	89 85       	ldd	r24, Y+9	; 0x09
    3cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e8       	ldi	r20, 0x80	; 128
    3cdc:	5f e3       	ldi	r21, 0x3F	; 63
    3cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce2:	88 23       	and	r24, r24
    3ce4:	2c f4       	brge	.+10     	; 0x3cf0 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	9e 83       	std	Y+6, r25	; 0x06
    3cec:	8d 83       	std	Y+5, r24	; 0x05
    3cee:	3f c0       	rjmp	.+126    	; 0x3d6e <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    3cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cf2:	78 85       	ldd	r23, Y+8	; 0x08
    3cf4:	89 85       	ldd	r24, Y+9	; 0x09
    3cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	3f ef       	ldi	r19, 0xFF	; 255
    3cfc:	4f e7       	ldi	r20, 0x7F	; 127
    3cfe:	57 e4       	ldi	r21, 0x47	; 71
    3d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d04:	18 16       	cp	r1, r24
    3d06:	4c f5       	brge	.+82     	; 0x3d5a <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e2       	ldi	r20, 0x20	; 32
    3d16:	51 e4       	ldi	r21, 0x41	; 65
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	9e 83       	std	Y+6, r25	; 0x06
    3d2e:	8d 83       	std	Y+5, r24	; 0x05
    3d30:	0f c0       	rjmp	.+30     	; 0x3d50 <KPD_ES_tGetKeyPressed+0x124>
    3d32:	80 e9       	ldi	r24, 0x90	; 144
    3d34:	91 e0       	ldi	r25, 0x01	; 1
    3d36:	9c 83       	std	Y+4, r25	; 0x04
    3d38:	8b 83       	std	Y+3, r24	; 0x03
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <KPD_ES_tGetKeyPressed+0x112>
    3d42:	9c 83       	std	Y+4, r25	; 0x04
    3d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d46:	8d 81       	ldd	r24, Y+5	; 0x05
    3d48:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	9e 83       	std	Y+6, r25	; 0x06
    3d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d50:	8d 81       	ldd	r24, Y+5	; 0x05
    3d52:	9e 81       	ldd	r25, Y+6	; 0x06
    3d54:	00 97       	sbiw	r24, 0x00	; 0
    3d56:	69 f7       	brne	.-38     	; 0x3d32 <KPD_ES_tGetKeyPressed+0x106>
    3d58:	14 c0       	rjmp	.+40     	; 0x3d82 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5c:	78 85       	ldd	r23, Y+8	; 0x08
    3d5e:	89 85       	ldd	r24, Y+9	; 0x09
    3d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	9e 83       	std	Y+6, r25	; 0x06
    3d6c:	8d 83       	std	Y+5, r24	; 0x05
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	9a 83       	std	Y+2, r25	; 0x02
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <KPD_ES_tGetKeyPressed+0x14e>
    3d7e:	9a 83       	std	Y+2, r25	; 0x02
    3d80:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3d82:	88 89       	ldd	r24, Y+16	; 0x10
    3d84:	88 2f       	mov	r24, r24
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	fc 01       	movw	r30, r24
    3d8a:	eb 5d       	subi	r30, 0xDB	; 219
    3d8c:	fd 4f       	sbci	r31, 0xFD	; 253
    3d8e:	90 81       	ld	r25, Z
    3d90:	9e 01       	movw	r18, r28
    3d92:	2e 5e       	subi	r18, 0xEE	; 238
    3d94:	3f 4f       	sbci	r19, 0xFF	; 255
    3d96:	83 e0       	ldi	r24, 0x03	; 3
    3d98:	69 2f       	mov	r22, r25
    3d9a:	a9 01       	movw	r20, r18
    3d9c:	0e 94 75 12 	call	0x24ea	; 0x24ea <DIO_ES_tGetPinValue>
    3da0:	0f c0       	rjmp	.+30     	; 0x3dc0 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3da2:	88 89       	ldd	r24, Y+16	; 0x10
    3da4:	88 2f       	mov	r24, r24
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	fc 01       	movw	r30, r24
    3daa:	eb 5d       	subi	r30, 0xDB	; 219
    3dac:	fd 4f       	sbci	r31, 0xFD	; 253
    3dae:	90 81       	ld	r25, Z
    3db0:	9e 01       	movw	r18, r28
    3db2:	2e 5e       	subi	r18, 0xEE	; 238
    3db4:	3f 4f       	sbci	r19, 0xFF	; 255
    3db6:	83 e0       	ldi	r24, 0x03	; 3
    3db8:	69 2f       	mov	r22, r25
    3dba:	a9 01       	movw	r20, r18
    3dbc:	0e 94 75 12 	call	0x24ea	; 0x24ea <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    3dc0:	8a 89       	ldd	r24, Y+18	; 0x12
    3dc2:	88 23       	and	r24, r24
    3dc4:	71 f3       	breq	.-36     	; 0x3da2 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3dc6:	89 89       	ldd	r24, Y+17	; 0x11
    3dc8:	48 2f       	mov	r20, r24
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	88 89       	ldd	r24, Y+16	; 0x10
    3dce:	28 2f       	mov	r18, r24
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	ca 01       	movw	r24, r20
    3dd4:	88 0f       	add	r24, r24
    3dd6:	99 1f       	adc	r25, r25
    3dd8:	88 0f       	add	r24, r24
    3dda:	99 1f       	adc	r25, r25
    3ddc:	82 0f       	add	r24, r18
    3dde:	93 1f       	adc	r25, r19
    3de0:	fc 01       	movw	r30, r24
    3de2:	ef 5e       	subi	r30, 0xEF	; 239
    3de4:	fd 4f       	sbci	r31, 0xFD	; 253
    3de6:	80 81       	ld	r24, Z
    3de8:	eb 89       	ldd	r30, Y+19	; 0x13
    3dea:	fc 89       	ldd	r31, Y+20	; 0x14
    3dec:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	8f 87       	std	Y+15, r24	; 0x0f
    3df2:	07 c0       	rjmp	.+14     	; 0x3e02 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3df4:	88 89       	ldd	r24, Y+16	; 0x10
    3df6:	8f 5f       	subi	r24, 0xFF	; 255
    3df8:	88 8b       	std	Y+16, r24	; 0x10
    3dfa:	88 89       	ldd	r24, Y+16	; 0x10
    3dfc:	84 30       	cpi	r24, 0x04	; 4
    3dfe:	08 f4       	brcc	.+2      	; 0x3e02 <KPD_ES_tGetKeyPressed+0x1d6>
    3e00:	3b cf       	rjmp	.-394    	; 0x3c78 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    3e02:	89 89       	ldd	r24, Y+17	; 0x11
    3e04:	88 2f       	mov	r24, r24
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	fc 01       	movw	r30, r24
    3e0a:	ef 5d       	subi	r30, 0xDF	; 223
    3e0c:	fd 4f       	sbci	r31, 0xFD	; 253
    3e0e:	90 81       	ld	r25, Z
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	69 2f       	mov	r22, r25
    3e14:	41 e0       	ldi	r20, 0x01	; 1
    3e16:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e1c:	81 30       	cpi	r24, 0x01	; 1
    3e1e:	39 f0       	breq	.+14     	; 0x3e2e <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3e20:	89 89       	ldd	r24, Y+17	; 0x11
    3e22:	8f 5f       	subi	r24, 0xFF	; 255
    3e24:	89 8b       	std	Y+17, r24	; 0x11
    3e26:	89 89       	ldd	r24, Y+17	; 0x11
    3e28:	84 30       	cpi	r24, 0x04	; 4
    3e2a:	08 f4       	brcc	.+2      	; 0x3e2e <KPD_ES_tGetKeyPressed+0x202>
    3e2c:	17 cf       	rjmp	.-466    	; 0x3c5c <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3e2e:	1d 8a       	std	Y+21, r1	; 0x15
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	8d 8b       	std	Y+21, r24	; 0x15
    3e36:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3e38:	65 96       	adiw	r28, 0x15	; 21
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	cf 91       	pop	r28
    3e46:	df 91       	pop	r29
    3e48:	08 95       	ret

00003e4a <DC_Motor_Init>:
#include "DC_MotorCfg.h"



ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    3e52:	2c 97       	sbiw	r28, 0x0c	; 12
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	8e 83       	std	Y+6, r24	; 0x06
	if(Motor == DC_MOTOR_0){
    3e60:	8e 81       	ldd	r24, Y+6	; 0x06
    3e62:	88 23       	and	r24, r24
    3e64:	59 f4       	brne	.+22     	; 0x3e7c <DC_Motor_Init+0x32>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	61 e0       	ldi	r22, 0x01	; 1
    3e6a:	41 e0       	ldi	r20, 0x01	; 1
    3e6c:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    3e70:	82 e0       	ldi	r24, 0x02	; 2
    3e72:	62 e0       	ldi	r22, 0x02	; 2
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
    3e7a:	11 c0       	rjmp	.+34     	; 0x3e9e <DC_Motor_Init+0x54>
	}else if(Motor == DC_MOTOR_1){
    3e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e7e:	81 30       	cpi	r24, 0x01	; 1
    3e80:	59 f4       	brne	.+22     	; 0x3e98 <DC_Motor_Init+0x4e>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    3e82:	82 e0       	ldi	r24, 0x02	; 2
    3e84:	63 e0       	ldi	r22, 0x03	; 3
    3e86:	41 e0       	ldi	r20, 0x01	; 1
    3e88:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    3e8c:	82 e0       	ldi	r24, 0x02	; 2
    3e8e:	64 e0       	ldi	r22, 0x04	; 4
    3e90:	41 e0       	ldi	r20, 0x01	; 1
    3e92:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
    3e96:	03 c0       	rjmp	.+6      	; 0x3e9e <DC_Motor_Init+0x54>
	}else{
		return ES_NOT_OK;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	8f 83       	std	Y+7, r24	; 0x07
    3e9c:	2a c0       	rjmp	.+84     	; 0x3ef2 <DC_Motor_Init+0xa8>
	}


	DIO_ES_tSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN_3, OUTPUT);
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	63 e0       	ldi	r22, 0x03	; 3
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 97 10 	call	0x212e	; 0x212e <DIO_ES_tSetPinDirection>
	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_8, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	31 96       	adiw	r30, 0x01	; 1
    3eac:	f9 87       	std	Y+9, r31	; 0x09
    3eae:	e8 87       	std	Y+8, r30	; 0x08
    3eb0:	89 e2       	ldi	r24, 0x29	; 41
    3eb2:	92 e0       	ldi	r25, 0x02	; 2
    3eb4:	9b 87       	std	Y+11, r25	; 0x0b
    3eb6:	8a 87       	std	Y+10, r24	; 0x0a
    3eb8:	95 e0       	ldi	r25, 0x05	; 5
    3eba:	9c 87       	std	Y+12, r25	; 0x0c
    3ebc:	ea 85       	ldd	r30, Y+10	; 0x0a
    3ebe:	fb 85       	ldd	r31, Y+11	; 0x0b
    3ec0:	00 80       	ld	r0, Z
    3ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ec4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ec6:	01 96       	adiw	r24, 0x01	; 1
    3ec8:	9b 87       	std	Y+11, r25	; 0x0b
    3eca:	8a 87       	std	Y+10, r24	; 0x0a
    3ecc:	e8 85       	ldd	r30, Y+8	; 0x08
    3ece:	f9 85       	ldd	r31, Y+9	; 0x09
    3ed0:	00 82       	st	Z, r0
    3ed2:	88 85       	ldd	r24, Y+8	; 0x08
    3ed4:	99 85       	ldd	r25, Y+9	; 0x09
    3ed6:	01 96       	adiw	r24, 0x01	; 1
    3ed8:	99 87       	std	Y+9, r25	; 0x09
    3eda:	88 87       	std	Y+8, r24	; 0x08
    3edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ede:	91 50       	subi	r25, 0x01	; 1
    3ee0:	9c 87       	std	Y+12, r25	; 0x0c
    3ee2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ee4:	ee 23       	and	r30, r30
    3ee6:	51 f7       	brne	.-44     	; 0x3ebc <DC_Motor_Init+0x72>
	TIMER0_Init(&Timer0Cfg);
    3ee8:	ce 01       	movw	r24, r28
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	0e 94 8a 09 	call	0x1314	; 0x1314 <TIMER0_Init>




	return ES_OK;
    3ef0:	1f 82       	std	Y+7, r1	; 0x07
    3ef2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3ef4:	2c 96       	adiw	r28, 0x0c	; 12
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	00 d0       	rcall	.+0      	; 0x3f0c <DC_Motor_Stop+0x6>
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	88 23       	and	r24, r24
    3f16:	59 f4       	brne	.+22     	; 0x3f2e <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3f18:	82 e0       	ldi	r24, 0x02	; 2
    3f1a:	61 e0       	ldi	r22, 0x01	; 1
    3f1c:	40 e0       	ldi	r20, 0x00	; 0
    3f1e:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3f22:	82 e0       	ldi	r24, 0x02	; 2
    3f24:	62 e0       	ldi	r22, 0x02	; 2
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3f2c:	11 c0       	rjmp	.+34     	; 0x3f50 <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	59 f4       	brne	.+22     	; 0x3f4a <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	63 e0       	ldi	r22, 0x03	; 3
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3f3e:	82 e0       	ldi	r24, 0x02	; 2
    3f40:	64 e0       	ldi	r22, 0x04	; 4
    3f42:	40 e0       	ldi	r20, 0x00	; 0
    3f44:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3f48:	03 c0       	rjmp	.+6      	; 0x3f50 <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	8a 83       	std	Y+2, r24	; 0x02
    3f4e:	01 c0       	rjmp	.+2      	; 0x3f52 <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    3f50:	1a 82       	std	Y+2, r1	; 0x02
    3f52:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	cf 91       	pop	r28
    3f5a:	df 91       	pop	r29
    3f5c:	08 95       	ret

00003f5e <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Dir MotorDir,u8 SpeedOF100)
{
    3f5e:	df 93       	push	r29
    3f60:	cf 93       	push	r28
    3f62:	00 d0       	rcall	.+0      	; 0x3f64 <DC_Motor_Move+0x6>
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <DC_Motor_Move+0x8>
    3f66:	00 d0       	rcall	.+0      	; 0x3f68 <DC_Motor_Move+0xa>
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	89 83       	std	Y+1, r24	; 0x01
    3f6e:	6a 83       	std	Y+2, r22	; 0x02
    3f70:	4b 83       	std	Y+3, r20	; 0x03

	switch(MotorDir){
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	3e 83       	std	Y+6, r19	; 0x06
    3f7a:	2d 83       	std	Y+5, r18	; 0x05
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	31 f0       	breq	.+12     	; 0x3f90 <DC_Motor_Move+0x32>
    3f84:	2d 81       	ldd	r18, Y+5	; 0x05
    3f86:	3e 81       	ldd	r19, Y+6	; 0x06
    3f88:	21 30       	cpi	r18, 0x01	; 1
    3f8a:	31 05       	cpc	r19, r1
    3f8c:	e9 f0       	breq	.+58     	; 0x3fc8 <DC_Motor_Move+0x6a>
    3f8e:	38 c0       	rjmp	.+112    	; 0x4000 <DC_Motor_Move+0xa2>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	88 23       	and	r24, r24
    3f94:	59 f4       	brne	.+22     	; 0x3fac <DC_Motor_Move+0x4e>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    3f96:	82 e0       	ldi	r24, 0x02	; 2
    3f98:	61 e0       	ldi	r22, 0x01	; 1
    3f9a:	41 e0       	ldi	r20, 0x01	; 1
    3f9c:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3fa0:	82 e0       	ldi	r24, 0x02	; 2
    3fa2:	62 e0       	ldi	r22, 0x02	; 2
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3faa:	2d c0       	rjmp	.+90     	; 0x4006 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	81 30       	cpi	r24, 0x01	; 1
    3fb0:	51 f5       	brne	.+84     	; 0x4006 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	63 e0       	ldi	r22, 0x03	; 3
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3fbc:	82 e0       	ldi	r24, 0x02	; 2
    3fbe:	64 e0       	ldi	r22, 0x04	; 4
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3fc6:	1f c0       	rjmp	.+62     	; 0x4006 <DC_Motor_Move+0xa8>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	88 23       	and	r24, r24
    3fcc:	59 f4       	brne	.+22     	; 0x3fe4 <DC_Motor_Move+0x86>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3fce:	82 e0       	ldi	r24, 0x02	; 2
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    3fd8:	82 e0       	ldi	r24, 0x02	; 2
    3fda:	62 e0       	ldi	r22, 0x02	; 2
    3fdc:	41 e0       	ldi	r20, 0x01	; 1
    3fde:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3fe2:	11 c0       	rjmp	.+34     	; 0x4006 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	81 30       	cpi	r24, 0x01	; 1
    3fe8:	71 f4       	brne	.+28     	; 0x4006 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	63 e0       	ldi	r22, 0x03	; 3
    3fee:	40 e0       	ldi	r20, 0x00	; 0
    3ff0:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	64 e0       	ldi	r22, 0x04	; 4
    3ff8:	41 e0       	ldi	r20, 0x01	; 1
    3ffa:	0e 94 86 11 	call	0x230c	; 0x230c <DIO_ES_tSetPinValue>
    3ffe:	03 c0       	rjmp	.+6      	; 0x4006 <DC_Motor_Move+0xa8>
		}
		break;
	default:
		return ES_NOT_OK;
    4000:	31 e0       	ldi	r19, 0x01	; 1
    4002:	3c 83       	std	Y+4, r19	; 0x04
    4004:	04 c0       	rjmp	.+8      	; 0x400e <DC_Motor_Move+0xb0>
	}


	PWM_Set_DutyCycle(SpeedOF100);
    4006:	8b 81       	ldd	r24, Y+3	; 0x03
    4008:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <PWM_Set_DutyCycle>




	return ES_OK;
    400c:	1c 82       	std	Y+4, r1	; 0x04
    400e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4010:	26 96       	adiw	r28, 0x06	; 6
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	f8 94       	cli
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	cf 91       	pop	r28
    401e:	df 91       	pop	r29
    4020:	08 95       	ret

00004022 <main>:




int main()
{
    4022:	df 93       	push	r29
    4024:	cf 93       	push	r28
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62

	 DC_Motor_Init(DC_MOTOR_0);
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <DC_Motor_Init>
    4030:	ff cf       	rjmp	.-2      	; 0x4030 <main+0xe>

00004032 <__mulsi3>:
    4032:	62 9f       	mul	r22, r18
    4034:	d0 01       	movw	r26, r0
    4036:	73 9f       	mul	r23, r19
    4038:	f0 01       	movw	r30, r0
    403a:	82 9f       	mul	r24, r18
    403c:	e0 0d       	add	r30, r0
    403e:	f1 1d       	adc	r31, r1
    4040:	64 9f       	mul	r22, r20
    4042:	e0 0d       	add	r30, r0
    4044:	f1 1d       	adc	r31, r1
    4046:	92 9f       	mul	r25, r18
    4048:	f0 0d       	add	r31, r0
    404a:	83 9f       	mul	r24, r19
    404c:	f0 0d       	add	r31, r0
    404e:	74 9f       	mul	r23, r20
    4050:	f0 0d       	add	r31, r0
    4052:	65 9f       	mul	r22, r21
    4054:	f0 0d       	add	r31, r0
    4056:	99 27       	eor	r25, r25
    4058:	72 9f       	mul	r23, r18
    405a:	b0 0d       	add	r27, r0
    405c:	e1 1d       	adc	r30, r1
    405e:	f9 1f       	adc	r31, r25
    4060:	63 9f       	mul	r22, r19
    4062:	b0 0d       	add	r27, r0
    4064:	e1 1d       	adc	r30, r1
    4066:	f9 1f       	adc	r31, r25
    4068:	bd 01       	movw	r22, r26
    406a:	cf 01       	movw	r24, r30
    406c:	11 24       	eor	r1, r1
    406e:	08 95       	ret

00004070 <__udivmodhi4>:
    4070:	aa 1b       	sub	r26, r26
    4072:	bb 1b       	sub	r27, r27
    4074:	51 e1       	ldi	r21, 0x11	; 17
    4076:	07 c0       	rjmp	.+14     	; 0x4086 <__udivmodhi4_ep>

00004078 <__udivmodhi4_loop>:
    4078:	aa 1f       	adc	r26, r26
    407a:	bb 1f       	adc	r27, r27
    407c:	a6 17       	cp	r26, r22
    407e:	b7 07       	cpc	r27, r23
    4080:	10 f0       	brcs	.+4      	; 0x4086 <__udivmodhi4_ep>
    4082:	a6 1b       	sub	r26, r22
    4084:	b7 0b       	sbc	r27, r23

00004086 <__udivmodhi4_ep>:
    4086:	88 1f       	adc	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	5a 95       	dec	r21
    408c:	a9 f7       	brne	.-22     	; 0x4078 <__udivmodhi4_loop>
    408e:	80 95       	com	r24
    4090:	90 95       	com	r25
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	08 95       	ret

00004098 <__udivmodsi4>:
    4098:	a1 e2       	ldi	r26, 0x21	; 33
    409a:	1a 2e       	mov	r1, r26
    409c:	aa 1b       	sub	r26, r26
    409e:	bb 1b       	sub	r27, r27
    40a0:	fd 01       	movw	r30, r26
    40a2:	0d c0       	rjmp	.+26     	; 0x40be <__udivmodsi4_ep>

000040a4 <__udivmodsi4_loop>:
    40a4:	aa 1f       	adc	r26, r26
    40a6:	bb 1f       	adc	r27, r27
    40a8:	ee 1f       	adc	r30, r30
    40aa:	ff 1f       	adc	r31, r31
    40ac:	a2 17       	cp	r26, r18
    40ae:	b3 07       	cpc	r27, r19
    40b0:	e4 07       	cpc	r30, r20
    40b2:	f5 07       	cpc	r31, r21
    40b4:	20 f0       	brcs	.+8      	; 0x40be <__udivmodsi4_ep>
    40b6:	a2 1b       	sub	r26, r18
    40b8:	b3 0b       	sbc	r27, r19
    40ba:	e4 0b       	sbc	r30, r20
    40bc:	f5 0b       	sbc	r31, r21

000040be <__udivmodsi4_ep>:
    40be:	66 1f       	adc	r22, r22
    40c0:	77 1f       	adc	r23, r23
    40c2:	88 1f       	adc	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	1a 94       	dec	r1
    40c8:	69 f7       	brne	.-38     	; 0x40a4 <__udivmodsi4_loop>
    40ca:	60 95       	com	r22
    40cc:	70 95       	com	r23
    40ce:	80 95       	com	r24
    40d0:	90 95       	com	r25
    40d2:	9b 01       	movw	r18, r22
    40d4:	ac 01       	movw	r20, r24
    40d6:	bd 01       	movw	r22, r26
    40d8:	cf 01       	movw	r24, r30
    40da:	08 95       	ret

000040dc <__prologue_saves__>:
    40dc:	2f 92       	push	r2
    40de:	3f 92       	push	r3
    40e0:	4f 92       	push	r4
    40e2:	5f 92       	push	r5
    40e4:	6f 92       	push	r6
    40e6:	7f 92       	push	r7
    40e8:	8f 92       	push	r8
    40ea:	9f 92       	push	r9
    40ec:	af 92       	push	r10
    40ee:	bf 92       	push	r11
    40f0:	cf 92       	push	r12
    40f2:	df 92       	push	r13
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	ca 1b       	sub	r28, r26
    4106:	db 0b       	sbc	r29, r27
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	09 94       	ijmp

00004114 <__epilogue_restores__>:
    4114:	2a 88       	ldd	r2, Y+18	; 0x12
    4116:	39 88       	ldd	r3, Y+17	; 0x11
    4118:	48 88       	ldd	r4, Y+16	; 0x10
    411a:	5f 84       	ldd	r5, Y+15	; 0x0f
    411c:	6e 84       	ldd	r6, Y+14	; 0x0e
    411e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4120:	8c 84       	ldd	r8, Y+12	; 0x0c
    4122:	9b 84       	ldd	r9, Y+11	; 0x0b
    4124:	aa 84       	ldd	r10, Y+10	; 0x0a
    4126:	b9 84       	ldd	r11, Y+9	; 0x09
    4128:	c8 84       	ldd	r12, Y+8	; 0x08
    412a:	df 80       	ldd	r13, Y+7	; 0x07
    412c:	ee 80       	ldd	r14, Y+6	; 0x06
    412e:	fd 80       	ldd	r15, Y+5	; 0x05
    4130:	0c 81       	ldd	r16, Y+4	; 0x04
    4132:	1b 81       	ldd	r17, Y+3	; 0x03
    4134:	aa 81       	ldd	r26, Y+2	; 0x02
    4136:	b9 81       	ldd	r27, Y+1	; 0x01
    4138:	ce 0f       	add	r28, r30
    413a:	d1 1d       	adc	r29, r1
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	ed 01       	movw	r28, r26
    4148:	08 95       	ret

0000414a <_exit>:
    414a:	f8 94       	cli

0000414c <__stop_program>:
    414c:	ff cf       	rjmp	.-2      	; 0x414c <__stop_program>
